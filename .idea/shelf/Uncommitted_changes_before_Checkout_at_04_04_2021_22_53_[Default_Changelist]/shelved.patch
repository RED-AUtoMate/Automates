Index: src/main/java/Automates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\nimport com.groupdocs.conversion.internal.a.a.Au;\n\nimport java.util.*;\n\npublic class Automates {\n    Stack<String> automates = new Stack();\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee;\n    private List<Etats> etats;\n    private List<String> alphabet;\n\n    public Automates() {\n    }\n\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return this.etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return this.etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return this.etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return this.alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n\n\n\n    boolean presentIn(char mot, String[] alphabet) {\n        boolean not_preset = true;\n\n        for(int i = 0; i < alphabet.length; ++i) {\n            if (alphabet[i].equals(String.valueOf(mot))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* l'application de l'automate de thompson à une expression reguliere donnée */\n    /* la fonction construit des sous-automates de thompson a fur et a mesure de l'analyse de\n    * l'expression reguliere en utilisant une pile pour les operations (+, .) et une autre\n    * pour les automates construit\n    * -Pour un caractere appartenant à l'alphabet ou une etoile de kleen, on lui\n    *  construit son automate associé\n    * -Pour un . de concatenation on l'empile dans la pile d'operations\n    * -Pour un + on depile de la pile d operation tant que le sommet est un . pour conserver la\n    * priorité de . sur + en construisant l'automate associé à chaque iteration :(a.b) puis l'empiler\n    * dans la pile d'automates\n    * -Pour une parethese ouvrante, on l empile dans la pile d'operations\n    * -Pour une parenthese fermante on depile un operateur de la pileM et deux automates, puis\n    * construire l'automate de thompson associe à l auperation et finalement l'empiler\n    * on repete jusqu'a avoir la parenthese ouvrante*/\n\n    public Automates thompson(String expression, String[] alpha) { Stack<Automates> pileA = new Stack();\n        Stack<Character> pileM = new Stack();\n        int etati = 0;\n\n\n        for(int i = 0; i < expression.length(); ++i) {\n            Automates ap;\n            ArrayList apEtats;\n\n            /* cas ou c est un charactere de l alphabet */\n            if (!this.presentIn(expression.charAt(i), alpha)) {\n                ap = new Automates();\n                Etats etd = new Etats();\n                etd.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etf = new Etats();\n                etf.setNom(String.valueOf(etati));\n                ++etati;\n                ArrayList<String> config = new ArrayList();\n                config.add(etf.getNom());\n                config.add(String.valueOf(expression.charAt(i)));\n                ArrayList trs = new ArrayList();\n                ArrayList trs1 = new ArrayList();\n                etf.setTransitions(trs);\n                trs1.add(config);\n                etd.setTransitions(trs1);\n                List<Etats> etfs = new ArrayList();\n                etfs.add(etf);\n                List<String> al = this.alphabet;\n                apEtats = new ArrayList();\n                apEtats.add(etd);\n                apEtats.add(etf);\n                ap.setAlphabet(al);\n                ap.setEtats(apEtats);\n                ap.setEtatsArrivee(etfs);\n                ap.setEtatDepart(etd);\n                pileA.push(ap);\n            }\n\n            if (expression.charAt(i) == '(') {\n                System.out.println('(');\n                pileM.push('(');\n            }\n\n            if (expression.charAt(i) == '.') {\n                pileM.push('.');\n                System.out.println(\".\");\n            }\n\n\n            if (expression.charAt(i) == '+') {\n                while (pileM.peek() == '.'){\n                    ap = new Automates();\n                    char exp = (Character)pileM.pop();\n                    System.out.println(\"exp \"+exp);\n                    Automates ap2 = (Automates)pileA.pop();\n                    Automates ap1 = (Automates)pileA.pop();\n                    ap.setAlphabet(ap2.getAlphabet());\n                    apEtats = new ArrayList();\n\n                    int j;\n                    for(j = 0; j < ap1.getEtats().size(); ++j) {\n                        apEtats.add(ap1.getEtats().get(j));\n                    }\n\n                    for(j = 0; j < ap2.getEtats().size(); ++j) {\n                        apEtats.add(ap2.getEtats().get(j));\n                    }\n\n                    ap.setEtats(apEtats);\n                    int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());\n                    int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());\n                    ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());\n                    ap.getEtats().remove(indiceD2);\n                    ap.setEtatDepart(ap1.getEtatDepart());\n                    ap.setEtatsArrivee(ap2.getEtatsArrivee());\n                    pileA.push(ap);\n                }\n                pileM.push('+');\n                System.out.println(\"+\");\n            }\n\n            ArrayList config1;\n            ArrayList config2;\n            ArrayList trF;\n            String ed1;\n            if (expression.charAt(i) == '*') {\n                System.out.println(\"*\");\n                ap = (Automates)pileA.pop();\n                Automates a = new Automates();\n                new ArrayList();\n                List<Etats> etats = ap.getEtats();\n                String ed = ap.getEtatDepart().getNom();\n                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();\n                Etats etatD = new Etats();\n                etatD.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etatF = new Etats();\n                etatF.setNom(String.valueOf(etati));\n                ArrayList etfss = new ArrayList();\n                etatF.setTransitions(etfss);\n                ++etati;\n                apEtats = new ArrayList();\n                apEtats.add(etatF);\n                ArrayList trD = new ArrayList();\n                config1 = new ArrayList();\n                config1.add(etatF.getNom());\n                config1.add(\"eps\");\n                trD.add(config1);\n                config2 = new ArrayList();\n                config2.add(ed);\n                config2.add(\"eps\");\n                trD.add(config2);\n                etatD.setTransitions(trD);\n\n                for(int j = 0; j < etats.size(); ++j) {\n                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(etatF.getNom());\n                        config3.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(config3);\n                        trF = new ArrayList();\n                        trF.add(ed);\n                        trF.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(trF);\n                    }\n                }\n\n                etats.add(etatD);\n                etats.add(etatF);\n                a.setEtatsArrivee(apEtats);\n                a.setEtats(etats);\n                a.setEtatDepart(etatD);\n                a.setAlphabet(ap.getAlphabet());\n                pileA.push(a);\n            }\n\n            if (expression.charAt(i) == ')') {\n                System.out.println(\")\");\n                while (pileM.peek() != '('){\n                    ap = new Automates();\n                    char exp = (Character)pileM.pop();\n                    System.out.println(\"exp \"+exp);\n                    Automates ap2 = (Automates)pileA.pop();\n                    Automates ap1 = (Automates)pileA.pop();\n                    ed1 = ap1.getEtatDepart().getNom();\n                    String ed2 = ap2.getEtatDepart().getNom();\n                    String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();\n                    String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();\n                    ap.setAlphabet(ap2.getAlphabet());\n                    apEtats = new ArrayList();\n\n                    int j;\n                    for(j = 0; j < ap1.getEtats().size(); ++j) {\n                        apEtats.add(ap1.getEtats().get(j));\n                    }\n\n                    for(j = 0; j < ap2.getEtats().size(); ++j) {\n                        apEtats.add(ap2.getEtats().get(j));\n                    }\n\n                    ap.setEtats(apEtats);\n                    switch(exp) {\n                        case '+':\n                            Etats etatsD = new Etats();\n                            etatsD.setNom(String.valueOf(etati));\n                            ++etati;\n                            config1 = new ArrayList();\n                            config1.add(String.valueOf(ed1));\n                            config1.add(\"eps\");\n                            config2 = new ArrayList();\n                            config2.add(String.valueOf(ed2));\n                            config2.add(\"eps\");\n                            ArrayList trD = new ArrayList();\n                            trD.add(config1);\n                            trD.add(config2);\n                            etatsD.setTransitions(trD);\n                            ap.getEtats().add(etatsD);\n                            Etats etatsF = new Etats();\n                            etatsF.setNom(String.valueOf(etati));\n                            ++etati;\n                            trF = new ArrayList();\n                            etatsF.setTransitions(trF);\n                            ap.getEtats().add(etatsF);\n                            ArrayList<String> config3 = new ArrayList();\n                            config3.add(String.valueOf(etatsF.getNom()));\n                            config3.add(\"eps\");\n                            ArrayList<String> config4 = new ArrayList();\n                            config4.add(String.valueOf(etatsF.getNom()));\n                            config4.add(\"eps\");\n                            ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);\n                            ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);\n                            List<Etats> efs = new ArrayList();\n                            efs.add(etatsF);\n                            ap.setEtatDepart(etatsD);\n                            ap.setEtatsArrivee(efs);\n                            pileA.push(ap);\n                            break;\n                        case '.':\n                            int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());\n                            int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());\n                            ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());\n                            ap.getEtats().remove(indiceD2);\n                            ap.setEtatDepart(ap1.getEtatDepart());\n                            ap.setEtatsArrivee(ap2.getEtatsArrivee());\n                            pileA.push(ap);\n                    }\n\n                }\n                pileM.pop();\n            }\n        }\n\n        return (Automates)pileA.pop();\n    }\n\n\n    public int get_etat(Automates automates, String nom) {\n        for(int i = 0; i < automates.getEtats().size(); ++i) {\n            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n\n    public Automates synch3(){\n\n        List<Etats> etats = this.getEtats();\n\n        /* etape1 : calcule des eps-transitivitées */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat0 = etats.get(i);\n            for (int j = 0; j < etat0.getTransitions().size(); j++){\n                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);\n                if (config0.get(1).equals(\"eps\")){\n                    int et = this.get_etat(this, config0.get(0).toString());\n\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom().equals(this.getEtats().get(et).getNom())){\n                            this.getEtatsArrivee().add(etat0);\n                        }\n                    }\n                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){\n                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);\n                        if (config1.get(1).equals(\"eps\")){\n                            etat0.getTransitions().add(config1);\n                        }\n                    }\n                }\n            }\n        }\n\n        /* etape 2 calcule des transitivités sans epsilons */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat_courant = etats.get(i);\n\n            for (int j = 0; j < etat_courant.getTransitions().size(); j++){\n                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);\n                if (config.get(1).equals(\"eps\")){\n                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom().equals(this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom())){\n                            this.getEtatsArrivee().add(etat_courant);\n                        }\n                    }\n\n                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){\n                        ArrayList trans = etat_inter.getTransitions();\n                        for (int s = 0; s < trans.size(); s++){\n                            ArrayList config1 = (ArrayList) trans.get(s);\n                            if (!config1.get(1).equals(\"eps\")){\n                                etat_courant.getTransitions().add(config1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        /* etape 3 : suppression des eps-transitions */\n        for ( int i = 0 ; i < this.getEtats().size(); i++){\n            ArrayList trs = new ArrayList();\n            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){\n                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);\n                if(!a.get(1).equals(\"eps\")){\n                    if ( ! trs.contains(a)){\n                        trs.add(a);\n                    }\n                }\n            }\n            this.getEtats().get(i).setTransitions(trs);\n        }\n\n        /* etape 4: suppression des etats non accessibles et des transitions double */\n        ArrayList<String> etats_acce = new ArrayList<String>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            String nom = this.getEtats().get(i).getNom();\n            for (int j = 0; j < this.getEtats().size(); j++){\n                ArrayList transitions = this.getEtats().get(j).getTransitions();\n                for ( int k = 0; k < transitions.size(); k++){\n                    ArrayList conf = (ArrayList) transitions.get(k);\n                    if (conf.get(0).equals(nom)){\n                        etats_acce.add(nom);\n                    }\n                }\n            }\n            String e = \"[\"+this.getEtatDepart().getNom()+\"]\";\n            if (this.getEtats().get(i).getNom().equals(e)){\n                etats_acce.add(this.getEtats().get(i).getNom());\n            }\n        }\n\n\n\n\n        /* definition des nouveaux etats */\n        ArrayList<Etats> etts = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            if (etats_acce.contains(this.getEtats().get(i).getNom())){\n                etts.add(this.getEtats().get(i));\n            }\n        }\n\n        this.setEtats(etts);\n\n        /* definition des nouveaux etats finaux */\n        ArrayList<Etats> arr = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtatsArrivee().size(); i++){\n            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){\n                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));\n                if (!arr.contains(ett)){\n                    arr.add(ett);\n                }\n            }\n        }\n        this.setEtatsArrivee(arr);\n        return this;\n    }\n\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n\n    public String listToString(List l){\n        String s =\"\";\n        for (int i =0 ; i<l.size();i++){\n            if (i == 0 && i == l.size()-1){\n                s = \"[\" + l.get(i) + \"]\";}\n            else {\n                if (i == 0){\n                    s = \"[\" + l.get(i) + \",\";\n                }\n                else {if(i == l.size()-1){\n                    s = s + l.get(i) + \"]\";\n                }\n                else {\n                    s = s + l.get(i) +\",\";\n                }\n                }}\n\n        }\n        return s;\n    }\n\n\n    public Automates determiniser(){\n        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n        List<Etats> etatsList = new ArrayList<Etats>();\n\n        while (file_etat_cree.size()!=0){\n            List<String> etats_preced = file_etat_cree.poll();\n//            System.out.println(etats_preced);\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            etat.setTransitions(new ArrayList());\n            // concatener les etats groupés : à définir\n//            etat.setNom(etats_preced.toString());\n            etat.setNom(listToString(etats_preced));\n            // contient les colonnes du tableau\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                // on pourrait declarer l ici\n                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash\n                // on pourrait meme remplacer la boucle suivante\n                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates\n                for (int j=0;j<this.alphabet.size();j++) {\n                    Etats e = this.getEtats().get(get_etat(this, etats_preced.get(i)));\n//                    System.out.println(e.getNom());\n                    for (int k = 0; k < e.getTransitions().size(); k++) {\n                        //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction\n                        // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur\n                        ArrayList al = (ArrayList) e.getTransitions().get(k);\n                        if (al.get(1).equals(this.alphabet.get(j))) {\n                            if (hash.containsKey(this.alphabet.get(j))) {\n                                if (!hash.get(this.alphabet.get(j)).contains(((ArrayList<?>) e.getTransitions().get(k)).get(0))){\n                                    // l'idée est là\n                                    List l = (List) hash.get(this.alphabet.get(j));\n                                    // pourquoi etats_preced alors qu'en bas on met un get(i)???\n                                    l.add(((ArrayList<?>) e.getTransitions().get(k)).get(0));\n                                    hash.put(this.alphabet.get(j), l);}\n                            } else {\n                                //ici ce sera le nom de l'etat i qui nous sera utile\n                                List l = new ArrayList();\n                                l.add(((ArrayList<?>) e.getTransitions().get(k)).get(0));\n                                hash.put(this.alphabet.get(j), l);\n                            }\n                        }\n                    }\n                }\n            }\n//            System.out.println(hash);\n            // à revoir\n            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n\n\n                List l = hash.get(key);\n                Collections.sort(l);\n\n\n                ArrayList config = new ArrayList();\n                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR\n//                config.add(0,hash.get(key).toString());\n                config.add(0,listToString(l));\n//                config.add(1,hash.get(key));\n                config.add(1,key);\n//                System.out.println(config.get(0).getClass());\n                hashToList.add(config);\n                etat.setTransitions(hashToList);\n//                System.out.println(etat.getNom()+\" \"+etat.getTransitions() +file_etat_cree.size());\n//                if (!etatsList.contains(etat)) {\n                boolean trouve = false;\n                int s=0;\n                while(!trouve && s < etatsList.size()){\n                    if (etatsList.get(s).getNom().equals(etat.getNom())){\n                        trouve = true;\n                    }\n                    s++;\n                }\n                if(!trouve || s>=etatsList.size()) {\n                    etatsList.add(etat);\n//                if(!etat.getTransitions().contains(config)) {\n//                    file_etat_cree.add(hash.get(key));\n//                    System.out.println(\"hash = \" + hash.get(key));\n//                    List l = hash.get(key);\n//                    Collections.sort(l);\n//                    System.out.println(\"l = \"+l);\n                    file_etat_cree.add(l);\n//                }\n//                }\n                }\n            }\n        }\n//        System.out.println(etatsList);\n//        for(Etats e : etatsList){\n//            String s = e.getNom().substring(1,e.getNom().length()-1);\n//            List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));\n//            Collections.sort(myList);\n////            System.out.println(myList);\n//            e.setNom(myList.toString());\n//        }\n        List<String> q = new ArrayList<String>();\n//        for(Etats e : etatsList){\n//            if(!q.contains(e.getNom()))\n//            q.add(e.getNom());\n//            else\n//                etatsList.remove(e);\n//        }\n\n        List<Etats> new_fin = new ArrayList<Etats>();\n        Iterator<Etats> it = etatsList.iterator();\n        while( it.hasNext() ) {\n\n            Etats c = it.next();\n\n            String s = c.getNom().substring(1,c.getNom().length()-1);\n            List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));\n\n            // l'idée serait d'ordonner c ici\n            Collections.sort(myList);\n//            System.out.println(myList);\n            c.setNom(listToString(myList));\n//            System.out.println(\"c= \"+c.getNom());\n//            for (int b =0;b<c.getTransitions().size();b++){\n//                List tr = (List)c.getTransitions().get(b);\n//                List<String> ml = new ArrayList<String>(Arrays.asList(((String)tr.get(0)).split(\",\")));\n//                Collections.sort(ml);\n////                ((List) c.getTransitions().get(b)).get(0) = listToString(ml);\n//                List l = new ArrayList();\n//                l.add(listToString(ml));\n//                l.add(((List<?>) c.getTransitions().get(b)).get(1));\n//                ((List) c.getTransitions().get(b)).set(b,l);\n//\n//            }\n//            System.out.println(\"s=\"+s);\n            if( q.contains(c.getNom()) ) { // une condition qui indique que l'on doit retirer l'élément\n                it.remove();\n            }\n            else {\n                q.add(c.getNom());\n            }\n\n        }\n        System.out.println(\"q=\"+q);\n\n        it = etatsList.iterator();\n        while( it.hasNext() ) {\n\n            Etats c = it.next();\n            String s = c.getNom().substring(1,c.getNom().length()-1);\n            List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));\n            loop:\n            for (String p : myList) {\n                int i = get_etat(this, p.trim());\n//                System.out.println(i);\n                for (int o = 0; o < this.etatsArrivee.size(); o++) {\n                    if (etatsArrivee.get(o).getNom().equals(p.trim())) {\n                        new_fin.add(c);\n                        break loop;\n                    }\n                }\n            }\n        }\n        System.out.println(\"etatlist \" + etatsList);\n\n\n        this.etatsArrivee = new_fin;\n\n//        Set<Etats> mySet = new HashSet<Etats>(etatsList);\n//        System.out.println(etatsList);\n//        for (int j =0;j<etatsArrivee.size();j++){\n//        System.out.println(etatsArrivee.get(j).getNom()+\" 1\");}\n        this.setEtats(new ArrayList<Etats>(etatsList));\n//        System.out.println(etatDepart.getNom()+\" 3\");\n//        this.setEtats(new ArrayList<Etats>(mySet));\n        return this;\n    }\n\n\n    public int get_etat_by_transition(Etats etat, String nom) {\n        for(int i = 0; i < etat.getTransitions().size(); ++i) {\n            ArrayList l = (ArrayList)(etat.getTransitions().get(i));\n            if (l.get(1).equals(nom)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n\n    public void afficher_etats(Automates aut){\n        for (int i=0;i<aut.getEtats().size();i++){\n            System.out.println(\"Etat \"+i+\" : \"+aut.getEtats().get(i).getNom()+\" \"+aut.getEtats().get(i).getTransitions());\n        }\n    }\n\n\n    public boolean accept(String s){\n//        System.out.println(etatDepart.getNom());\n        afficher_etats(this);\n        this.determiniser();\n        System.out.println(\"\\n\\n\\n\");\n        afficher_etats(this);\n//        this.determiniser();\n//        boolean continuer = true;\n        int i =0;\n        Etats ec = this.etatDepart;\n//        System.out.println(etatDepart.getNom());\n        // vaudrait mieux utiliser une hashmap\n        List<String> transit = new ArrayList<String>();\n        while(!s.equals(\"\") && ec != null){\n            char c = s.charAt(0);\n\n            System.out.println(\"juste pour le test\");\n            //on test la fct\n            int test = get_etat_by_transition(ec,String.valueOf(c));\n//            System.out.println(\"test = \"+test);\n            if (test == -1){\n                ec = null;\n            }\n            else {\n                List w = (ArrayList) ec.getTransitions().get(test);\n//                System.out.println(\"w0 = \"+w.get(0));\n//                System.out.println(\"nom = \"+this.getEtats().get(1).getNom());\n\n//                System.out.println(\"transsss \"+((List)this.getEtats().get(2).getTransitions().get(0)).get(0));\n//                System.out.println(\"nooom \"+this.getEtats().get(3).getNom());\n\n//                System.out.println(etats.get(3).getNom());\n//                System.out.println(\"get etat \"+get_etat(this,\"[\"+w.get(0)+\"]\"));\n                // ICI ERREUR\n                // PROBABLEMENT LES NOM GENERES\n                System.out.println(this.etats.get(1).getNom()+\"   [\"+w.get(0)+\"]\");\n                if (this.etats.get(0).getNom().equals(\"[\"+w.get(0)+\"]\")){\n                    System.out.println(\"réussie\");\n                }\n//                System.out.println(\"w=\"+w);\n//                System.out.println(\"saluuut \"+((List)this.getEtats().get(3).getTransitions().get(1)).get(0));\n                System.out.println(\"avant get etat\");\n//                ec = this.etats.get(get_etat(this,\"[\"+(String)w.get(0)+\"]\"));\n                // ici ce ser plutot un get key : key est le mot lu\n//                ec = this.etats.get(get_etat(this,\"[\"+(String)w.get(0)+\"]\"));\n                if(w.get(0).equals(this.etatDepart.getNom()))\n                {\n                    System.out.println(\"get etat \"+get_etat(this,\"[\"+(String)w.get(0)+\"]\")+\" \"+w.get(0));\n                    ec = this.etats.get(get_etat(this,\"[\"+(String)w.get(0)+\"]\"));}\n                else{\n                    ec = this.etats.get(get_etat(this,(String)w.get(0)));\n                    System.out.println(\"get etat \"+get_etat(this,(String)w.get(0))+\" \"+w.get(0));}\n//                }\n                s = s.substring(1);\n            }\n\n\n//                transit = ec.getTransitions();\n//                for (int l =0;l<transit.size();l++){\n//                    List<String> tr = (List)ec.getTransitions().get(l);\n//                    System.out.println(\"avant sub \"+\" tr=\"+tr.get(1)+\" c=\"+c+\" s=\"+s+ \" ec=\"+ec.getNom());\n//                    char comp = tr.get(1).charAt(0);\n////                    System.out.println(comp);\n//                    if (comp == c){\n//                        // ici ecrire une fonction qui renvoie un etat en prenant son nom\n////                        System.out.println(\"sub\");\n//                        // get_etat prend le nom de l'etat pas de la transition!!!!!\n//                        System.out.println(get_etat(this,tr.get(1)));\n//                        if (get_etat(this,tr.get(1)) != -1){\n//                            System.out.println(ec.getNom()+\" avant\");\n//                            ec = this.etats.get(get_etat(this,tr.get(1)));\n//                            System.out.println(ec.getNom()+\" apres\");}\n//                        else {\n//                            if (l == transit.size()-1){\n//                                continuer = false;\n//                            }\n//                        }\n////                        System.out.println(\"avant \"+s);\n//                        s = s.substring(1);\n////                        System.out.println(\"apres \"+s);\n//                        break;\n//                    }\n//                    else {\n//                        if (l == transit.size()-1){\n//                            continuer = false;\n//                        }\n//                    }\n//                }\n\n//                i++;\n        }\n//        System.out.println(ec.getNom()+\" \"+continuer+\" \"+s+1);\n//        for (int m=0;i<getEtatsArrivee().size();m++){\n//            System.out.println(getEtatsArrivee().get(m).getNom()+\" \"+getEtatsArrivee().get(m).getTransitions());\n//        }\n        System.out.println(s);\n//        System.out.println(ec.getNom());\n        if(s.equals(\"\") && this.etatsArrivee.contains(ec)){\n            return true;\n        }\n        else{\n            return false;\n        }\n\n    }\n\n\n    public boolean estFinale(Automates automates, String nom_E){\n        boolean nfinale = true;\n        int i = 0;\n        while (nfinale && i < this.getEtatsArrivee().size()){\n            if (this.getEtatsArrivee().get(i).getNom().equals(nom_E)){\n                nfinale = false;\n            }\n            i++;\n        }\n        return nfinale;\n    }\n\n    public Automates minimiser(){\n\n        /* pour chaque etat a l indice i on marque la partition auquel il appartient */\n        ArrayList<String> partitions = new ArrayList<String>();\n        this.getAlphabet().add(\"eps\");\n        ArrayList<String> noms = new ArrayList<String>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            noms.add(this.getEtats().get(i).getNom());\n            if (estFinale(this, this.getEtats().get(i).getNom())){\n                partitions.add(\"0\");\n            }else {\n                partitions.add(\"1\");\n            }\n        }\n        System.out.println(noms);\n        System.out.println(partitions);\n\n        ArrayList classes = new ArrayList();\n        HashMap<ArrayList, String> trs= new HashMap<ArrayList, String>();\n        Etats etatD = new Etats();\n        boolean modif = true;\n\n        while (modif){\n            ArrayList table_transitions = new ArrayList();\n            ArrayList t_class = new ArrayList();\n            HashMap<ArrayList, String> t_partition= new HashMap<ArrayList, String>();\n            int vals = 0;\n            for (int i = 0; i < this.getEtats().size(); i++){\n                ArrayList class_transition = new ArrayList();\n                ArrayList transi = new ArrayList();\n                class_transition.add(partitions.get(i));\n                for (int j = 0; j < this.getAlphabet().size(); j++){\n                    String destination = this.avec_mot(this.getAlphabet().get(j), this.getEtats().get(i).getNom());\n                    transi.add(destination);\n                    if (destination == \"-1\"){\n                        class_transition.add(\"-1\");\n                    }else {\n                        class_transition.add(partitions.get(noms.indexOf(destination)));\n                    }\n                }\n                t_class.add(class_transition);\n                table_transitions.add(transi);\n                if (!t_partition.containsKey(class_transition)){\n                    t_partition.put(class_transition,String.valueOf(vals));\n                    vals++;\n                }\n            }\n            ArrayList nv_partition = new ArrayList();\n            for (int i = 0; i < this.getEtats().size(); i++){\n                nv_partition.add(t_partition.get(t_class.get(i)));\n            }\n\n            if (partitions.containsAll(nv_partition)){\n                modif = false;\n            }else {\n                partitions = nv_partition;\n            }\n            classes = t_class;\n            trs = t_partition;\n        }\n\n        System.out.println(classes);\n        System.out.println(trs);\n\n\n        HashMap<String, ArrayList> partition_finale = new HashMap<String, ArrayList>();\n        for (int i = 0; i < partitions.size(); i++){\n            String part = partitions.get(i);\n            if (partition_finale.containsKey(part)){\n                partition_finale.get(part).add(noms.get(i));\n            }else {\n                ArrayList a = new ArrayList();\n                a.add(noms.get(i));\n                partition_finale.put(part, a);\n            }\n        }\n        System.out.println(partition_finale);\n\n        ArrayList<Etats> etats2 = new ArrayList<Etats>();\n        ArrayList<Etats> etfs = new ArrayList<Etats>();\n        for (ArrayList key : trs.keySet()){\n            Etats etat = new Etats();\n            ArrayList t = new ArrayList();\n            for (int q = 1; q < key.size(); q++){\n                String a = this.alphabet.get(q-1);\n                ArrayList<String > con = new ArrayList<String>();\n                String tD = (String) key.get(q);\n                System.out.println(tD +\" tD\");\n                System.out.println(partition_finale.get(tD) +\" part f\");\n                if(partition_finale.get(tD) != null){\n                    con.add(partition_finale.get(tD).toString());\n                    con.add(alphabet.get(q-1));\n                    t.add(con);\n                }\n\n            }\n\n            boolean nnfi = true;\n            int y = 0;\n            while (nnfi && y < partition_finale.get(trs.get(key)).size()){\n                if (estFinale(this, (String) partition_finale.get(trs.get(key)).get(y))){\n                    nnfi = false;\n                }\n                y++;\n            }\n            int s =0;\n            boolean deb = false;\n            while (s < partition_finale.get(trs.get(key)).size()){\n                if(this.getEtatDepart().getNom().equals((String) partition_finale.get(trs.get(key)).get(s))){\n                    deb = true;\n                }\n                s++;\n            }\n            etat.setNom(partition_finale.get(trs.get(key)).toString());\n            etat.setTransitions(t);\n            if (nnfi){\n                etfs.add(etat);\n            }\n            etats2.add(etat);\n            etatD = etat;\n            System.out.println(etat.getNom() + \" dep\");\n        }\n\n        Automates automate = new Automates();\n        automate.setAlphabet(this.getAlphabet());\n        automate.setEtats(etats2);\n        automate.setEtatDepart(etatD);\n        automate.setEtatsArrivee(etfs);\n\n\n        return automate;\n\n    }\n\n\n    private String avec_mot(String mot, String etat){\n        for (int i = 0; i < this.getEtats().get(this.get_etat(this, etat)).getTransitions().size(); i++){\n            ArrayList<String> config = (ArrayList<String>) this.getEtats().get(this.get_etat(this, etat)).getTransitions().get(i);\n            if (config.get(1).equals(mot)){\n                return config.get(0);\n            }\n        }\n        return \"-1\";\n    }\n\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
--- a/src/main/java/Automates.java	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ b/src/main/java/Automates.java	(date 1617569565981)
@@ -3,6 +3,7 @@
 // (powered by FernFlower decompiler)
 //
 
+import com.groupdocs.conversion.internal.a.a.Ar;
 import com.groupdocs.conversion.internal.a.a.Au;
 
 import java.util.*;
@@ -426,6 +427,7 @@
                 }
             }
         }
+        this.getEtatDepart().setNom("["+this.getEtatDepart().getNom()+"]");
         this.setEtatsArrivee(arr);
         return this;
     }
@@ -807,7 +809,8 @@
 
         ArrayList classes = new ArrayList();
         HashMap<ArrayList, String> trs= new HashMap<ArrayList, String>();
-        Etats etatD = new Etats();
+        Etats etatD = this.getEtatDepart();
+//        etatD.setNom("["+etatD.getNom()+"]");
         boolean modif = true;
 
         while (modif){
@@ -893,27 +896,32 @@
                 }
                 y++;
             }
-            int s =0;
-            boolean deb = false;
-            while (s < partition_finale.get(trs.get(key)).size()){
-                if(this.getEtatDepart().getNom().equals((String) partition_finale.get(trs.get(key)).get(s))){
-                    deb = true;
-                }
-                s++;
-            }
+
             etat.setNom(partition_finale.get(trs.get(key)).toString());
             etat.setTransitions(t);
             if (nnfi){
                 etfs.add(etat);
             }
             etats2.add(etat);
-            etatD = etat;
+
             System.out.println(etat.getNom() + " dep");
         }
 
+        for (int i = 0; i < etats2.size(); i++){
+            boolean trouve = true;
+            int j = 0;
+            while(trouve && j< this.getEtats().get(i).getTransitions().size()){
+                ArrayList<String> conf = (ArrayList<String>) this.getEtats().get(i).getTransitions().get(j);
+                if (conf.get(2).equals(etats2.get(i).getNom())){
+                    trouve = false
+                }
+            }
+        }
+
         Automates automate = new Automates();
         automate.setAlphabet(this.getAlphabet());
         automate.setEtats(etats2);
+        System.out.println(etatD.getNom());
         automate.setEtatDepart(etatD);
         automate.setEtatsArrivee(etfs);
 
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]" date="1614171204798" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 24/02/2021 13:53 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,301 +0,0 @@
-Index: src/main/java/JsonDeal.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry : transitions.entrySet()) {\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0) {\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++) {\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path) {\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++) {\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++) {\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++) {\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry : hashMap.entrySet()) {\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++) {\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates) {\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++) {\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++) {\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++) {\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n        return object;\n    }\n\n\n    public static void main(String[] args) {\n        Images images = new Images();\n        images.jsonToDot(\"test.json\", \"/home/rayani00/IdeaProjects/Automates/test.dot\");\n        JsonDeal jsonDeal = new JsonDeal();\n        Automates a = jsonDeal.json_to_automate(\"test.json\");\n        images.latexCreate();\n\n        for (int i = 0; i < a.getEtats().size(); i++) {\n            Etats e = a.getEtats().get(i);\n            System.out.println(\"source=\" + e.getNom());\n            ArrayList ar = e.getTransitions();\n            for (int j = 0; j < ar.size(); j++) {\n                ArrayList tr = (ArrayList) ar.get(j);\n                System.out.println(\"dest = \" + tr.get(0));\n                System.out.println(\"mot = \" + tr.get(1));\n            }\n            System.out.println(\"\\n\");\n        }\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
---- a/src/main/java/JsonDeal.java	(revision 9e856479102887e808f6beba64fdf661322dd1ad)
-+++ b/src/main/java/JsonDeal.java	(date 1616678736425)
-@@ -236,6 +236,14 @@
-         return object;
-     }
- 
-+        String[] a = {"a","b"};
-+        String at = "((a.b)*+(b.a)*)";
-+
-+        Automates au = new Automates();
-+        au = au.thompson(at, a);
-+        au.synch3();
-+        System.out.println(jsonDeal.automate_to_json(au));
-+
- 
-     public static void main(String[] args) {
-         Images images = new Images();
-Index: test.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\n  \"Alphabet\" : [\"a\", \"b\", \"c\", \"d\"],\n  \"Etats\" : [0,1,2,3,4],\n  \"Init\" : 0,\n  \"Fin\" : [2,1],\n  \"Transitions\" : [\n     [0, [[0,\"a\"], [1,\"b\"], [1, \"d\"]]],\n     [1, [[1,\"c\"], [3, \"a\"],[3, \"b\"]]],\n     [2, [[2, \"a\"],[3, \"a\"]]]\n  ]\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/test.json b/test.json
---- a/test.json	(revision 9e856479102887e808f6beba64fdf661322dd1ad)
-+++ b/test.json	(date 1616678747473)
-@@ -1,11 +1,1 @@
--{
--  "Alphabet" : ["a", "b", "c", "d"],
--  "Etats" : [0,1,2,3,4],
--  "Init" : 0,
--  "Fin" : [2,1],
--  "Transitions" : [
--     [0, [[0,"a"], [1,"b"], [1, "d"]]],
--     [1, [[1,"c"], [3, "a"],[3, "b"]]],
--     [2, [[2, "a"],[3, "a"]]]
--  ]
--}
-\ No newline at end of file
-+{"Alphabet":["a", "b"],"Init":"12","Fin":["3","9","12"],"Etats":["1","3","7","9","12"],"Transitions":[["1",[["3","b"]]],["3",[["1","a"]]],["7",[["9","a"]]],["9",[["7","b"]]],["12",[["1","a"],["7","b"]]]]}
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"update\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Latex.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_23_02_2021_21_43_[Default_Changelist]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_23_02_2021_21_43__Default_Changelist_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_57_[Default_Changelist]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_57__Default_Changelist_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_57_[Default_Changelist]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_57__Default_Changelist_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_58_[Default_Changelist]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_58__Default_Changelist_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_02_2021_01_13_[Default_Changelist]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_02_2021_01_13__Default_Changelist_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]3/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]4/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_3.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_4.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Images.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Images.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.dot\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.dot\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.maven.repository.indices\" />\n  </component>\n  <component name=\"RunManager\" selected=\"LaTeX.latex\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianTestNG\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\n      <properties />\n      <listeners />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"latex\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\n      <texify>\n        <compiler>PDFLATEX</compiler>\n        <compiler-path />\n        <sumatra-path />\n        <pdf-viewer>EVINCE</pdf-viewer>\n        <viewer-command />\n        <compiler-arguments />\n        <envs />\n        <main-file />\n        <output-path>$PROJECT_DIR$/out</output-path>\n        <auxil-path>{projectDir}/auxil</auxil-path>\n        <compile-twice>false</compile-twice>\n        <output-format>PDF</output-format>\n        <latex-distribution>TEXLIVE</latex-distribution>\n        <has-been-run>true</has-been-run>\n        <bib-run-config>[]</bib-run-config>\n        <makeindex-run-config>[]</makeindex-run-config>\n      </texify>\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"LaTeX.latex\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.Images\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614454141310\" duration=\"672000\" />\n      <workItem from=\"1614455104850\" duration=\"296000\" />\n      <workItem from=\"1615901549137\" duration=\"9291000\" />\n      <workItem from=\"1616571516622\" duration=\"4053000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"fonction jsonToDot fonctionelle\">\n      <created>1614175404668</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614175404668</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"images\">\n      <created>1614204046565</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614204046566</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"6\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/imadhou\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"fonction jsonToDot fonctionelle\" />\n    <MESSAGE value=\"images\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"images\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 9e856479102887e808f6beba64fdf661322dd1ad)
-+++ b/.idea/workspace.xml	(date 1616678793509)
-@@ -4,28 +4,11 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="update">
--      <change afterPath="$PROJECT_DIR$/src/main/java/Latex.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_23_02_2021_21_43_[Default_Changelist]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_23_02_2021_21_43__Default_Changelist_.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_57_[Default_Changelist]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_57__Default_Changelist_.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_57_[Default_Changelist]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_57__Default_Changelist_.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_58_[Default_Changelist]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_24_02_2021_13_58__Default_Changelist_.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_02_2021_01_13_[Default_Changelist]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_02_2021_01_13__Default_Changelist_.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]3/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]4/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_3.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_4.xml" beforeDir="false" />
-+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/target/classes/Images.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Images.class" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/test.dot" beforeDir="false" afterPath="$PROJECT_DIR$/test.dot" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/test.json" beforeDir="false" afterPath="$PROJECT_DIR$/test.json" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -42,10 +25,19 @@
-   <component name="Git.Settings">
-     <option name="RECENT_BRANCH_BY_REPOSITORY">
-       <map>
--        <entry key="$PROJECT_DIR$" value="main" />
-+        <entry key="$PROJECT_DIR$" value="imadhou00" />
-       </map>
-     </option>
-     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-+    <option name="RESET_MODE" value="MIXED" />
-+  </component>
-+  <component name="GitSEFilterConfiguration">
-+    <file-type-list>
-+      <filtered-out-file-type name="LOCAL_BRANCH" />
-+      <filtered-out-file-type name="REMOTE_BRANCH" />
-+      <filtered-out-file-type name="TAG" />
-+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
-+    </file-type-list>
-   </component>
-   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
-   <component name="ProjectLevelVcsManager">
-@@ -58,7 +50,6 @@
-   <component name="PropertiesComponent">
-     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-     <property name="WebServerToolWindowFactoryState" value="false" />
-     <property name="aspect.path.notification.shown" value="true" />
-     <property name="node.js.detected.package.eslint" value="true" />
-@@ -68,9 +59,8 @@
-     <property name="node.js.selected.package.eslint" value="(autodetect)" />
-     <property name="node.js.selected.package.tslint" value="(autodetect)" />
-     <property name="nodejs_package_manager_path" value="npm" />
--    <property name="settings.editor.selected.configurable" value="reference.settings.project.maven.repository.indices" />
-   </component>
--  <component name="RunManager" selected="LaTeX.latex">
-+  <component name="RunManager" selected="Application.JsonDeal">
-     <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-       <option name="MAIN_CLASS_NAME" value="Images" />
-       <module name="Automates" />
-@@ -85,47 +75,27 @@
-         <option name="Make" enabled="true" />
-       </method>
-     </configuration>
--    <configuration default="true" type="ArquillianTestNG" factoryName="" nameIsGenerated="true">
--      <option name="arquillianRunConfiguration">
--        <value>
--          <option name="containerStateName" value="" />
--        </value>
--      </option>
--      <option name="TEST_OBJECT" value="CLASS" />
--      <properties />
--      <listeners />
-+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
-+      <module name="Automates" />
-       <method v="2">
-         <option name="Make" enabled="true" />
-       </method>
-     </configuration>
--    <configuration name="latex" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
--      <texify>
--        <compiler>PDFLATEX</compiler>
--        <compiler-path />
--        <sumatra-path />
--        <pdf-viewer>EVINCE</pdf-viewer>
--        <viewer-command />
--        <compiler-arguments />
--        <envs />
--        <main-file />
--        <output-path>$PROJECT_DIR$/out</output-path>
--        <auxil-path>{projectDir}/auxil</auxil-path>
--        <compile-twice>false</compile-twice>
--        <output-format>PDF</output-format>
--        <latex-distribution>TEXLIVE</latex-distribution>
--        <has-been-run>true</has-been-run>
--        <bib-run-config>[]</bib-run-config>
--        <makeindex-run-config>[]</makeindex-run-config>
--      </texify>
--      <method v="2" />
-+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-     </configuration>
-     <recent_temporary>
-       <list>
--        <item itemvalue="LaTeX.latex" />
-         <item itemvalue="Application.JsonDeal" />
-+        <item itemvalue="Application.TraitementTransitions" />
-+        <item itemvalue="Application.JsonTpGv" />
-         <item itemvalue="Application.Images" />
-         <item itemvalue="Application.JsonDeal" />
--        <item itemvalue="Application.Images" />
-       </list>
-     </recent_temporary>
-   </component>
-@@ -140,10 +110,15 @@
-       <workItem from="1613827744292" duration="363000" />
-       <workItem from="1613828133950" duration="1228000" />
-       <workItem from="1614112267934" duration="567000" />
--      <workItem from="1614454141310" duration="672000" />
--      <workItem from="1614455104850" duration="296000" />
--      <workItem from="1615901549137" duration="9291000" />
--      <workItem from="1616571516622" duration="4053000" />
-+      <workItem from="1614337229980" duration="26000" />
-+      <workItem from="1614340764665" duration="8758000" />
-+      <workItem from="1614724089267" duration="43000" />
-+      <workItem from="1614948823465" duration="12413000" />
-+      <workItem from="1615029847548" duration="3790000" />
-+      <workItem from="1615067606138" duration="15975000" />
-+      <workItem from="1615680586016" duration="5811000" />
-+      <workItem from="1615850445118" duration="5099000" />
-+      <workItem from="1616677924969" duration="701000" />
-     </task>
-     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
-       <created>1613828472218</created>
-@@ -166,19 +141,19 @@
-       <option name="project" value="LOCAL" />
-       <updated>1614052212166</updated>
-     </task>
--    <task id="LOCAL-00004" summary="fonction jsonToDot fonctionelle">
--      <created>1614175404668</created>
-+    <task id="LOCAL-00004" summary="0.1">
-+      <created>1614171320903</created>
-       <option name="number" value="00004" />
-       <option name="presentableId" value="LOCAL-00004" />
-       <option name="project" value="LOCAL" />
--      <updated>1614175404668</updated>
-+      <updated>1614171320903</updated>
-     </task>
--    <task id="LOCAL-00005" summary="images">
--      <created>1614204046565</created>
-+    <task id="LOCAL-00005" summary="Ajout de l'algorithme de synchronisation">
-+      <created>1615849727905</created>
-       <option name="number" value="00005" />
-       <option name="presentableId" value="LOCAL-00005" />
-       <option name="project" value="LOCAL" />
--      <updated>1614204046566</updated>
-+      <updated>1615849727905</updated>
-     </task>
-     <option name="localTasksCounter" value="6" />
-     <servers />
-@@ -197,7 +172,7 @@
-                   <entry key="branch">
-                     <value>
-                       <list>
--                        <option value="origin/imadhou" />
-+                        <option value="imadhou00" />
-                       </list>
-                     </value>
-                   </entry>
-@@ -208,14 +183,52 @@
-         </entry>
-       </map>
-     </option>
-+    <option name="RECENT_FILTERS">
-+      <map>
-+        <entry key="Branch">
-+          <value>
-+            <list>
-+              <RecentGroup>
-+                <option name="FILTER_VALUES">
-+                  <option value="HEAD" />
-+                </option>
-+              </RecentGroup>
-+            </list>
-+          </value>
-+        </entry>
-+      </map>
-+    </option>
-     <option name="oldMeFiltersMigrated" value="true" />
-   </component>
-   <component name="VcsManagerConfiguration">
-     <MESSAGE value="Ghilas commited les classes eni" />
-     <MESSAGE value="Tout est bien" />
-     <MESSAGE value="Final push a propos de JSONDEAL" />
--    <MESSAGE value="fonction jsonToDot fonctionelle" />
--    <MESSAGE value="images" />
--    <option name="LAST_COMMIT_MESSAGE" value="images" />
-+    <MESSAGE value="0.1" />
-+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
-+  </component>
-+  <component name="XDebuggerManager">
-+    <breakpoint-manager>
-+      <breakpoints>
-+        <breakpoint enabled="true" type="java-exception">
-+          <properties class="java.util.EmptyStackException" package="java.util" />
-+          <option name="timeStamp" value="11" />
-+        </breakpoint>
-+        <line-breakpoint enabled="true" type="java-line">
-+          <url>file://$PROJECT_DIR$/src/main/java/JsonDeal.java</url>
-+          <line>258</line>
-+          <option name="timeStamp" value="12" />
-+        </line-breakpoint>
-+      </breakpoints>
-+      <default-breakpoints>
-+        <breakpoint enabled="true" type="java-exception" />
-+      </default-breakpoints>
-+    </breakpoint-manager>
-+    <watches-manager>
-+      <configuration name="Application">
-+        <watch expression="a" language="JAVA" />
-+      </configuration>
-+    </watches-manager>
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,254 +0,0 @@
-Index: src/main/java/JsonDeal.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n     int i =0;\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n        JsonDeal jsonDeal= new JsonDeal();\n\n\n        Automates a = jsonDeal.json_to_automate(\"test.json\");\n\n\n        String s = \"((a+(b.b))*.(b+(a.a))*)\";\n        String[] ss = {\"a\", \"b\", \"c\"};\n\n        Automates bb = a.thompson(s,ss);\n\n        System.out.println(jsonDeal.automate_to_json(bb));\n        Images i = new Images();\n        i.jsonToDot(\"test.json\", \"hh2.dot\");\n        bb.synch3();\n\n\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
---- a/src/main/java/JsonDeal.java	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
-+++ b/src/main/java/JsonDeal.java	(date 1615382724736)
-@@ -249,10 +249,11 @@
-         Automates a = jsonDeal.json_to_automate("test.json");
- 
- 
-+        String s1 = "(a+bb)*(b+aa)*";
-         String s = "((a+(b.b))*.(b+(a.a))*)";
-         String[] ss = {"a", "b", "c"};
- 
--        Automates bb = a.thompson(s,ss);
-+        Automates bb = a.thompson(s1,ss);
- 
-         System.out.println(jsonDeal.automate_to_json(bb));
-         Images i = new Images();
-Index: src/main/java/Automates.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Automates {\n    Stack<String> automates = new Stack();\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee;\n    private List<Etats> etats;\n    private List<String> alphabet;\n\n    public Automates() {\n    }\n\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return this.etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return this.etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return this.etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return this.alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    public void toMatrice() {\n    }\n\n    public void determiniser() {\n    }\n\n\n\n    boolean presentIn(char mot, String[] alphabet) {\n        boolean not_preset = true;\n\n        for(int i = 0; i < alphabet.length; ++i) {\n            if (alphabet[i].equals(String.valueOf(mot))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public Automates thompson(String expression, String[] alpha) {\n        Stack<Automates> pileA = new Stack();\n        Stack<Character> pileM = new Stack();\n        int etati = 0;\n\n\n        for(int i = 0; i < expression.length(); ++i) {\n            Automates ap;\n            ArrayList apEtats;\n\n            /* cas ou c est un charactere de l alphabet */\n            if (!this.presentIn(expression.charAt(i), alpha)) {\n                ap = new Automates();\n                Etats etd = new Etats();\n                etd.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etf = new Etats();\n                etf.setNom(String.valueOf(etati));\n                ++etati;\n                ArrayList<String> config = new ArrayList();\n                config.add(etf.getNom());\n                config.add(String.valueOf(expression.charAt(i)));\n                ArrayList trs = new ArrayList();\n                ArrayList trs1 = new ArrayList();\n                etf.setTransitions(trs);\n                trs1.add(config);\n                etd.setTransitions(trs1);\n                List<Etats> etfs = new ArrayList();\n                etfs.add(etf);\n                List<String> al = this.alphabet;\n                apEtats = new ArrayList();\n                apEtats.add(etd);\n                apEtats.add(etf);\n                ap.setAlphabet(al);\n                ap.setEtats(apEtats);\n                ap.setEtatsArrivee(etfs);\n                ap.setEtatDepart(etd);\n                pileA.push(ap);\n            }\n\n            if (expression.charAt(i) == '(') {\n                System.out.println(\"(\");\n            }\n\n            if (expression.charAt(i) == '.') {\n                pileM.push('.');\n                System.out.println(\".\");\n            }\n\n            if (expression.charAt(i) == '+') {\n                pileM.push('+');\n                System.out.println(\"+\");\n            }\n\n            ArrayList config1;\n            ArrayList config2;\n            ArrayList trF;\n            String ed1;\n            if (expression.charAt(i) == '*') {\n                System.out.println(\"*\");\n                ap = (Automates)pileA.pop();\n                Automates a = new Automates();\n                new ArrayList();\n                List<Etats> etats = ap.getEtats();\n                String ed = ap.getEtatDepart().getNom();\n                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();\n                Etats etatD = new Etats();\n                etatD.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etatF = new Etats();\n                etatF.setNom(String.valueOf(etati));\n                ArrayList etfss = new ArrayList();\n                etatF.setTransitions(etfss);\n                ++etati;\n                apEtats = new ArrayList();\n                apEtats.add(etatF);\n                ArrayList trD = new ArrayList();\n                config1 = new ArrayList();\n                config1.add(etatF.getNom());\n                config1.add(\"eps\");\n                trD.add(config1);\n                config2 = new ArrayList();\n                config2.add(ed);\n                config2.add(\"eps\");\n                trD.add(config2);\n                etatD.setTransitions(trD);\n\n                for(int j = 0; j < etats.size(); ++j) {\n                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(etatF.getNom());\n                        config3.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(config3);\n                        trF = new ArrayList();\n                        trF.add(ed);\n                        trF.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(trF);\n                    }\n                }\n\n                etats.add(etatD);\n                etats.add(etatF);\n                a.setEtatsArrivee(apEtats);\n                a.setEtats(etats);\n                a.setEtatDepart(etatD);\n                a.setAlphabet(ap.getAlphabet());\n                pileA.push(a);\n            }\n\n            if (expression.charAt(i) == ')') {\n                System.out.println(\")\");\n                ap = new Automates();\n                char exp = (Character)pileM.pop();\n                Automates ap2 = (Automates)pileA.pop();\n                Automates ap1 = (Automates)pileA.pop();\n                ed1 = ap1.getEtatDepart().getNom();\n                String ed2 = ap2.getEtatDepart().getNom();\n                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();\n                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();\n                ap.setAlphabet(ap2.getAlphabet());\n                apEtats = new ArrayList();\n\n                int j;\n                for(j = 0; j < ap1.getEtats().size(); ++j) {\n                    apEtats.add(ap1.getEtats().get(j));\n                }\n\n                for(j = 0; j < ap2.getEtats().size(); ++j) {\n                    apEtats.add(ap2.getEtats().get(j));\n                }\n\n                ap.setEtats(apEtats);\n                switch(exp) {\n                    case '+':\n                        Etats etatsD = new Etats();\n                        etatsD.setNom(String.valueOf(etati));\n                        ++etati;\n                        config1 = new ArrayList();\n                        config1.add(String.valueOf(ed1));\n                        config1.add(\"eps\");\n                        config2 = new ArrayList();\n                        config2.add(String.valueOf(ed2));\n                        config2.add(\"eps\");\n                        ArrayList trD = new ArrayList();\n                        trD.add(config1);\n                        trD.add(config2);\n                        etatsD.setTransitions(trD);\n                        ap.getEtats().add(etatsD);\n                        Etats etatsF = new Etats();\n                        etatsF.setNom(String.valueOf(etati));\n                        ++etati;\n                        trF = new ArrayList();\n                        etatsF.setTransitions(trF);\n                        ap.getEtats().add(etatsF);\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(String.valueOf(etatsF.getNom()));\n                        config3.add(\"eps\");\n                        ArrayList<String> config4 = new ArrayList();\n                        config4.add(String.valueOf(etatsF.getNom()));\n                        config4.add(\"eps\");\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);\n                        List<Etats> efs = new ArrayList();\n                        efs.add(etatsF);\n                        ap.setEtatDepart(etatsD);\n                        ap.setEtatsArrivee(efs);\n                        pileA.push(ap);\n                        break;\n                    case '.':\n                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());\n                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());\n                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());\n                        ap.getEtats().remove(indiceD2);\n                        ap.setEtatDepart(ap1.getEtatDepart());\n                        ap.setEtatsArrivee(ap2.getEtatsArrivee());\n                        pileA.push(ap);\n                }\n            }\n        }\n\n        return (Automates)pileA.pop();\n    }\n\n\n\n    public int get_etat(Automates automates, String nom) {\n        for(int i = 0; i < automates.getEtats().size(); ++i) {\n            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n\n\n\n    public void synch3(){\n\n        List<Etats> etats = this.getEtats();\n\n        /* etape1 : calcule des eps-transitivitées */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat0 = etats.get(i);\n            for (int j = 0; j < etat0.getTransitions().size(); j++){\n                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);\n                if (config0.get(1) == \"eps\"){\n                    int et = this.get_etat(this, config0.get(0).toString());\n\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){\n                            this.getEtatsArrivee().add(etat0);\n                        }\n                    }\n                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){\n                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);\n                        if (config1.get(1) == \"eps\"){\n                            etat0.getTransitions().add(config1);\n                        }\n                    }\n                }\n            }\n        }\n\n        /* etape 2 calcule des transitivités sans epsilons */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat_courant = etats.get(i);\n\n            for (int j = 0; j < etat_courant.getTransitions().size(); j++){\n                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);\n                if (config.get(1) == \"eps\"){\n                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){\n                            this.getEtatsArrivee().add(etat_courant);\n                        }\n                    }\n\n                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){\n                        ArrayList trans = etat_inter.getTransitions();\n                        for (int s = 0; s < trans.size(); s++){\n                            ArrayList config1 = (ArrayList) trans.get(s);\n                            if (config1.get(1) != \"eps\"){\n                                etat_courant.getTransitions().add(config1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n        /* etape 3 : suppression des eps-transitions */\n        for ( int i = 0 ; i < this.getEtats().size(); i++){\n            ArrayList trs = new ArrayList();\n            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){\n                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);\n                if(a.get(1) != \"eps\"){\n                    if ( ! trs.contains(a)){\n                        trs.add(a);\n                    }\n                }\n            }\n            this.getEtats().get(i).setTransitions(trs);\n        }\n\n        /* etape 4: suppression des etats non accessibles et des transitions double */\n        ArrayList<String> etats_acce = new ArrayList<String>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            String nom = this.getEtats().get(i).getNom();\n            for (int j = 0; j < this.getEtats().size(); j++){\n                ArrayList transitions = this.getEtats().get(j).getTransitions();\n                for ( int k = 0; k < transitions.size(); k++){\n                    ArrayList conf = (ArrayList) transitions.get(k);\n                    if (conf.get(0) == nom){\n                        etats_acce.add(nom);\n                    }\n                }\n            }\n            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){\n                etats_acce.add(this.getEtats().get(i).getNom());\n            }\n        }\n\n\n        /* definition des nouveaux etats */\n        ArrayList<Etats> etts = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            if (etats_acce.contains(this.getEtats().get(i).getNom())){\n                etts.add(this.getEtats().get(i));\n            }\n        }\n        this.setEtats(etts);\n\n        /* definition des nouveaux etats finaux */\n        ArrayList<Etats> arr = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtatsArrivee().size(); i++){\n            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){\n                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));\n                if (!arr.contains(ett)){\n                    arr.add(ett);\n                }\n            }\n        }\n        this.setEtatsArrivee(arr);\n\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
---- a/src/main/java/Automates.java	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
-+++ b/src/main/java/Automates.java	(date 1615382898442)
-@@ -384,4 +384,197 @@
-         this.setEtatsArrivee(arr);
- 
-     }
-+
-+
-+
-+
-+
-+    public Automates thompson2(String expression, String[] alpha) {
-+        Stack<Automates> pileA = new Stack();
-+        Stack<Character> pileM = new Stack();
-+        int etati = 0;
-+
-+
-+        for(int i = 0; i < expression.length(); ++i) {
-+            Automates ap;
-+            ArrayList apEtats;
-+
-+            /* cas ou c est un charactere de l alphabet */
-+            if (!this.presentIn(expression.charAt(i), alpha)) {
-+                ap = new Automates();
-+                Etats etd = new Etats();
-+                etd.setNom(String.valueOf(etati));
-+                ++etati;
-+                Etats etf = new Etats();
-+                etf.setNom(String.valueOf(etati));
-+                ++etati;
-+                ArrayList<String> config = new ArrayList();
-+                config.add(etf.getNom());
-+                config.add(String.valueOf(expression.charAt(i)));
-+                ArrayList trs = new ArrayList();
-+                ArrayList trs1 = new ArrayList();
-+                etf.setTransitions(trs);
-+                trs1.add(config);
-+                etd.setTransitions(trs1);
-+                List<Etats> etfs = new ArrayList();
-+                etfs.add(etf);
-+                List<String> al = this.alphabet;
-+                apEtats = new ArrayList();
-+                apEtats.add(etd);
-+                apEtats.add(etf);
-+                ap.setAlphabet(al);
-+                ap.setEtats(apEtats);
-+                ap.setEtatsArrivee(etfs);
-+                ap.setEtatDepart(etd);
-+                pileA.push(ap);
-+            }
-+
-+            if (expression.charAt(i) == '(') {
-+                System.out.println("(");
-+            }
-+
-+            if (expression.charAt(i) == '.') {
-+                pileM.push('.');
-+                System.out.println(".");
-+            }
-+
-+            if (expression.charAt(i) == '+') {
-+                pileM.push('+');
-+                System.out.println("+");
-+            }
-+
-+            ArrayList config1;
-+            ArrayList config2;
-+            ArrayList trF;
-+            String ed1;
-+            if (expression.charAt(i) == '*') {
-+                System.out.println("*");
-+                ap = (Automates)pileA.pop();
-+                Automates a = new Automates();
-+                new ArrayList();
-+                List<Etats> etats = ap.getEtats();
-+                String ed = ap.getEtatDepart().getNom();
-+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
-+                Etats etatD = new Etats();
-+                etatD.setNom(String.valueOf(etati));
-+                ++etati;
-+                Etats etatF = new Etats();
-+                etatF.setNom(String.valueOf(etati));
-+                ArrayList etfss = new ArrayList();
-+                etatF.setTransitions(etfss);
-+                ++etati;
-+                apEtats = new ArrayList();
-+                apEtats.add(etatF);
-+                ArrayList trD = new ArrayList();
-+                config1 = new ArrayList();
-+                config1.add(etatF.getNom());
-+                config1.add("eps");
-+                trD.add(config1);
-+                config2 = new ArrayList();
-+                config2.add(ed);
-+                config2.add("eps");
-+                trD.add(config2);
-+                etatD.setTransitions(trD);
-+
-+                for(int j = 0; j < etats.size(); ++j) {
-+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
-+                        ArrayList<String> config3 = new ArrayList();
-+                        config3.add(etatF.getNom());
-+                        config3.add("eps");
-+                        ((Etats)etats.get(j)).getTransitions().add(config3);
-+                        trF = new ArrayList();
-+                        trF.add(ed);
-+                        trF.add("eps");
-+                        ((Etats)etats.get(j)).getTransitions().add(trF);
-+                    }
-+                }
-+
-+                etats.add(etatD);
-+                etats.add(etatF);
-+                a.setEtatsArrivee(apEtats);
-+                a.setEtats(etats);
-+                a.setEtatDepart(etatD);
-+                a.setAlphabet(ap.getAlphabet());
-+                pileA.push(a);
-+            }
-+
-+            if (expression.charAt(i) == ')') {
-+                System.out.println(")");
-+                ap = new Automates();
-+                char exp = (Character)pileM.pop();
-+                Automates ap2 = (Automates)pileA.pop();
-+                Automates ap1 = (Automates)pileA.pop();
-+                ed1 = ap1.getEtatDepart().getNom();
-+                String ed2 = ap2.getEtatDepart().getNom();
-+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
-+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
-+                ap.setAlphabet(ap2.getAlphabet());
-+                apEtats = new ArrayList();
-+
-+                int j;
-+                for(j = 0; j < ap1.getEtats().size(); ++j) {
-+                    apEtats.add(ap1.getEtats().get(j));
-+                }
-+
-+                for(j = 0; j < ap2.getEtats().size(); ++j) {
-+                    apEtats.add(ap2.getEtats().get(j));
-+                }
-+
-+                ap.setEtats(apEtats);
-+                switch(exp) {
-+                    case '+':
-+                        Etats etatsD = new Etats();
-+                        etatsD.setNom(String.valueOf(etati));
-+                        ++etati;
-+                        config1 = new ArrayList();
-+                        config1.add(String.valueOf(ed1));
-+                        config1.add("eps");
-+                        config2 = new ArrayList();
-+                        config2.add(String.valueOf(ed2));
-+                        config2.add("eps");
-+                        ArrayList trD = new ArrayList();
-+                        trD.add(config1);
-+                        trD.add(config2);
-+                        etatsD.setTransitions(trD);
-+                        ap.getEtats().add(etatsD);
-+                        Etats etatsF = new Etats();
-+                        etatsF.setNom(String.valueOf(etati));
-+                        ++etati;
-+                        trF = new ArrayList();
-+                        etatsF.setTransitions(trF);
-+                        ap.getEtats().add(etatsF);
-+                        ArrayList<String> config3 = new ArrayList();
-+                        config3.add(String.valueOf(etatsF.getNom()));
-+                        config3.add("eps");
-+                        ArrayList<String> config4 = new ArrayList();
-+                        config4.add(String.valueOf(etatsF.getNom()));
-+                        config4.add("eps");
-+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
-+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
-+                        List<Etats> efs = new ArrayList();
-+                        efs.add(etatsF);
-+                        ap.setEtatDepart(etatsD);
-+                        ap.setEtatsArrivee(efs);
-+                        pileA.push(ap);
-+                        break;
-+                    case '.':
-+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
-+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
-+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
-+                        ap.getEtats().remove(indiceD2);
-+                        ap.setEtatDepart(ap1.getEtatDepart());
-+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
-+                        pileA.push(ap);
-+                }
-+            }
-+        }
-+
-+        return (Automates)pileA.pop();
-+    }
-+
-+
-+
-+
-+
-+
- }
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ajout de l'algorithme de synchronisation\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Automates.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Automates.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Images.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Images.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.json\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"imadhou00\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.JsonDeal\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614337229980\" duration=\"26000\" />\n      <workItem from=\"1614340764665\" duration=\"8758000\" />\n      <workItem from=\"1614724089267\" duration=\"43000\" />\n      <workItem from=\"1614948823465\" duration=\"12413000\" />\n      <workItem from=\"1615029847548\" duration=\"3790000\" />\n      <workItem from=\"1615067606138\" duration=\"15975000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"0.1\">\n      <created>1614171320903</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614171320903</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"imadhou00\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"HEAD\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"0.1\" />\n    <MESSAGE value=\"Ajout de l'algorithme de synchronisation\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ajout de l'algorithme de synchronisation\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.EmptyStackException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"11\" />\n        </breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
-+++ b/.idea/workspace.xml	(date 1615383892792)
-@@ -7,12 +7,9 @@
-     <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/target/classes/Images.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Images.class" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/test.json" beforeDir="false" afterPath="$PROJECT_DIR$/test.json" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]" date="1616679629176" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 25/03/2021 14:40 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]" date="1614171246883" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 24/02/2021 13:54 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,72 +0,0 @@
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"post Final\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.JsonDeal\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianTestNG\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\n      <properties />\n      <listeners />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n      <workItem from=\"1613851861512\" duration=\"2513000\" />\n      <workItem from=\"1613859205017\" duration=\"308000\" />\n      <workItem from=\"1613904639054\" duration=\"18286000\" />\n      <workItem from=\"1613927119693\" duration=\"8799000\" />\n      <workItem from=\"1613944957850\" duration=\"14866000\" />\n      <workItem from=\"1613998062337\" duration=\"553000\" />\n      <workItem from=\"1613998990488\" duration=\"10732000\" />\n      <workItem from=\"1614081376176\" duration=\"462000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added class Image to generate .gv file (not completed yet)\">\n      <created>1613917444200</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613917444200</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"A faire : generation du fichier .gv, et regler le probléme de la derniére ligne manquante\">\n      <created>1613923573308</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613923573308</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Classe Images fonctionelle &#10;generation du fichiier.gv : ok &#10;todo : &#10;- Definir les etats initials&#10;- Definir les etats finaux\">\n      <created>1613936066275</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613936066275</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Besoin de la classe Transitions pour pouvoir génere les transitions pour le fichier\">\n      <created>1613960772737</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613960772790</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"post Final\">\n      <created>1614169928519</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614169928519</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"8\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <MESSAGE value=\"Added class Image to generate .gv file (not completed yet)\" />\n    <MESSAGE value=\"A faire : generation du fichier .gv, et regler le probléme de la derniére ligne manquante\" />\n    <MESSAGE value=\"Classe Images fonctionelle &#10;generation du fichiier.gv : ok &#10;todo : &#10;- Definir les etats initials&#10;- Definir les etats finaux\" />\n    <MESSAGE value=\"Besoin de la classe Transitions pour pouvoir génere les transitions pour le fichier\" />\n    <MESSAGE value=\"post Final\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"post Final\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 3f445d410784b248cfdfc9e18bc9947bb0d017df)
-+++ b/.idea/workspace.xml	(date 1614171006865)
-@@ -4,11 +4,8 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="post Final">
-+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="auto to graph">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -25,7 +22,7 @@
-   <component name="Git.Settings">
-     <option name="RECENT_BRANCH_BY_REPOSITORY">
-       <map>
--        <entry key="$PROJECT_DIR$" value="main" />
-+        <entry key="$PROJECT_DIR$" value="imadhou" />
-       </map>
-     </option>
-     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-@@ -179,7 +176,28 @@
-       <option name="project" value="LOCAL" />
-       <updated>1614169928519</updated>
-     </task>
--    <option name="localTasksCounter" value="8" />
-+    <task id="LOCAL-00008" summary="post Final">
-+      <created>1614170596587</created>
-+      <option name="number" value="00008" />
-+      <option name="presentableId" value="LOCAL-00008" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614170596587</updated>
-+    </task>
-+    <task id="LOCAL-00009" summary="auto to graph">
-+      <created>1614170725383</created>
-+      <option name="number" value="00009" />
-+      <option name="presentableId" value="LOCAL-00009" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614170725383</updated>
-+    </task>
-+    <task id="LOCAL-00010" summary="auto to graph">
-+      <created>1614171004446</created>
-+      <option name="number" value="00010" />
-+      <option name="presentableId" value="LOCAL-00010" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614171004446</updated>
-+    </task>
-+    <option name="localTasksCounter" value="11" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -205,7 +223,8 @@
-     <MESSAGE value="Classe Images fonctionelle &#10;generation du fichiier.gv : ok &#10;todo : &#10;- Definir les etats initials&#10;- Definir les etats finaux" />
-     <MESSAGE value="Besoin de la classe Transitions pour pouvoir génere les transitions pour le fichier" />
-     <MESSAGE value="post Final" />
--    <option name="LAST_COMMIT_MESSAGE" value="post Final" />
-+    <MESSAGE value="auto to graph" />
-+    <option name="LAST_COMMIT_MESSAGE" value="auto to graph" />
-   </component>
-   <component name="XDebuggerManager">
-     <watches-manager>
Index: .idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]" date="1616678805158" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 25/03/2021 14:26 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/JsonDeal.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]" date="1615501135694" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/03/2021 23:18 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/JsonDeal.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
-    <option name="AFTER_PATH" value="target/classes/Automates.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/Automates.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]" date="1615500775137" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 11/03/2021 23:12 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/JsonDeal.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
-    <option name="AFTER_PATH" value="target/classes/Automates.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/Automates.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,1033 +0,0 @@
-Index: src/main/java/JsonDeal.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
---- a/src/main/java/JsonDeal.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
-+++ b/src/main/java/JsonDeal.java	(date 1615500832973)
-@@ -9,6 +9,7 @@
- import java.util.*;
- 
- public class JsonDeal {
-+     int i =0;
- 
- 
-     /*
-@@ -16,11 +17,6 @@
-     d'etats, le nombre de transitions, une liste d'alphabet
-      */
- 
--    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
--
--        return null;
--    }
--
-     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
-         Random random = new Random();
- 
-@@ -247,295 +243,22 @@
- 
- 
-     public static void main(String[] args) {
--//        JsonDeal jsonDeal= new JsonDeal();
--//        Automates a = jsonDeal.json_to_automate("test.json");
--//        jsonDeal.automate_to_json(a);
--
--        ArrayList transition = new ArrayList();
--
--        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
--
--        // creation q1
--        ArrayList transition1 = new ArrayList();
--        transition1.add("1");
--        transition1.add("a");
--        ArrayList transition2 = new ArrayList();
--        transition2.add("2");
--        transition2.add("a");
--        Etats q1 = new Etats();
--        q1.setNom("1");
--        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
--        q1_transitions = new ArrayList<ArrayList<String>>();
--        q1_transitions.add(transition1);
--        q1_transitions.add(transition2);
--        q1.setTransitions(q1_transitions);
-+        JsonDeal jsonDeal= new JsonDeal();
- 
--        // creation q2
--        ArrayList transition3 = new ArrayList();
--        transition3.add("3");
--        transition3.add("@");
--        Etats q2 = new Etats();
--        q2.setNom("2");
--        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
--        q2_transitions.add(transition3);
--        q2.setTransitions(q2_transitions);
- 
--        // creation q3
--        ArrayList transition4 = new ArrayList();
--        transition4.add("3");
--        transition4.add("a");
--        ArrayList transition5 = new ArrayList();
--        transition5.add("4");
--        transition5.add("a");
--        Etats q3 = new Etats();
--        q3.setNom("3");
--        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
--        q3_transitions.add(transition4);
--        q3_transitions.add(transition5);
--        q3.setTransitions(q3_transitions);
-+        Automates a = jsonDeal.json_to_automate("test.json");
- 
--        // creation q4
--        ArrayList transition6 = new ArrayList();
--        transition6.add("5");
--        transition6.add(".");
--        Etats q4 = new Etats();
--        q4.setNom("4");
--        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
--        q4_transitions.add(transition6);
--        q4.setTransitions(q4_transitions);
- 
--        // creation q5
--        ArrayList transition7 = new ArrayList();
--        transition7.add("5");
--        transition7.add("a");
--        ArrayList transition8 = new ArrayList();
--        transition8.add("6");
--        transition8.add("a");
--        Etats q5 = new Etats();
--        q5.setNom("5");
--        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
--        q5_transitions.add(transition7);
--        q5_transitions.add(transition8);
--        q5.setTransitions(q5_transitions);
-+        String s = "((a+(b.b))*.(b+(a.a))*)";
-+        String[] ss = {"a", "b", "c"};
- 
--        //q6
-+        Automates bb = a.thompson(s,ss);
- 
--        Etats q6 = new Etats();
--        q6.setNom("6");
--        q6.setTransitions(null);
-+        System.out.println(jsonDeal.automate_to_json(bb));
-+        Images i = new Images();
-+        i.jsonToDot("test.json", "hh2.dot");
-+        bb.synch3();
- 
--        ArrayList<Etats> arrivee = new ArrayList<Etats>();
--        arrivee.add(q6);
--        ArrayList<Etats> etats = new ArrayList<Etats>();
--        etats.add(q1);
--        etats.add(q2);
--        etats.add(q3);
--        etats.add(q4);
--        etats.add(q5);
--        etats.add(q6);
--        ArrayList<String> alphabet = new ArrayList<String>();
--        alphabet.add("a");
--        alphabet.add("@");
--        alphabet.add(".");
--        Automates a = new Automates(q1,arrivee,etats,alphabet);
--        a.determiniser();
--//        System.out.println(a.getAlphabet());
--////        System.out.println(a.getEtats());
--//        for(int i=0;i<a.getEtats().size();i++) {
--//            System.out.println(a.getEtats().get(i).getNom());
--//            System.out.println(a.getEtats().get(i).getTransitions());
--//        }
--//        System.out.println(a.getEtatDepart());
--//        System.out.println(a.getEtatsArrivee());
--//        System.out.println(a.getEtats().get(0).getTransitions());
--
--//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
--//        ArrayList<String> str = new ArrayList<String>();
--//        str.add("3");
--//        str.add("a");
--//        listOfLists.add(str);
--//        ArrayList<String> str2 = new ArrayList<String>();
--//        str2.add("1");
--//        str2.add("g");
--//        listOfLists.add(str2);
--//        System.out.println(listOfLists);
--
--
--        // determinaison
--//        System.out.println(a.getEtats().get());
--        // contient les transitions finales à inserer dans les grpEtats
--//        ArrayList grpTransitions = new ArrayList();
--//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
--//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
--//        // contient les etat à inserer dans l'automate final deteminisé
--//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
--//        Etats e = new Etats();
--//        e.setNom(a.getEtatDepart().getNom());
--//        grpEtats.add(e);
--//        // on parcourt les etats de a
--//        for(int i=0;i<a.getEtats().size();i++){
--//            // contient les transition de l'etat i
--//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
--//            int size = 0;
--//            if (transitions_etat == null)
--//                size = 0;
--//            else
--//                size = transitions_etat.size();
--//            // parcourt les transitions de l"etat i
--//            for(int j=0;j<size;j++){
--//                if (transitions_etat.get(j) != null) {
--//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
--//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
--//                    //System.out.println(tr.get(1));
--//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
--//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
--//                    // a partir de cette liste on creera les etats
--//                    boolean exist = false;
--//                    if(grpTransitionsTemp != null) {
--//                        // parcourt les transitions temporaires
--//                        for(int k=0;k<grpTransitionsTemp.size();k++){
--//                            String str = grpTransitionsTemp.get(k);
--//                            String alph_etat[] = str.split(":");
--////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
--//                            // ajouter un nouvel etat au groupe d'etat
--//                            if (tr.get(1).equals(alph_etat[0])){
--////                                System.out.println(alph_etat[1]);
--//                                // ici erreur :
--//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
--//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
--//                                // les deux prochaines lignes devraient etre correctes ???
--//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
--//
--//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
--//                                // le a va bel et bien vers 1,2,3,4,5,6
--//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
--//                                // determiner le depart des arcs
--//                                String temp =alph_etat[0]+":"+alph_etat[1];
--//                                grpTransitionsTemp.set(k,temp);
--////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
--//                                exist = true;
--//                            }
--//                        }
--//
--//                    }
--//                    // creation d'une transition pour un group d'etat
--//                    if (!exist){
--//                        String str = tr.get(1)+":"+tr.get(0);
--//                        grpTransitionsTemp.add(str);
--//                    }
--//                }
--//            }
--//            for(int g=0;g<grpEtats.size();g++)
--//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
--//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
--//            // ici generer grpTransitions
--//
--//            System.out.println("fin du parcours de l'etat "+(i+1));
--//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
--//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
--//            int s;
--//            if(grpTransitionsTemp!=null) {
--//                s = grpTransitionsTemp.size();
--//            }else {
--//                s = 0;
--//            }
--//                for (int x = 0; x < s; x++) {
--//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
--////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
--//                    if (grpEtats.contains(alph_etat[1])) {
--//
--//                    } else {
--//                        Etats et = new Etats();
--//                        et.setNom(alph_etat[1]);
--//                        // la partie suivante pourra etre ajoutée à une autre boucle
--//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
--////                        ArrayList<String> trns = new ArrayList<String>();
--////                        trns.add()
--////                        et.getTransitions().add();
--//                        grpEtats.add(et);
--//                    }
--//                }
--//                // ici former grpTransitions
--//            grpTransitions.add(String.valueOf(i));
--//            grpTransitions.add(grpTransitionsTemp);
--//            // ICI PPROBLEME
--//            // grpTransitionTemp est vide????
--//            System.out.println("voila "+grpTransitions);
--//            grpTransitionsTemp.clear();
--//
--//        }
--//            // parcours de grpEtat ( pour le depart )
--//            for(int j=0;j<grpEtats.size();j++){
--//                String etat[] = grpEtats.get(j).getNom().split(",");
--//                // on recupere les etats du grpEtat ( depart )
--//                for (int y=0;y<etat.length;y++){
--//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
--//                    for (int i=0;i<a.getEtats().size();i++) {
--//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
--//                            // ajouter les transitions de l'etat i de l'automate non deterministe
--//                            if(a.getEtats().get(i).getTransitions()!=null){
--//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
--//                                //grpetat pour les arrivées
--//                                for (int l = 0; l < grpEtats.size(); l++) {
--//                                    // etat1 contient les etats d'arrivée à tester
--//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
--//                                    for (int g = 0; g < etat1.length; g++) {
--//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
--//                                        if (ltr.get(0).equals(etat1[g])) {
--//                                            boolean trouve = false;
--//                                            // verfie si on a déja ajouté la transition
--//                                            if (grpEtats.get(j).getTransitions() != null) {
--//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
--//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
--//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
--//                                                        trouve = true;
--//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
--//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
--//                                                    }
--//                                                }
--//                                            }
--//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
--//                                            if (!trouve) {
--//                                                ArrayList<String> al = new ArrayList<String>();
--//                                                // cette ligne a un probleme
--//                                                al.add(grpEtats.get(l).getNom());
--//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
--//                                                if (grpEtats.get(j).getTransitions() != null) {
--//                                                    grpEtats.get(j).getTransitions().add(al);
--//                                                } else {
--//                                                    // à regler le cas ou les transitions sont vides
--////                                                grpEtats.get(j).getTransitions() = new ArrayList();
--//                                                    grpEtats.get(j).setTransitions(new ArrayList());
--//                                                    grpEtats.get(j).getTransitions().add(al);
--//
--//                                                }
--//
--//                                        }
--//                                        }
--//                                    }
--//                                }
--//                            }
--//                        }
--//                        }
--//                    }
--//                }
--//            }
--//
--//        System.out.println(grpTransitionsTemp);
--//            for (int i=0;i<grpEtats.size();i++){
--//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
--//            }
--//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
--
--//        List<List> lists = new ArrayList<List>();
--//        for (int i = 0; i < 4; i++) {
--//            List list = new ArrayList();
--//            list.add(i);
--//            list.add("a");
--//            lists.add(list);
--//            // Use the list further...
--//        }
--//        System.out.println(lists);
- 
- 
-     }
-Index: src/main/java/Automates.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                config.add(0,hash.get(key).toString());\n               config.add(1,hash.get(key));\n               hashToList.add(config);\n               etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
---- a/src/main/java/Automates.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
-+++ b/src/main/java/Automates.java	(date 1615500833025)
-@@ -1,15 +1,22 @@
--import java.util.*;
--import java.util.concurrent.ArrayBlockingQueue;
-+//
-+// Source code recreated from a .class file by IntelliJ IDEA
-+// (powered by FernFlower decompiler)
-+//
-+
-+import java.util.ArrayList;
-+import java.util.List;
-+import java.util.Stack;
- 
- public class Automates {
--
-+    Stack<String> automates = new Stack();
-     private Etats etatDepart;
--    private List<Etats> etatsArrivee,etats;
-+    private List<Etats> etatsArrivee;
-+    private List<Etats> etats;
-     private List<String> alphabet;
- 
--    public Automates(){
--
-+    public Automates() {
-     }
-+
-     public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {
-         this.etatDepart = etatDepart;
-         this.etatsArrivee = etatsArrivee;
-@@ -18,7 +25,7 @@
-     }
- 
-     public Etats getEtatDepart() {
--        return etatDepart;
-+        return this.etatDepart;
-     }
- 
-     public void setEtatDepart(Etats etatDepart) {
-@@ -26,7 +33,7 @@
-     }
- 
-     public List<Etats> getEtatsArrivee() {
--        return etatsArrivee;
-+        return this.etatsArrivee;
-     }
- 
-     public void setEtatsArrivee(List<Etats> etatsArrivee) {
-@@ -34,7 +41,7 @@
-     }
- 
-     public List<Etats> getEtats() {
--        return etats;
-+        return this.etats;
-     }
- 
-     public void setEtats(List<Etats> etats) {
-@@ -42,82 +49,339 @@
-     }
- 
-     public List<String> getAlphabet() {
--        return alphabet;
-+        return this.alphabet;
-     }
- 
-     public void setAlphabet(List<String> alphabet) {
-         this.alphabet = alphabet;
-     }
- 
--    // ALGORITHMES UTILES
--
--
--    public void toMatrice(){
--        //  TO DO
-+    public void toMatrice() {
-     }
--
--    public String concatener(List etatsG){
--        if(etats == null) return "";
--        else {
--            String str = "";
--            for(int a=0;a<etatsG.size();a++){
--                if ( a == 0 ){
--                    str = (String) etatsG.get(a);
--                }else {
--                    str = str + "," + (String) etatsG.get(a);
--                }
--            }
--            return str;
--        }
--    }
--
--    // ALGORITHMES
- 
--    public void determiniser(){
-+    public void determiniser() {
-+    }
-+
-+
-+
-+    boolean presentIn(char mot, String[] alphabet) {
-+        boolean not_preset = true;
-+
-+        for(int i = 0; i < alphabet.length; ++i) {
-+            if (alphabet[i].equals(String.valueOf(mot))) {
-+                return false;
-+            }
-+        }
-+
-+        return true;
-+    }
-+
-+    public Automates thompson(String expression, String[] alpha) {
-+        Stack<Automates> pileA = new Stack();
-+        Stack<Character> pileM = new Stack();
-+        int etati = 0;
-+
-+
-+        for(int i = 0; i < expression.length(); ++i) {
-+            Automates ap;
-+            ArrayList apEtats;
-+
-+            /* cas ou c est un charactere de l alphabet */
-+            if (!this.presentIn(expression.charAt(i), alpha)) {
-+                ap = new Automates();
-+                Etats etd = new Etats();
-+                etd.setNom(String.valueOf(etati));
-+                ++etati;
-+                Etats etf = new Etats();
-+                etf.setNom(String.valueOf(etati));
-+                ++etati;
-+                ArrayList<String> config = new ArrayList();
-+                config.add(etf.getNom());
-+                config.add(String.valueOf(expression.charAt(i)));
-+                ArrayList trs = new ArrayList();
-+                ArrayList trs1 = new ArrayList();
-+                etf.setTransitions(trs);
-+                trs1.add(config);
-+                etd.setTransitions(trs1);
-+                List<Etats> etfs = new ArrayList();
-+                etfs.add(etf);
-+                List<String> al = this.alphabet;
-+                apEtats = new ArrayList();
-+                apEtats.add(etd);
-+                apEtats.add(etf);
-+                ap.setAlphabet(al);
-+                ap.setEtats(apEtats);
-+                ap.setEtatsArrivee(etfs);
-+                ap.setEtatDepart(etd);
-+                pileA.push(ap);
-+            }
-+
-+            if (expression.charAt(i) == '(') {
-+                System.out.println("(");
-+            }
-+
-+            if (expression.charAt(i) == '.') {
-+                pileM.push('.');
-+                System.out.println(".");
-+            }
-+
-+            if (expression.charAt(i) == '+') {
-+                pileM.push('+');
-+                System.out.println("+");
-+            }
-+
-+            ArrayList config1;
-+            ArrayList config2;
-+            ArrayList trF;
-+            String ed1;
-+            if (expression.charAt(i) == '*') {
-+                System.out.println("*");
-+                ap = (Automates)pileA.pop();
-+                Automates a = new Automates();
-+                new ArrayList();
-+                List<Etats> etats = ap.getEtats();
-+                String ed = ap.getEtatDepart().getNom();
-+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
-+                Etats etatD = new Etats();
-+                etatD.setNom(String.valueOf(etati));
-+                ++etati;
-+                Etats etatF = new Etats();
-+                etatF.setNom(String.valueOf(etati));
-+                ArrayList etfss = new ArrayList();
-+                etatF.setTransitions(etfss);
-+                ++etati;
-+                apEtats = new ArrayList();
-+                apEtats.add(etatF);
-+                ArrayList trD = new ArrayList();
-+                config1 = new ArrayList();
-+                config1.add(etatF.getNom());
-+                config1.add("eps");
-+                trD.add(config1);
-+                config2 = new ArrayList();
-+                config2.add(ed);
-+                config2.add("eps");
-+                trD.add(config2);
-+                etatD.setTransitions(trD);
-+
-+                for(int j = 0; j < etats.size(); ++j) {
-+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
-+                        ArrayList<String> config3 = new ArrayList();
-+                        config3.add(etatF.getNom());
-+                        config3.add("eps");
-+                        ((Etats)etats.get(j)).getTransitions().add(config3);
-+                        trF = new ArrayList();
-+                        trF.add(ed);
-+                        trF.add("eps");
-+                        ((Etats)etats.get(j)).getTransitions().add(trF);
-+                    }
-+                }
-+
-+                etats.add(etatD);
-+                etats.add(etatF);
-+                a.setEtatsArrivee(apEtats);
-+                a.setEtats(etats);
-+                a.setEtatDepart(etatD);
-+                a.setAlphabet(ap.getAlphabet());
-+                pileA.push(a);
-+            }
-+
-+            if (expression.charAt(i) == ')') {
-+                System.out.println(")");
-+                ap = new Automates();
-+                char exp = (Character)pileM.pop();
-+                Automates ap2 = (Automates)pileA.pop();
-+                Automates ap1 = (Automates)pileA.pop();
-+                ed1 = ap1.getEtatDepart().getNom();
-+                String ed2 = ap2.getEtatDepart().getNom();
-+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
-+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
-+                ap.setAlphabet(ap2.getAlphabet());
-+                apEtats = new ArrayList();
-+
-+                int j;
-+                for(j = 0; j < ap1.getEtats().size(); ++j) {
-+                    apEtats.add(ap1.getEtats().get(j));
-+                }
-+
-+                for(j = 0; j < ap2.getEtats().size(); ++j) {
-+                    apEtats.add(ap2.getEtats().get(j));
-+                }
-+
-+                ap.setEtats(apEtats);
-+                switch(exp) {
-+                    case '+':
-+                        Etats etatsD = new Etats();
-+                        etatsD.setNom(String.valueOf(etati));
-+                        ++etati;
-+                        config1 = new ArrayList();
-+                        config1.add(String.valueOf(ed1));
-+                        config1.add("eps");
-+                        config2 = new ArrayList();
-+                        config2.add(String.valueOf(ed2));
-+                        config2.add("eps");
-+                        ArrayList trD = new ArrayList();
-+                        trD.add(config1);
-+                        trD.add(config2);
-+                        etatsD.setTransitions(trD);
-+                        ap.getEtats().add(etatsD);
-+                        Etats etatsF = new Etats();
-+                        etatsF.setNom(String.valueOf(etati));
-+                        ++etati;
-+                        trF = new ArrayList();
-+                        etatsF.setTransitions(trF);
-+                        ap.getEtats().add(etatsF);
-+                        ArrayList<String> config3 = new ArrayList();
-+                        config3.add(String.valueOf(etatsF.getNom()));
-+                        config3.add("eps");
-+                        ArrayList<String> config4 = new ArrayList();
-+                        config4.add(String.valueOf(etatsF.getNom()));
-+                        config4.add("eps");
-+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
-+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
-+                        List<Etats> efs = new ArrayList();
-+                        efs.add(etatsF);
-+                        ap.setEtatDepart(etatsD);
-+                        ap.setEtatsArrivee(efs);
-+                        pileA.push(ap);
-+                        break;
-+                    case '.':
-+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
-+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
-+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
-+                        ap.getEtats().remove(indiceD2);
-+                        ap.setEtatDepart(ap1.getEtatDepart());
-+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
-+                        pileA.push(ap);
-+                }
-+            }
-+        }
-+
-+        return (Automates)pileA.pop();
-+    }
-+
-+
-+
-+    public int get_etat(Automates automates, String nom) {
-+        for(int i = 0; i < automates.getEtats().size(); ++i) {
-+            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {
-+                return i;
-+            }
-+        }
-+
-+        return -1;
-+    }
-+
-+
-+
-+
-+    public void synch3(){
-+
-+        List<Etats> etats = this.getEtats();
-+
-+        /* etape1 : calcule des eps-transitivitées */
-+        for (int i = 0; i < etats.size(); i++){
-+            Etats etat0 = etats.get(i);
-+            for (int j = 0; j < etat0.getTransitions().size(); j++){
-+                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);
-+                if (config0.get(1) == "eps"){
-+                    int et = this.get_etat(this, config0.get(0).toString());
-+
-+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
-+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){
-+                            this.getEtatsArrivee().add(etat0);
-+                        }
-+                    }
-+                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){
-+                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);
-+                        if (config1.get(1) == "eps"){
-+                            etat0.getTransitions().add(config1);
-+                        }
-+                    }
-+                }
-+            }
-+        }
-+
-+        /* etape 2 calcule des transitivités sans epsilons */
-+        for (int i = 0; i < etats.size(); i++){
-+            Etats etat_courant = etats.get(i);
-+
-+            for (int j = 0; j < etat_courant.getTransitions().size(); j++){
-+                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);
-+                if (config.get(1) == "eps"){
-+                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));
-+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
-+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){
-+                            this.getEtatsArrivee().add(etat_courant);
-+                        }
-+                    }
-+
-+                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){
-+                        ArrayList trans = etat_inter.getTransitions();
-+                        for (int s = 0; s < trans.size(); s++){
-+                            ArrayList config1 = (ArrayList) trans.get(s);
-+                            if (config1.get(1) != "eps"){
-+                                etat_courant.getTransitions().add(config1);
-+                            }
-+                        }
-+                    }
-+                }
-+            }
-+        }
- 
--        Queue<List> file_etat_cree = new LinkedList<List>();
--        List debut = new ArrayList();
--        debut.add(this.getEtatDepart().getNom());
--        file_etat_cree.add(debut);
- 
--        while (file_etat_cree.size()!=0){
--            List etats_preced = file_etat_cree.poll();
--//            file_etat_cree.remove(etats_preced);
--//            System.out.println(file_etat_cree);
--            Etats etat = new Etats();
--            // concatener les etats groupés : à définir
--            etat.setNom(etats_preced.toString());
--            HashMap<String,List> hash = new HashMap<String,List>();
-+        /* etape 3 : suppression des eps-transitions */
-+        for ( int i = 0 ; i < this.getEtats().size(); i++){
-+            ArrayList trs = new ArrayList();
-+            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){
-+                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);
-+                if(a.get(1) != "eps"){
-+                    if ( ! trs.contains(a)){
-+                        trs.add(a);
-+                    }
-+                }
-+            }
-+            this.getEtats().get(i).setTransitions(trs);
-+        }
- 
--            for(int i =0;i<etats_preced.size();i++){
--                for (int j=0;j<this.alphabet.size();j++){
--                    //verifier cette ligne
--                    if (hash.containsKey(this.alphabet.get(j))){
--                        // l'idée est là
--                        List l = (List)hash.get(this.alphabet.get(j));
--                        l.add(etats_preced);
--                        hash.put(this.alphabet.get(j),l);
--                    } else {
--                        //ici ce sera le nom de l'etat i qui nous sera utile
--                        List l = new ArrayList();
--                        l.add(etats_preced.get(i));
--                        hash.put(this.alphabet.get(j),l);
-+        /* etape 4: suppression des etats non accessibles et des transitions double */
-+        ArrayList<String> etats_acce = new ArrayList<String>();
-+        for (int i = 0; i < this.getEtats().size(); i++){
-+            String nom = this.getEtats().get(i).getNom();
-+            for (int j = 0; j < this.getEtats().size(); j++){
-+                ArrayList transitions = this.getEtats().get(j).getTransitions();
-+                for ( int k = 0; k < transitions.size(); k++){
-+                    ArrayList conf = (ArrayList) transitions.get(k);
-+                    if (conf.get(0) == nom){
-+                        etats_acce.add(nom);
-                     }
-                 }
-             }
--            System.out.println(hash);
--            // à revoir
--            ArrayList hashToList = new ArrayList();
--            for(String key: hash.keySet()){
--                file_etat_cree.add(hash.get(key));
--                ArrayList config = new ArrayList();
--                config.add(0,hash.get(key).toString());
--               config.add(1,hash.get(key));
--               hashToList.add(config);
--               etat.setTransitions(hashToList);
-+            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){
-+                etats_acce.add(this.getEtats().get(i).getNom());
-             }
-         }
-+
-+
-+        /* definition des nouveaux etats */
-+        ArrayList<Etats> etts = new ArrayList<Etats>();
-+        for (int i = 0; i < this.getEtats().size(); i++){
-+            if (etats_acce.contains(this.getEtats().get(i).getNom())){
-+                etts.add(this.getEtats().get(i));
-+            }
-+        }
-+        this.setEtats(etts);
- 
--    }
-+        /* definition des nouveaux etats finaux */
-+        ArrayList<Etats> arr = new ArrayList<Etats>();
-+        for (int i = 0; i < this.getEtatsArrivee().size(); i++){
-+            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){
-+                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));
-+                if (!arr.contains(ett)){
-+                    arr.add(ett);
-+                }
-+            }
-+        }
-+        this.setEtatsArrivee(arr);
- 
-+    }
- }
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
-+++ b/.idea/workspace.xml	(date 1615501129147)
-@@ -4,13 +4,12 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
-+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -27,12 +26,25 @@
-   <component name="Git.Settings">
-     <option name="RECENT_BRANCH_BY_REPOSITORY">
-       <map>
--        <entry key="$PROJECT_DIR$" value="main" />
-+        <entry key="$PROJECT_DIR$" value="imadhou00" />
-       </map>
-     </option>
-     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-+    <option name="RESET_MODE" value="MIXED" />
-+    <option name="UPDATE_TYPE" value="REBASE" />
-+  </component>
-+  <component name="GitSEFilterConfiguration">
-+    <file-type-list>
-+      <filtered-out-file-type name="LOCAL_BRANCH" />
-+      <filtered-out-file-type name="REMOTE_BRANCH" />
-+      <filtered-out-file-type name="TAG" />
-+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
-+    </file-type-list>
-   </component>
-   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
-+  <component name="ProjectLevelVcsManager">
-+    <ConfirmationsSetting value="2" id="Add" />
-+  </component>
-   <component name="ProjectViewState">
-     <option name="hideEmptyMiddlePackages" value="true" />
-     <option name="showLibraryContents" value="true" />
-@@ -42,15 +54,22 @@
-     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-     <property name="WebServerToolWindowFactoryState" value="false" />
-     <property name="aspect.path.notification.shown" value="true" />
--    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
-     <property name="node.js.detected.package.eslint" value="true" />
-     <property name="node.js.detected.package.tslint" value="true" />
-     <property name="node.js.path.for.package.eslint" value="project" />
-     <property name="node.js.path.for.package.tslint" value="project" />
-     <property name="node.js.selected.package.eslint" value="(autodetect)" />
-     <property name="node.js.selected.package.tslint" value="(autodetect)" />
-+    <property name="nodejs_package_manager_path" value="npm" />
-   </component>
--  <component name="RunManager">
-+  <component name="RunManager" selected="Application.JsonDeal">
-+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="Images" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
-       <module name="Automates" />
-@@ -58,13 +77,16 @@
-         <option name="Make" enabled="true" />
-       </method>
-     </configuration>
--    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
--      <option name="arquillianRunConfiguration">
--        <value>
--          <option name="containerStateName" value="" />
--        </value>
--      </option>
--      <option name="TEST_OBJECT" value="class" />
-+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
-+      <module name="Automates" />
-       <method v="2">
-         <option name="Make" enabled="true" />
-       </method>
-@@ -72,6 +94,10 @@
-     <recent_temporary>
-       <list>
-         <item itemvalue="Application.JsonDeal" />
-+        <item itemvalue="Application.TraitementTransitions" />
-+        <item itemvalue="Application.JsonTpGv" />
-+        <item itemvalue="Application.Images" />
-+        <item itemvalue="Application.JsonDeal" />
-       </list>
-     </recent_temporary>
-   </component>
-@@ -84,7 +110,15 @@
-       <option name="presentableId" value="Default" />
-       <updated>1613827742264</updated>
-       <workItem from="1613827744292" duration="363000" />
--      <workItem from="1613828133950" duration="3761000" />
-+      <workItem from="1613828133950" duration="1228000" />
-+      <workItem from="1614112267934" duration="567000" />
-+      <workItem from="1614337229980" duration="26000" />
-+      <workItem from="1614340764665" duration="8758000" />
-+      <workItem from="1614724089267" duration="43000" />
-+      <workItem from="1614948823465" duration="12413000" />
-+      <workItem from="1615029847548" duration="3790000" />
-+      <workItem from="1615067606138" duration="15975000" />
-+      <workItem from="1615500735341" duration="394000" />
-     </task>
-     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
-       <created>1613828472218</created>
-@@ -93,14 +127,28 @@
-       <option name="project" value="LOCAL" />
-       <updated>1613828472218</updated>
-     </task>
--    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
--      <created>1613832695232</created>
-+    <task id="LOCAL-00002" summary="Tout est bien">
-+      <created>1614052026476</created>
-       <option name="number" value="00002" />
-       <option name="presentableId" value="LOCAL-00002" />
-       <option name="project" value="LOCAL" />
--      <updated>1613832695232</updated>
-+      <updated>1614052026476</updated>
-+    </task>
-+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
-+      <created>1614052212166</created>
-+      <option name="number" value="00003" />
-+      <option name="presentableId" value="LOCAL-00003" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614052212166</updated>
-+    </task>
-+    <task id="LOCAL-00004" summary="0.1">
-+      <created>1614171320903</created>
-+      <option name="number" value="00004" />
-+      <option name="presentableId" value="LOCAL-00004" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614171320903</updated>
-     </task>
--    <option name="localTasksCounter" value="3" />
-+    <option name="localTasksCounter" value="5" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -111,7 +159,34 @@
-       <map>
-         <entry key="MAIN">
-           <value>
--            <State />
-+            <State>
-+              <option name="FILTERS">
-+                <map>
-+                  <entry key="branch">
-+                    <value>
-+                      <list>
-+                        <option value="imadhou00" />
-+                      </list>
-+                    </value>
-+                  </entry>
-+                </map>
-+              </option>
-+            </State>
-+          </value>
-+        </entry>
-+      </map>
-+    </option>
-+    <option name="RECENT_FILTERS">
-+      <map>
-+        <entry key="Branch">
-+          <value>
-+            <list>
-+              <RecentGroup>
-+                <option name="FILTER_VALUES">
-+                  <option value="HEAD" />
-+                </option>
-+              </RecentGroup>
-+            </list>
-           </value>
-         </entry>
-       </map>
-@@ -120,7 +195,28 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <MESSAGE value="Ghilas commited les classes eni" />
--    <MESSAGE value="Ghilas commited a new version with new transitions" />
--    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
-+    <MESSAGE value="Tout est bien" />
-+    <MESSAGE value="Final push a propos de JSONDEAL" />
-+    <MESSAGE value="0.1" />
-+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
-+  </component>
-+  <component name="XDebuggerManager">
-+    <breakpoint-manager>
-+      <breakpoints>
-+        <breakpoint enabled="true" type="java-exception">
-+          <properties class="java.util.EmptyStackException" package="java.util" />
-+          <option name="timeStamp" value="11" />
-+        </breakpoint>
-+      </breakpoints>
-+      <default-breakpoints>
-+        <breakpoint enabled="true" type="java-exception" />
-+      </default-breakpoints>
-+    </breakpoint-manager>
-+    <watches-manager>
-+      <configuration name="Application">
-+        <watch expression="a" language="JAVA" />
-+      </configuration>
-+    </watches-manager>
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,2118 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml	
-+++ /dev/null	
-@@ -1,19 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1" date="1615371283486" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 11:14 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Etats.class" />
--    <option name="AFTER_PATH" value="target/classes/Etats.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Etats.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch	
-+++ /dev/null	
-@@ -1,23 +0,0 @@
--Index: test.json
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>{\"Alphabet\":[\"a\",\"b\",\"c\"],\"Init\":\"8\",\"Fin\":[\"19\"],\"Etats\":[\"0\",\"1\",\"2\",\"3\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"15\",\"16\",\"17\",\"19\"],\"Transitions\":[[\"0\",[[\"1\",\"a\"]]],[\"1\",[[\"7\",\"eps\"]]],[\"2\",[[\"3\",\"b\"]]],[\"3\",[[\"5\",\"b\"]]],[\"5\",[[\"7\",\"eps\"]]],[\"6\",[[\"0\",\"eps\"],[\"2\",\"eps\"]]],[\"7\",[[\"9\",\"eps\"],[\"6\",\"eps\"]]],[\"8\",[[\"9\",\"eps\"],[\"6\",\"eps\"]]],[\"9\",[[\"19\",\"eps\"],[\"16\",\"eps\"]]],[\"10\",[[\"11\",\"b\"]]],[\"11\",[[\"17\",\"eps\"]]],[\"12\",[[\"13\",\"a\"]]],[\"13\",[[\"15\",\"a\"]]],[\"15\",[[\"17\",\"eps\"]]],[\"16\",[[\"10\",\"eps\"],[\"12\",\"eps\"]]],[\"17\",[[\"19\",\"eps\"],[\"16\",\"eps\"]]],[\"19\",[]]]}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/test.json b/test.json
----- a/test.json	
--+++ b/test.json	
--@@ -1,1 +1,11 @@
---{"Alphabet":["a","b","c"],"Init":"8","Fin":["19"],"Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],"Transitions":[["0",[["1","a"]]],["1",[["7","eps"]]],["2",[["3","b"]]],["3",[["5","b"]]],["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
--+{
--+  "Alphabet":["a","b","c"],
--+  "Init":"8",
--+  "Fin":["19"],
--+  "Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],
--+  "Transitions":[
--+    ["0",[["1","a"]]],
--+    ["1",[["7","eps"]]],
--+    ["2",[["3","b"]]],
--+    ["3",[["5","b"]]],
--+    ["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch	
-+++ /dev/null	
-@@ -1,24 +0,0 @@
--Index: test.json
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>{\n  \"Alphabet\" : [\"a\", \"b\", \"c\", \"d\"],\n  \"Etats\" : [0,1,2,3],\n  \"Init\" : 0,\n  \"Fin\" : 2,\n  \"Transitions\" : [\n     [0, [[0,\"a\"], [1,\"b\"], [1, \"d\"]]],\n     [1, [[1,\"c\"], [3, \"a\"],[3, \"b\"]]],\n     [2, [[2, \"a\"],[3, \"a\"]]]\n  ]\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/test.json b/test.json
----- a/test.json	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/test.json	(date 1615373021473)
--@@ -1,11 +1,1 @@
---{
---  "Alphabet" : ["a", "b", "c", "d"],
---  "Etats" : [0,1,2,3],
---  "Init" : 0,
---  "Fin" : 2,
---  "Transitions" : [
---     [0, [[0,"a"], [1,"b"], [1, "d"]]],
---     [1, [[1,"c"], [3, "a"],[3, "b"]]],
---     [2, [[2, "a"],[3, "a"]]]
---  ]
---}
--\ No newline at end of file
--+{"Alphabet":["a","b","c"],"Init":"8","Fin":["19"],"Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],"Transitions":[["0",[["1","a"]]],["1",[["7","eps"]]],["2",[["3","b"]]],["3",[["5","b"]]],["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch	
-+++ /dev/null	
-@@ -1,254 +0,0 @@
--Index: src/main/java/JsonDeal.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n     int i =0;\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n        JsonDeal jsonDeal= new JsonDeal();\n\n\n        Automates a = jsonDeal.json_to_automate(\"test.json\");\n\n\n        String s = \"((a+(b.b))*.(b+(a.a))*)\";\n        String[] ss = {\"a\", \"b\", \"c\"};\n\n        Automates bb = a.thompson(s,ss);\n\n        System.out.println(jsonDeal.automate_to_json(bb));\n        Images i = new Images();\n        i.jsonToDot(\"test.json\", \"hh2.dot\");\n        bb.synch3();\n\n\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
----- a/src/main/java/JsonDeal.java	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
--+++ b/src/main/java/JsonDeal.java	(date 1615382724736)
--@@ -249,10 +249,11 @@
--         Automates a = jsonDeal.json_to_automate("test.json");
-- 
-- 
--+        String s1 = "(a+bb)*(b+aa)*";
--         String s = "((a+(b.b))*.(b+(a.a))*)";
--         String[] ss = {"a", "b", "c"};
-- 
---        Automates bb = a.thompson(s,ss);
--+        Automates bb = a.thompson(s1,ss);
-- 
--         System.out.println(jsonDeal.automate_to_json(bb));
--         Images i = new Images();
--Index: src/main/java/Automates.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Automates {\n    Stack<String> automates = new Stack();\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee;\n    private List<Etats> etats;\n    private List<String> alphabet;\n\n    public Automates() {\n    }\n\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return this.etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return this.etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return this.etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return this.alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    public void toMatrice() {\n    }\n\n    public void determiniser() {\n    }\n\n\n\n    boolean presentIn(char mot, String[] alphabet) {\n        boolean not_preset = true;\n\n        for(int i = 0; i < alphabet.length; ++i) {\n            if (alphabet[i].equals(String.valueOf(mot))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public Automates thompson(String expression, String[] alpha) {\n        Stack<Automates> pileA = new Stack();\n        Stack<Character> pileM = new Stack();\n        int etati = 0;\n\n\n        for(int i = 0; i < expression.length(); ++i) {\n            Automates ap;\n            ArrayList apEtats;\n\n            /* cas ou c est un charactere de l alphabet */\n            if (!this.presentIn(expression.charAt(i), alpha)) {\n                ap = new Automates();\n                Etats etd = new Etats();\n                etd.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etf = new Etats();\n                etf.setNom(String.valueOf(etati));\n                ++etati;\n                ArrayList<String> config = new ArrayList();\n                config.add(etf.getNom());\n                config.add(String.valueOf(expression.charAt(i)));\n                ArrayList trs = new ArrayList();\n                ArrayList trs1 = new ArrayList();\n                etf.setTransitions(trs);\n                trs1.add(config);\n                etd.setTransitions(trs1);\n                List<Etats> etfs = new ArrayList();\n                etfs.add(etf);\n                List<String> al = this.alphabet;\n                apEtats = new ArrayList();\n                apEtats.add(etd);\n                apEtats.add(etf);\n                ap.setAlphabet(al);\n                ap.setEtats(apEtats);\n                ap.setEtatsArrivee(etfs);\n                ap.setEtatDepart(etd);\n                pileA.push(ap);\n            }\n\n            if (expression.charAt(i) == '(') {\n                System.out.println(\"(\");\n            }\n\n            if (expression.charAt(i) == '.') {\n                pileM.push('.');\n                System.out.println(\".\");\n            }\n\n            if (expression.charAt(i) == '+') {\n                pileM.push('+');\n                System.out.println(\"+\");\n            }\n\n            ArrayList config1;\n            ArrayList config2;\n            ArrayList trF;\n            String ed1;\n            if (expression.charAt(i) == '*') {\n                System.out.println(\"*\");\n                ap = (Automates)pileA.pop();\n                Automates a = new Automates();\n                new ArrayList();\n                List<Etats> etats = ap.getEtats();\n                String ed = ap.getEtatDepart().getNom();\n                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();\n                Etats etatD = new Etats();\n                etatD.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etatF = new Etats();\n                etatF.setNom(String.valueOf(etati));\n                ArrayList etfss = new ArrayList();\n                etatF.setTransitions(etfss);\n                ++etati;\n                apEtats = new ArrayList();\n                apEtats.add(etatF);\n                ArrayList trD = new ArrayList();\n                config1 = new ArrayList();\n                config1.add(etatF.getNom());\n                config1.add(\"eps\");\n                trD.add(config1);\n                config2 = new ArrayList();\n                config2.add(ed);\n                config2.add(\"eps\");\n                trD.add(config2);\n                etatD.setTransitions(trD);\n\n                for(int j = 0; j < etats.size(); ++j) {\n                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(etatF.getNom());\n                        config3.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(config3);\n                        trF = new ArrayList();\n                        trF.add(ed);\n                        trF.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(trF);\n                    }\n                }\n\n                etats.add(etatD);\n                etats.add(etatF);\n                a.setEtatsArrivee(apEtats);\n                a.setEtats(etats);\n                a.setEtatDepart(etatD);\n                a.setAlphabet(ap.getAlphabet());\n                pileA.push(a);\n            }\n\n            if (expression.charAt(i) == ')') {\n                System.out.println(\")\");\n                ap = new Automates();\n                char exp = (Character)pileM.pop();\n                Automates ap2 = (Automates)pileA.pop();\n                Automates ap1 = (Automates)pileA.pop();\n                ed1 = ap1.getEtatDepart().getNom();\n                String ed2 = ap2.getEtatDepart().getNom();\n                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();\n                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();\n                ap.setAlphabet(ap2.getAlphabet());\n                apEtats = new ArrayList();\n\n                int j;\n                for(j = 0; j < ap1.getEtats().size(); ++j) {\n                    apEtats.add(ap1.getEtats().get(j));\n                }\n\n                for(j = 0; j < ap2.getEtats().size(); ++j) {\n                    apEtats.add(ap2.getEtats().get(j));\n                }\n\n                ap.setEtats(apEtats);\n                switch(exp) {\n                    case '+':\n                        Etats etatsD = new Etats();\n                        etatsD.setNom(String.valueOf(etati));\n                        ++etati;\n                        config1 = new ArrayList();\n                        config1.add(String.valueOf(ed1));\n                        config1.add(\"eps\");\n                        config2 = new ArrayList();\n                        config2.add(String.valueOf(ed2));\n                        config2.add(\"eps\");\n                        ArrayList trD = new ArrayList();\n                        trD.add(config1);\n                        trD.add(config2);\n                        etatsD.setTransitions(trD);\n                        ap.getEtats().add(etatsD);\n                        Etats etatsF = new Etats();\n                        etatsF.setNom(String.valueOf(etati));\n                        ++etati;\n                        trF = new ArrayList();\n                        etatsF.setTransitions(trF);\n                        ap.getEtats().add(etatsF);\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(String.valueOf(etatsF.getNom()));\n                        config3.add(\"eps\");\n                        ArrayList<String> config4 = new ArrayList();\n                        config4.add(String.valueOf(etatsF.getNom()));\n                        config4.add(\"eps\");\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);\n                        List<Etats> efs = new ArrayList();\n                        efs.add(etatsF);\n                        ap.setEtatDepart(etatsD);\n                        ap.setEtatsArrivee(efs);\n                        pileA.push(ap);\n                        break;\n                    case '.':\n                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());\n                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());\n                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());\n                        ap.getEtats().remove(indiceD2);\n                        ap.setEtatDepart(ap1.getEtatDepart());\n                        ap.setEtatsArrivee(ap2.getEtatsArrivee());\n                        pileA.push(ap);\n                }\n            }\n        }\n\n        return (Automates)pileA.pop();\n    }\n\n\n\n    public int get_etat(Automates automates, String nom) {\n        for(int i = 0; i < automates.getEtats().size(); ++i) {\n            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n\n\n\n    public void synch3(){\n\n        List<Etats> etats = this.getEtats();\n\n        /* etape1 : calcule des eps-transitivitées */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat0 = etats.get(i);\n            for (int j = 0; j < etat0.getTransitions().size(); j++){\n                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);\n                if (config0.get(1) == \"eps\"){\n                    int et = this.get_etat(this, config0.get(0).toString());\n\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){\n                            this.getEtatsArrivee().add(etat0);\n                        }\n                    }\n                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){\n                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);\n                        if (config1.get(1) == \"eps\"){\n                            etat0.getTransitions().add(config1);\n                        }\n                    }\n                }\n            }\n        }\n\n        /* etape 2 calcule des transitivités sans epsilons */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat_courant = etats.get(i);\n\n            for (int j = 0; j < etat_courant.getTransitions().size(); j++){\n                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);\n                if (config.get(1) == \"eps\"){\n                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){\n                            this.getEtatsArrivee().add(etat_courant);\n                        }\n                    }\n\n                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){\n                        ArrayList trans = etat_inter.getTransitions();\n                        for (int s = 0; s < trans.size(); s++){\n                            ArrayList config1 = (ArrayList) trans.get(s);\n                            if (config1.get(1) != \"eps\"){\n                                etat_courant.getTransitions().add(config1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n        /* etape 3 : suppression des eps-transitions */\n        for ( int i = 0 ; i < this.getEtats().size(); i++){\n            ArrayList trs = new ArrayList();\n            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){\n                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);\n                if(a.get(1) != \"eps\"){\n                    if ( ! trs.contains(a)){\n                        trs.add(a);\n                    }\n                }\n            }\n            this.getEtats().get(i).setTransitions(trs);\n        }\n\n        /* etape 4: suppression des etats non accessibles et des transitions double */\n        ArrayList<String> etats_acce = new ArrayList<String>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            String nom = this.getEtats().get(i).getNom();\n            for (int j = 0; j < this.getEtats().size(); j++){\n                ArrayList transitions = this.getEtats().get(j).getTransitions();\n                for ( int k = 0; k < transitions.size(); k++){\n                    ArrayList conf = (ArrayList) transitions.get(k);\n                    if (conf.get(0) == nom){\n                        etats_acce.add(nom);\n                    }\n                }\n            }\n            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){\n                etats_acce.add(this.getEtats().get(i).getNom());\n            }\n        }\n\n\n        /* definition des nouveaux etats */\n        ArrayList<Etats> etts = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            if (etats_acce.contains(this.getEtats().get(i).getNom())){\n                etts.add(this.getEtats().get(i));\n            }\n        }\n        this.setEtats(etts);\n\n        /* definition des nouveaux etats finaux */\n        ArrayList<Etats> arr = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtatsArrivee().size(); i++){\n            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){\n                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));\n                if (!arr.contains(ett)){\n                    arr.add(ett);\n                }\n            }\n        }\n        this.setEtatsArrivee(arr);\n\n    }\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
----- a/src/main/java/Automates.java	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
--+++ b/src/main/java/Automates.java	(date 1615382898442)
--@@ -384,4 +384,197 @@
--         this.setEtatsArrivee(arr);
-- 
--     }
--+
--+
--+
--+
--+
--+    public Automates thompson2(String expression, String[] alpha) {
--+        Stack<Automates> pileA = new Stack();
--+        Stack<Character> pileM = new Stack();
--+        int etati = 0;
--+
--+
--+        for(int i = 0; i < expression.length(); ++i) {
--+            Automates ap;
--+            ArrayList apEtats;
--+
--+            /* cas ou c est un charactere de l alphabet */
--+            if (!this.presentIn(expression.charAt(i), alpha)) {
--+                ap = new Automates();
--+                Etats etd = new Etats();
--+                etd.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etf = new Etats();
--+                etf.setNom(String.valueOf(etati));
--+                ++etati;
--+                ArrayList<String> config = new ArrayList();
--+                config.add(etf.getNom());
--+                config.add(String.valueOf(expression.charAt(i)));
--+                ArrayList trs = new ArrayList();
--+                ArrayList trs1 = new ArrayList();
--+                etf.setTransitions(trs);
--+                trs1.add(config);
--+                etd.setTransitions(trs1);
--+                List<Etats> etfs = new ArrayList();
--+                etfs.add(etf);
--+                List<String> al = this.alphabet;
--+                apEtats = new ArrayList();
--+                apEtats.add(etd);
--+                apEtats.add(etf);
--+                ap.setAlphabet(al);
--+                ap.setEtats(apEtats);
--+                ap.setEtatsArrivee(etfs);
--+                ap.setEtatDepart(etd);
--+                pileA.push(ap);
--+            }
--+
--+            if (expression.charAt(i) == '(') {
--+                System.out.println("(");
--+            }
--+
--+            if (expression.charAt(i) == '.') {
--+                pileM.push('.');
--+                System.out.println(".");
--+            }
--+
--+            if (expression.charAt(i) == '+') {
--+                pileM.push('+');
--+                System.out.println("+");
--+            }
--+
--+            ArrayList config1;
--+            ArrayList config2;
--+            ArrayList trF;
--+            String ed1;
--+            if (expression.charAt(i) == '*') {
--+                System.out.println("*");
--+                ap = (Automates)pileA.pop();
--+                Automates a = new Automates();
--+                new ArrayList();
--+                List<Etats> etats = ap.getEtats();
--+                String ed = ap.getEtatDepart().getNom();
--+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
--+                Etats etatD = new Etats();
--+                etatD.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etatF = new Etats();
--+                etatF.setNom(String.valueOf(etati));
--+                ArrayList etfss = new ArrayList();
--+                etatF.setTransitions(etfss);
--+                ++etati;
--+                apEtats = new ArrayList();
--+                apEtats.add(etatF);
--+                ArrayList trD = new ArrayList();
--+                config1 = new ArrayList();
--+                config1.add(etatF.getNom());
--+                config1.add("eps");
--+                trD.add(config1);
--+                config2 = new ArrayList();
--+                config2.add(ed);
--+                config2.add("eps");
--+                trD.add(config2);
--+                etatD.setTransitions(trD);
--+
--+                for(int j = 0; j < etats.size(); ++j) {
--+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(etatF.getNom());
--+                        config3.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(config3);
--+                        trF = new ArrayList();
--+                        trF.add(ed);
--+                        trF.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(trF);
--+                    }
--+                }
--+
--+                etats.add(etatD);
--+                etats.add(etatF);
--+                a.setEtatsArrivee(apEtats);
--+                a.setEtats(etats);
--+                a.setEtatDepart(etatD);
--+                a.setAlphabet(ap.getAlphabet());
--+                pileA.push(a);
--+            }
--+
--+            if (expression.charAt(i) == ')') {
--+                System.out.println(")");
--+                ap = new Automates();
--+                char exp = (Character)pileM.pop();
--+                Automates ap2 = (Automates)pileA.pop();
--+                Automates ap1 = (Automates)pileA.pop();
--+                ed1 = ap1.getEtatDepart().getNom();
--+                String ed2 = ap2.getEtatDepart().getNom();
--+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
--+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
--+                ap.setAlphabet(ap2.getAlphabet());
--+                apEtats = new ArrayList();
--+
--+                int j;
--+                for(j = 0; j < ap1.getEtats().size(); ++j) {
--+                    apEtats.add(ap1.getEtats().get(j));
--+                }
--+
--+                for(j = 0; j < ap2.getEtats().size(); ++j) {
--+                    apEtats.add(ap2.getEtats().get(j));
--+                }
--+
--+                ap.setEtats(apEtats);
--+                switch(exp) {
--+                    case '+':
--+                        Etats etatsD = new Etats();
--+                        etatsD.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        config1 = new ArrayList();
--+                        config1.add(String.valueOf(ed1));
--+                        config1.add("eps");
--+                        config2 = new ArrayList();
--+                        config2.add(String.valueOf(ed2));
--+                        config2.add("eps");
--+                        ArrayList trD = new ArrayList();
--+                        trD.add(config1);
--+                        trD.add(config2);
--+                        etatsD.setTransitions(trD);
--+                        ap.getEtats().add(etatsD);
--+                        Etats etatsF = new Etats();
--+                        etatsF.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        trF = new ArrayList();
--+                        etatsF.setTransitions(trF);
--+                        ap.getEtats().add(etatsF);
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(String.valueOf(etatsF.getNom()));
--+                        config3.add("eps");
--+                        ArrayList<String> config4 = new ArrayList();
--+                        config4.add(String.valueOf(etatsF.getNom()));
--+                        config4.add("eps");
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
--+                        List<Etats> efs = new ArrayList();
--+                        efs.add(etatsF);
--+                        ap.setEtatDepart(etatsD);
--+                        ap.setEtatsArrivee(efs);
--+                        pileA.push(ap);
--+                        break;
--+                    case '.':
--+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
--+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
--+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
--+                        ap.getEtats().remove(indiceD2);
--+                        ap.setEtatDepart(ap1.getEtatDepart());
--+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
--+                        pileA.push(ap);
--+                }
--+            }
--+        }
--+
--+        return (Automates)pileA.pop();
--+    }
--+
--+
--+
--+
--+
--+
-- }
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ajout de l'algorithme de synchronisation\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Automates.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Automates.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Images.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Images.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.json\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"imadhou00\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.JsonDeal\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614337229980\" duration=\"26000\" />\n      <workItem from=\"1614340764665\" duration=\"8758000\" />\n      <workItem from=\"1614724089267\" duration=\"43000\" />\n      <workItem from=\"1614948823465\" duration=\"12413000\" />\n      <workItem from=\"1615029847548\" duration=\"3790000\" />\n      <workItem from=\"1615067606138\" duration=\"15975000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"0.1\">\n      <created>1614171320903</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614171320903</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"imadhou00\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"HEAD\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"0.1\" />\n    <MESSAGE value=\"Ajout de l'algorithme de synchronisation\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ajout de l'algorithme de synchronisation\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.EmptyStackException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"11\" />\n        </breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
--+++ b/.idea/workspace.xml	(date 1615383892792)
--@@ -7,12 +7,9 @@
--     <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/target/classes/Images.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Images.class" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/test.json" beforeDir="false" afterPath="$PROJECT_DIR$/test.json" afterDir="false" />
--     </list>
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml	
-+++ /dev/null	
-@@ -1,14 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]" date="1615510211848" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 12/03/2021 01:50 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1" date="1615373021554" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 11:43 [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]" date="1615381716437" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 14:08 [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml	
-+++ /dev/null	
-@@ -1,14 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]" date="1615501135694" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/03/2021 23:18 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch	
-+++ /dev/null	
-@@ -1,630 +0,0 @@
--Index: src/main/java/JsonDeal.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
----- a/src/main/java/JsonDeal.java	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
--+++ b/src/main/java/JsonDeal.java	(date 1615501227224)
--@@ -9,6 +9,7 @@
-- import java.util.*;
-- 
-- public class JsonDeal {
--+     int i =0;
-- 
-- 
--     /*
--@@ -16,11 +17,6 @@
--     d'etats, le nombre de transitions, une liste d'alphabet
--      */
-- 
---    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
---
---        return null;
---    }
---
--     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
--         Random random = new Random();
-- 
--@@ -247,295 +243,22 @@
-- 
-- 
--     public static void main(String[] args) {
---//        JsonDeal jsonDeal= new JsonDeal();
---//        Automates a = jsonDeal.json_to_automate("test.json");
---//        jsonDeal.automate_to_json(a);
---
---        ArrayList transition = new ArrayList();
---
---        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
---
---        // creation q1
---        ArrayList transition1 = new ArrayList();
---        transition1.add("1");
---        transition1.add("a");
---        ArrayList transition2 = new ArrayList();
---        transition2.add("2");
---        transition2.add("a");
---        Etats q1 = new Etats();
---        q1.setNom("1");
---        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
---        q1_transitions = new ArrayList<ArrayList<String>>();
---        q1_transitions.add(transition1);
---        q1_transitions.add(transition2);
---        q1.setTransitions(q1_transitions);
--+        JsonDeal jsonDeal= new JsonDeal();
-- 
---        // creation q2
---        ArrayList transition3 = new ArrayList();
---        transition3.add("3");
---        transition3.add("@");
---        Etats q2 = new Etats();
---        q2.setNom("2");
---        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
---        q2_transitions.add(transition3);
---        q2.setTransitions(q2_transitions);
-- 
---        // creation q3
---        ArrayList transition4 = new ArrayList();
---        transition4.add("3");
---        transition4.add("a");
---        ArrayList transition5 = new ArrayList();
---        transition5.add("4");
---        transition5.add("a");
---        Etats q3 = new Etats();
---        q3.setNom("3");
---        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
---        q3_transitions.add(transition4);
---        q3_transitions.add(transition5);
---        q3.setTransitions(q3_transitions);
--+        Automates a = jsonDeal.json_to_automate("test.json");
-- 
---        // creation q4
---        ArrayList transition6 = new ArrayList();
---        transition6.add("5");
---        transition6.add(".");
---        Etats q4 = new Etats();
---        q4.setNom("4");
---        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
---        q4_transitions.add(transition6);
---        q4.setTransitions(q4_transitions);
-- 
---        // creation q5
---        ArrayList transition7 = new ArrayList();
---        transition7.add("5");
---        transition7.add("a");
---        ArrayList transition8 = new ArrayList();
---        transition8.add("6");
---        transition8.add("a");
---        Etats q5 = new Etats();
---        q5.setNom("5");
---        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
---        q5_transitions.add(transition7);
---        q5_transitions.add(transition8);
---        q5.setTransitions(q5_transitions);
--+        String s = "((a+(b.b))*.(b+(a.a))*)";
--+        String[] ss = {"a", "b", "c"};
-- 
---        //q6
--+        Automates bb = a.thompson(s,ss);
-- 
---        Etats q6 = new Etats();
---        q6.setNom("6");
---        q6.setTransitions(null);
--+        System.out.println(jsonDeal.automate_to_json(bb));
--+        Images i = new Images();
--+        i.jsonToDot("test.json", "hh2.dot");
--+        bb.synch3();
-- 
---        ArrayList<Etats> arrivee = new ArrayList<Etats>();
---        arrivee.add(q6);
---        ArrayList<Etats> etats = new ArrayList<Etats>();
---        etats.add(q1);
---        etats.add(q2);
---        etats.add(q3);
---        etats.add(q4);
---        etats.add(q5);
---        etats.add(q6);
---        ArrayList<String> alphabet = new ArrayList<String>();
---        alphabet.add("a");
---        alphabet.add("@");
---        alphabet.add(".");
---        Automates a = new Automates(q1,arrivee,etats,alphabet);
---        a.determiniser();
---//        System.out.println(a.getAlphabet());
---////        System.out.println(a.getEtats());
---//        for(int i=0;i<a.getEtats().size();i++) {
---//            System.out.println(a.getEtats().get(i).getNom());
---//            System.out.println(a.getEtats().get(i).getTransitions());
---//        }
---//        System.out.println(a.getEtatDepart());
---//        System.out.println(a.getEtatsArrivee());
---//        System.out.println(a.getEtats().get(0).getTransitions());
---
---//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
---//        ArrayList<String> str = new ArrayList<String>();
---//        str.add("3");
---//        str.add("a");
---//        listOfLists.add(str);
---//        ArrayList<String> str2 = new ArrayList<String>();
---//        str2.add("1");
---//        str2.add("g");
---//        listOfLists.add(str2);
---//        System.out.println(listOfLists);
---
---
---        // determinaison
---//        System.out.println(a.getEtats().get());
---        // contient les transitions finales à inserer dans les grpEtats
---//        ArrayList grpTransitions = new ArrayList();
---//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
---//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
---//        // contient les etat à inserer dans l'automate final deteminisé
---//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
---//        Etats e = new Etats();
---//        e.setNom(a.getEtatDepart().getNom());
---//        grpEtats.add(e);
---//        // on parcourt les etats de a
---//        for(int i=0;i<a.getEtats().size();i++){
---//            // contient les transition de l'etat i
---//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
---//            int size = 0;
---//            if (transitions_etat == null)
---//                size = 0;
---//            else
---//                size = transitions_etat.size();
---//            // parcourt les transitions de l"etat i
---//            for(int j=0;j<size;j++){
---//                if (transitions_etat.get(j) != null) {
---//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
---//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
---//                    //System.out.println(tr.get(1));
---//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
---//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
---//                    // a partir de cette liste on creera les etats
---//                    boolean exist = false;
---//                    if(grpTransitionsTemp != null) {
---//                        // parcourt les transitions temporaires
---//                        for(int k=0;k<grpTransitionsTemp.size();k++){
---//                            String str = grpTransitionsTemp.get(k);
---//                            String alph_etat[] = str.split(":");
---////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
---//                            // ajouter un nouvel etat au groupe d'etat
---//                            if (tr.get(1).equals(alph_etat[0])){
---////                                System.out.println(alph_etat[1]);
---//                                // ici erreur :
---//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
---//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
---//                                // les deux prochaines lignes devraient etre correctes ???
---//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
---//
---//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
---//                                // le a va bel et bien vers 1,2,3,4,5,6
---//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
---//                                // determiner le depart des arcs
---//                                String temp =alph_etat[0]+":"+alph_etat[1];
---//                                grpTransitionsTemp.set(k,temp);
---////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
---//                                exist = true;
---//                            }
---//                        }
---//
---//                    }
---//                    // creation d'une transition pour un group d'etat
---//                    if (!exist){
---//                        String str = tr.get(1)+":"+tr.get(0);
---//                        grpTransitionsTemp.add(str);
---//                    }
---//                }
---//            }
---//            for(int g=0;g<grpEtats.size();g++)
---//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
---//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
---//            // ici generer grpTransitions
---//
---//            System.out.println("fin du parcours de l'etat "+(i+1));
---//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
---//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
---//            int s;
---//            if(grpTransitionsTemp!=null) {
---//                s = grpTransitionsTemp.size();
---//            }else {
---//                s = 0;
---//            }
---//                for (int x = 0; x < s; x++) {
---//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
---////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
---//                    if (grpEtats.contains(alph_etat[1])) {
---//
---//                    } else {
---//                        Etats et = new Etats();
---//                        et.setNom(alph_etat[1]);
---//                        // la partie suivante pourra etre ajoutée à une autre boucle
---//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
---////                        ArrayList<String> trns = new ArrayList<String>();
---////                        trns.add()
---////                        et.getTransitions().add();
---//                        grpEtats.add(et);
---//                    }
---//                }
---//                // ici former grpTransitions
---//            grpTransitions.add(String.valueOf(i));
---//            grpTransitions.add(grpTransitionsTemp);
---//            // ICI PPROBLEME
---//            // grpTransitionTemp est vide????
---//            System.out.println("voila "+grpTransitions);
---//            grpTransitionsTemp.clear();
---//
---//        }
---//            // parcours de grpEtat ( pour le depart )
---//            for(int j=0;j<grpEtats.size();j++){
---//                String etat[] = grpEtats.get(j).getNom().split(",");
---//                // on recupere les etats du grpEtat ( depart )
---//                for (int y=0;y<etat.length;y++){
---//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
---//                    for (int i=0;i<a.getEtats().size();i++) {
---//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
---//                            // ajouter les transitions de l'etat i de l'automate non deterministe
---//                            if(a.getEtats().get(i).getTransitions()!=null){
---//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
---//                                //grpetat pour les arrivées
---//                                for (int l = 0; l < grpEtats.size(); l++) {
---//                                    // etat1 contient les etats d'arrivée à tester
---//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
---//                                    for (int g = 0; g < etat1.length; g++) {
---//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
---//                                        if (ltr.get(0).equals(etat1[g])) {
---//                                            boolean trouve = false;
---//                                            // verfie si on a déja ajouté la transition
---//                                            if (grpEtats.get(j).getTransitions() != null) {
---//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
---//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
---//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
---//                                                        trouve = true;
---//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
---//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
---//                                                    }
---//                                                }
---//                                            }
---//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
---//                                            if (!trouve) {
---//                                                ArrayList<String> al = new ArrayList<String>();
---//                                                // cette ligne a un probleme
---//                                                al.add(grpEtats.get(l).getNom());
---//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
---//                                                if (grpEtats.get(j).getTransitions() != null) {
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//                                                } else {
---//                                                    // à regler le cas ou les transitions sont vides
---////                                                grpEtats.get(j).getTransitions() = new ArrayList();
---//                                                    grpEtats.get(j).setTransitions(new ArrayList());
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//
---//                                                }
---//
---//                                        }
---//                                        }
---//                                    }
---//                                }
---//                            }
---//                        }
---//                        }
---//                    }
---//                }
---//            }
---//
---//        System.out.println(grpTransitionsTemp);
---//            for (int i=0;i<grpEtats.size();i++){
---//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
---//            }
---//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
---
---//        List<List> lists = new ArrayList<List>();
---//        for (int i = 0; i < 4; i++) {
---//            List list = new ArrayList();
---//            list.add(i);
---//            list.add("a");
---//            lists.add(list);
---//            // Use the list further...
---//        }
---//        System.out.println(lists);
-- 
-- 
--     }
--Index: src/main/java/Automates.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            // contient les colonnes du tableau\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                // on pourrait declarer l ici\n                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash\n                // on pourrait meme remplacer la boucle suivante\n                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction\n                    // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        // pourquoi etats_preced alors qu'en bas on met un get(i)???\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR\n                config.add(0,hash.get(key).toString());\n//                config.add(1,hash.get(key));\n                config.add(1,key);\n                hashToList.add(config);\n                etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
----- a/src/main/java/Automates.java	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
--+++ b/src/main/java/Automates.java	(date 1615501227280)
--@@ -74,7 +74,7 @@
--     // ALGORITHMES
-- 
--     public void determiniser(){
---        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )
--+
--         Queue<List> file_etat_cree = new LinkedList<List>();
--         List debut = new ArrayList();
--         debut.add(this.getEtatDepart().getNom());
--@@ -87,21 +87,14 @@
--             Etats etat = new Etats();
--             // concatener les etats groupés : à définir
--             etat.setNom(etats_preced.toString());
---            // contient les colonnes du tableau
--             HashMap<String,List> hash = new HashMap<String,List>();
-- 
--             for(int i =0;i<etats_preced.size();i++){
---                // on pourrait declarer l ici
---                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash
---                // on pourrait meme remplacer la boucle suivante
---                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates
--                 for (int j=0;j<this.alphabet.size();j++){
---                    //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction
---                    // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur
--+                    //verifier cette ligne
--                     if (hash.containsKey(this.alphabet.get(j))){
--                         // l'idée est là
--                         List l = (List)hash.get(this.alphabet.get(j));
---                        // pourquoi etats_preced alors qu'en bas on met un get(i)???
--                         l.add(etats_preced);
--                         hash.put(this.alphabet.get(j),l);
--                     } else {
--@@ -114,17 +107,14 @@
--             }
--             System.out.println(hash);
--             // à revoir
---            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation
--             ArrayList hashToList = new ArrayList();
--             for(String key: hash.keySet()){
--                 file_etat_cree.add(hash.get(key));
--                 ArrayList config = new ArrayList();
---                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR
--                 config.add(0,hash.get(key).toString());
---//                config.add(1,hash.get(key));
---                config.add(1,key);
---                hashToList.add(config);
---                etat.setTransitions(hashToList);
--+               config.add(1,hash.get(key));
--+               hashToList.add(config);
--+               etat.setTransitions(hashToList);
--             }
--         }
-- 
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
--+++ b/.idea/workspace.xml	(date 1615501227340)
--@@ -4,13 +4,12 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
--+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
--     </list>
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--@@ -27,12 +26,25 @@
--   <component name="Git.Settings">
--     <option name="RECENT_BRANCH_BY_REPOSITORY">
--       <map>
---        <entry key="$PROJECT_DIR$" value="main" />
--+        <entry key="$PROJECT_DIR$" value="imadhou00" />
--       </map>
--     </option>
--     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
--+    <option name="RESET_MODE" value="MIXED" />
--+    <option name="UPDATE_TYPE" value="REBASE" />
--+  </component>
--+  <component name="GitSEFilterConfiguration">
--+    <file-type-list>
--+      <filtered-out-file-type name="LOCAL_BRANCH" />
--+      <filtered-out-file-type name="REMOTE_BRANCH" />
--+      <filtered-out-file-type name="TAG" />
--+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
--+    </file-type-list>
--   </component>
--   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
--+  <component name="ProjectLevelVcsManager">
--+    <ConfirmationsSetting value="2" id="Add" />
--+  </component>
--   <component name="ProjectViewState">
--     <option name="hideEmptyMiddlePackages" value="true" />
--     <option name="showLibraryContents" value="true" />
--@@ -42,15 +54,22 @@
--     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--     <property name="WebServerToolWindowFactoryState" value="false" />
--     <property name="aspect.path.notification.shown" value="true" />
---    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
--     <property name="node.js.detected.package.eslint" value="true" />
--     <property name="node.js.detected.package.tslint" value="true" />
--     <property name="node.js.path.for.package.eslint" value="project" />
--     <property name="node.js.path.for.package.tslint" value="project" />
--     <property name="node.js.selected.package.eslint" value="(autodetect)" />
--     <property name="node.js.selected.package.tslint" value="(autodetect)" />
--+    <property name="nodejs_package_manager_path" value="npm" />
--   </component>
---  <component name="RunManager">
--+  <component name="RunManager" selected="Application.JsonDeal">
--+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="Images" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
--       <module name="Automates" />
--@@ -58,13 +77,16 @@
--         <option name="Make" enabled="true" />
--       </method>
--     </configuration>
---    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
---      <option name="arquillianRunConfiguration">
---        <value>
---          <option name="containerStateName" value="" />
---        </value>
---      </option>
---      <option name="TEST_OBJECT" value="class" />
--+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
--+      <module name="Automates" />
--       <method v="2">
--         <option name="Make" enabled="true" />
--       </method>
--@@ -72,6 +94,10 @@
--     <recent_temporary>
--       <list>
--         <item itemvalue="Application.JsonDeal" />
--+        <item itemvalue="Application.TraitementTransitions" />
--+        <item itemvalue="Application.JsonTpGv" />
--+        <item itemvalue="Application.Images" />
--+        <item itemvalue="Application.JsonDeal" />
--       </list>
--     </recent_temporary>
--   </component>
--@@ -84,7 +110,15 @@
--       <option name="presentableId" value="Default" />
--       <updated>1613827742264</updated>
--       <workItem from="1613827744292" duration="363000" />
---      <workItem from="1613828133950" duration="3761000" />
--+      <workItem from="1613828133950" duration="1228000" />
--+      <workItem from="1614112267934" duration="567000" />
--+      <workItem from="1614337229980" duration="26000" />
--+      <workItem from="1614340764665" duration="8758000" />
--+      <workItem from="1614724089267" duration="43000" />
--+      <workItem from="1614948823465" duration="12413000" />
--+      <workItem from="1615029847548" duration="3790000" />
--+      <workItem from="1615067606138" duration="15975000" />
--+      <workItem from="1615500735341" duration="394000" />
--     </task>
--     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
--       <created>1613828472218</created>
--@@ -93,14 +127,28 @@
--       <option name="project" value="LOCAL" />
--       <updated>1613828472218</updated>
--     </task>
---    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
---      <created>1613832695232</created>
--+    <task id="LOCAL-00002" summary="Tout est bien">
--+      <created>1614052026476</created>
--       <option name="number" value="00002" />
--       <option name="presentableId" value="LOCAL-00002" />
--       <option name="project" value="LOCAL" />
---      <updated>1613832695232</updated>
--+      <updated>1614052026476</updated>
--+    </task>
--+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
--+      <created>1614052212166</created>
--+      <option name="number" value="00003" />
--+      <option name="presentableId" value="LOCAL-00003" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614052212166</updated>
--+    </task>
--+    <task id="LOCAL-00004" summary="0.1">
--+      <created>1614171320903</created>
--+      <option name="number" value="00004" />
--+      <option name="presentableId" value="LOCAL-00004" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614171320903</updated>
--     </task>
---    <option name="localTasksCounter" value="3" />
--+    <option name="localTasksCounter" value="5" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -111,7 +159,34 @@
--       <map>
--         <entry key="MAIN">
--           <value>
---            <State />
--+            <State>
--+              <option name="FILTERS">
--+                <map>
--+                  <entry key="branch">
--+                    <value>
--+                      <list>
--+                        <option value="imadhou00" />
--+                      </list>
--+                    </value>
--+                  </entry>
--+                </map>
--+              </option>
--+            </State>
--+          </value>
--+        </entry>
--+      </map>
--+    </option>
--+    <option name="RECENT_FILTERS">
--+      <map>
--+        <entry key="Branch">
--+          <value>
--+            <list>
--+              <RecentGroup>
--+                <option name="FILTER_VALUES">
--+                  <option value="HEAD" />
--+                </option>
--+              </RecentGroup>
--+            </list>
--           </value>
--         </entry>
--       </map>
--@@ -120,7 +195,28 @@
--   </component>
--   <component name="VcsManagerConfiguration">
--     <MESSAGE value="Ghilas commited les classes eni" />
---    <MESSAGE value="Ghilas commited a new version with new transitions" />
---    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
--+    <MESSAGE value="Tout est bien" />
--+    <MESSAGE value="Final push a propos de JSONDEAL" />
--+    <MESSAGE value="0.1" />
--+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
--+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
--+  </component>
--+  <component name="XDebuggerManager">
--+    <breakpoint-manager>
--+      <breakpoints>
--+        <breakpoint enabled="true" type="java-exception">
--+          <properties class="java.util.EmptyStackException" package="java.util" />
--+          <option name="timeStamp" value="11" />
--+        </breakpoint>
--+      </breakpoints>
--+      <default-breakpoints>
--+        <breakpoint enabled="true" type="java-exception" />
--+      </default-breakpoints>
--+    </breakpoint-manager>
--+    <watches-manager>
--+      <configuration name="Application">
--+        <watch expression="a" language="JAVA" />
--+      </configuration>
--+    </watches-manager>
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml	
-+++ /dev/null	
-@@ -1,14 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]" date="1615500775137" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 11/03/2021 23:12 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch	
-+++ /dev/null	
-@@ -1,1033 +0,0 @@
--Index: src/main/java/JsonDeal.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
----- a/src/main/java/JsonDeal.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/src/main/java/JsonDeal.java	(date 1615500832973)
--@@ -9,6 +9,7 @@
-- import java.util.*;
-- 
-- public class JsonDeal {
--+     int i =0;
-- 
-- 
--     /*
--@@ -16,11 +17,6 @@
--     d'etats, le nombre de transitions, une liste d'alphabet
--      */
-- 
---    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
---
---        return null;
---    }
---
--     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
--         Random random = new Random();
-- 
--@@ -247,295 +243,22 @@
-- 
-- 
--     public static void main(String[] args) {
---//        JsonDeal jsonDeal= new JsonDeal();
---//        Automates a = jsonDeal.json_to_automate("test.json");
---//        jsonDeal.automate_to_json(a);
---
---        ArrayList transition = new ArrayList();
---
---        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
---
---        // creation q1
---        ArrayList transition1 = new ArrayList();
---        transition1.add("1");
---        transition1.add("a");
---        ArrayList transition2 = new ArrayList();
---        transition2.add("2");
---        transition2.add("a");
---        Etats q1 = new Etats();
---        q1.setNom("1");
---        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
---        q1_transitions = new ArrayList<ArrayList<String>>();
---        q1_transitions.add(transition1);
---        q1_transitions.add(transition2);
---        q1.setTransitions(q1_transitions);
--+        JsonDeal jsonDeal= new JsonDeal();
-- 
---        // creation q2
---        ArrayList transition3 = new ArrayList();
---        transition3.add("3");
---        transition3.add("@");
---        Etats q2 = new Etats();
---        q2.setNom("2");
---        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
---        q2_transitions.add(transition3);
---        q2.setTransitions(q2_transitions);
-- 
---        // creation q3
---        ArrayList transition4 = new ArrayList();
---        transition4.add("3");
---        transition4.add("a");
---        ArrayList transition5 = new ArrayList();
---        transition5.add("4");
---        transition5.add("a");
---        Etats q3 = new Etats();
---        q3.setNom("3");
---        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
---        q3_transitions.add(transition4);
---        q3_transitions.add(transition5);
---        q3.setTransitions(q3_transitions);
--+        Automates a = jsonDeal.json_to_automate("test.json");
-- 
---        // creation q4
---        ArrayList transition6 = new ArrayList();
---        transition6.add("5");
---        transition6.add(".");
---        Etats q4 = new Etats();
---        q4.setNom("4");
---        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
---        q4_transitions.add(transition6);
---        q4.setTransitions(q4_transitions);
-- 
---        // creation q5
---        ArrayList transition7 = new ArrayList();
---        transition7.add("5");
---        transition7.add("a");
---        ArrayList transition8 = new ArrayList();
---        transition8.add("6");
---        transition8.add("a");
---        Etats q5 = new Etats();
---        q5.setNom("5");
---        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
---        q5_transitions.add(transition7);
---        q5_transitions.add(transition8);
---        q5.setTransitions(q5_transitions);
--+        String s = "((a+(b.b))*.(b+(a.a))*)";
--+        String[] ss = {"a", "b", "c"};
-- 
---        //q6
--+        Automates bb = a.thompson(s,ss);
-- 
---        Etats q6 = new Etats();
---        q6.setNom("6");
---        q6.setTransitions(null);
--+        System.out.println(jsonDeal.automate_to_json(bb));
--+        Images i = new Images();
--+        i.jsonToDot("test.json", "hh2.dot");
--+        bb.synch3();
-- 
---        ArrayList<Etats> arrivee = new ArrayList<Etats>();
---        arrivee.add(q6);
---        ArrayList<Etats> etats = new ArrayList<Etats>();
---        etats.add(q1);
---        etats.add(q2);
---        etats.add(q3);
---        etats.add(q4);
---        etats.add(q5);
---        etats.add(q6);
---        ArrayList<String> alphabet = new ArrayList<String>();
---        alphabet.add("a");
---        alphabet.add("@");
---        alphabet.add(".");
---        Automates a = new Automates(q1,arrivee,etats,alphabet);
---        a.determiniser();
---//        System.out.println(a.getAlphabet());
---////        System.out.println(a.getEtats());
---//        for(int i=0;i<a.getEtats().size();i++) {
---//            System.out.println(a.getEtats().get(i).getNom());
---//            System.out.println(a.getEtats().get(i).getTransitions());
---//        }
---//        System.out.println(a.getEtatDepart());
---//        System.out.println(a.getEtatsArrivee());
---//        System.out.println(a.getEtats().get(0).getTransitions());
---
---//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
---//        ArrayList<String> str = new ArrayList<String>();
---//        str.add("3");
---//        str.add("a");
---//        listOfLists.add(str);
---//        ArrayList<String> str2 = new ArrayList<String>();
---//        str2.add("1");
---//        str2.add("g");
---//        listOfLists.add(str2);
---//        System.out.println(listOfLists);
---
---
---        // determinaison
---//        System.out.println(a.getEtats().get());
---        // contient les transitions finales à inserer dans les grpEtats
---//        ArrayList grpTransitions = new ArrayList();
---//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
---//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
---//        // contient les etat à inserer dans l'automate final deteminisé
---//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
---//        Etats e = new Etats();
---//        e.setNom(a.getEtatDepart().getNom());
---//        grpEtats.add(e);
---//        // on parcourt les etats de a
---//        for(int i=0;i<a.getEtats().size();i++){
---//            // contient les transition de l'etat i
---//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
---//            int size = 0;
---//            if (transitions_etat == null)
---//                size = 0;
---//            else
---//                size = transitions_etat.size();
---//            // parcourt les transitions de l"etat i
---//            for(int j=0;j<size;j++){
---//                if (transitions_etat.get(j) != null) {
---//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
---//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
---//                    //System.out.println(tr.get(1));
---//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
---//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
---//                    // a partir de cette liste on creera les etats
---//                    boolean exist = false;
---//                    if(grpTransitionsTemp != null) {
---//                        // parcourt les transitions temporaires
---//                        for(int k=0;k<grpTransitionsTemp.size();k++){
---//                            String str = grpTransitionsTemp.get(k);
---//                            String alph_etat[] = str.split(":");
---////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
---//                            // ajouter un nouvel etat au groupe d'etat
---//                            if (tr.get(1).equals(alph_etat[0])){
---////                                System.out.println(alph_etat[1]);
---//                                // ici erreur :
---//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
---//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
---//                                // les deux prochaines lignes devraient etre correctes ???
---//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
---//
---//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
---//                                // le a va bel et bien vers 1,2,3,4,5,6
---//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
---//                                // determiner le depart des arcs
---//                                String temp =alph_etat[0]+":"+alph_etat[1];
---//                                grpTransitionsTemp.set(k,temp);
---////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
---//                                exist = true;
---//                            }
---//                        }
---//
---//                    }
---//                    // creation d'une transition pour un group d'etat
---//                    if (!exist){
---//                        String str = tr.get(1)+":"+tr.get(0);
---//                        grpTransitionsTemp.add(str);
---//                    }
---//                }
---//            }
---//            for(int g=0;g<grpEtats.size();g++)
---//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
---//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
---//            // ici generer grpTransitions
---//
---//            System.out.println("fin du parcours de l'etat "+(i+1));
---//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
---//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
---//            int s;
---//            if(grpTransitionsTemp!=null) {
---//                s = grpTransitionsTemp.size();
---//            }else {
---//                s = 0;
---//            }
---//                for (int x = 0; x < s; x++) {
---//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
---////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
---//                    if (grpEtats.contains(alph_etat[1])) {
---//
---//                    } else {
---//                        Etats et = new Etats();
---//                        et.setNom(alph_etat[1]);
---//                        // la partie suivante pourra etre ajoutée à une autre boucle
---//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
---////                        ArrayList<String> trns = new ArrayList<String>();
---////                        trns.add()
---////                        et.getTransitions().add();
---//                        grpEtats.add(et);
---//                    }
---//                }
---//                // ici former grpTransitions
---//            grpTransitions.add(String.valueOf(i));
---//            grpTransitions.add(grpTransitionsTemp);
---//            // ICI PPROBLEME
---//            // grpTransitionTemp est vide????
---//            System.out.println("voila "+grpTransitions);
---//            grpTransitionsTemp.clear();
---//
---//        }
---//            // parcours de grpEtat ( pour le depart )
---//            for(int j=0;j<grpEtats.size();j++){
---//                String etat[] = grpEtats.get(j).getNom().split(",");
---//                // on recupere les etats du grpEtat ( depart )
---//                for (int y=0;y<etat.length;y++){
---//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
---//                    for (int i=0;i<a.getEtats().size();i++) {
---//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
---//                            // ajouter les transitions de l'etat i de l'automate non deterministe
---//                            if(a.getEtats().get(i).getTransitions()!=null){
---//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
---//                                //grpetat pour les arrivées
---//                                for (int l = 0; l < grpEtats.size(); l++) {
---//                                    // etat1 contient les etats d'arrivée à tester
---//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
---//                                    for (int g = 0; g < etat1.length; g++) {
---//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
---//                                        if (ltr.get(0).equals(etat1[g])) {
---//                                            boolean trouve = false;
---//                                            // verfie si on a déja ajouté la transition
---//                                            if (grpEtats.get(j).getTransitions() != null) {
---//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
---//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
---//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
---//                                                        trouve = true;
---//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
---//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
---//                                                    }
---//                                                }
---//                                            }
---//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
---//                                            if (!trouve) {
---//                                                ArrayList<String> al = new ArrayList<String>();
---//                                                // cette ligne a un probleme
---//                                                al.add(grpEtats.get(l).getNom());
---//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
---//                                                if (grpEtats.get(j).getTransitions() != null) {
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//                                                } else {
---//                                                    // à regler le cas ou les transitions sont vides
---////                                                grpEtats.get(j).getTransitions() = new ArrayList();
---//                                                    grpEtats.get(j).setTransitions(new ArrayList());
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//
---//                                                }
---//
---//                                        }
---//                                        }
---//                                    }
---//                                }
---//                            }
---//                        }
---//                        }
---//                    }
---//                }
---//            }
---//
---//        System.out.println(grpTransitionsTemp);
---//            for (int i=0;i<grpEtats.size();i++){
---//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
---//            }
---//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
---
---//        List<List> lists = new ArrayList<List>();
---//        for (int i = 0; i < 4; i++) {
---//            List list = new ArrayList();
---//            list.add(i);
---//            list.add("a");
---//            lists.add(list);
---//            // Use the list further...
---//        }
---//        System.out.println(lists);
-- 
-- 
--     }
--Index: src/main/java/Automates.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                config.add(0,hash.get(key).toString());\n               config.add(1,hash.get(key));\n               hashToList.add(config);\n               etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
----- a/src/main/java/Automates.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/src/main/java/Automates.java	(date 1615500833025)
--@@ -1,15 +1,22 @@
---import java.util.*;
---import java.util.concurrent.ArrayBlockingQueue;
--+//
--+// Source code recreated from a .class file by IntelliJ IDEA
--+// (powered by FernFlower decompiler)
--+//
--+
--+import java.util.ArrayList;
--+import java.util.List;
--+import java.util.Stack;
-- 
-- public class Automates {
---
--+    Stack<String> automates = new Stack();
--     private Etats etatDepart;
---    private List<Etats> etatsArrivee,etats;
--+    private List<Etats> etatsArrivee;
--+    private List<Etats> etats;
--     private List<String> alphabet;
-- 
---    public Automates(){
---
--+    public Automates() {
--     }
--+
--     public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {
--         this.etatDepart = etatDepart;
--         this.etatsArrivee = etatsArrivee;
--@@ -18,7 +25,7 @@
--     }
-- 
--     public Etats getEtatDepart() {
---        return etatDepart;
--+        return this.etatDepart;
--     }
-- 
--     public void setEtatDepart(Etats etatDepart) {
--@@ -26,7 +33,7 @@
--     }
-- 
--     public List<Etats> getEtatsArrivee() {
---        return etatsArrivee;
--+        return this.etatsArrivee;
--     }
-- 
--     public void setEtatsArrivee(List<Etats> etatsArrivee) {
--@@ -34,7 +41,7 @@
--     }
-- 
--     public List<Etats> getEtats() {
---        return etats;
--+        return this.etats;
--     }
-- 
--     public void setEtats(List<Etats> etats) {
--@@ -42,82 +49,339 @@
--     }
-- 
--     public List<String> getAlphabet() {
---        return alphabet;
--+        return this.alphabet;
--     }
-- 
--     public void setAlphabet(List<String> alphabet) {
--         this.alphabet = alphabet;
--     }
-- 
---    // ALGORITHMES UTILES
---
---
---    public void toMatrice(){
---        //  TO DO
--+    public void toMatrice() {
--     }
---
---    public String concatener(List etatsG){
---        if(etats == null) return "";
---        else {
---            String str = "";
---            for(int a=0;a<etatsG.size();a++){
---                if ( a == 0 ){
---                    str = (String) etatsG.get(a);
---                }else {
---                    str = str + "," + (String) etatsG.get(a);
---                }
---            }
---            return str;
---        }
---    }
---
---    // ALGORITHMES
-- 
---    public void determiniser(){
--+    public void determiniser() {
--+    }
--+
--+
--+
--+    boolean presentIn(char mot, String[] alphabet) {
--+        boolean not_preset = true;
--+
--+        for(int i = 0; i < alphabet.length; ++i) {
--+            if (alphabet[i].equals(String.valueOf(mot))) {
--+                return false;
--+            }
--+        }
--+
--+        return true;
--+    }
--+
--+    public Automates thompson(String expression, String[] alpha) {
--+        Stack<Automates> pileA = new Stack();
--+        Stack<Character> pileM = new Stack();
--+        int etati = 0;
--+
--+
--+        for(int i = 0; i < expression.length(); ++i) {
--+            Automates ap;
--+            ArrayList apEtats;
--+
--+            /* cas ou c est un charactere de l alphabet */
--+            if (!this.presentIn(expression.charAt(i), alpha)) {
--+                ap = new Automates();
--+                Etats etd = new Etats();
--+                etd.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etf = new Etats();
--+                etf.setNom(String.valueOf(etati));
--+                ++etati;
--+                ArrayList<String> config = new ArrayList();
--+                config.add(etf.getNom());
--+                config.add(String.valueOf(expression.charAt(i)));
--+                ArrayList trs = new ArrayList();
--+                ArrayList trs1 = new ArrayList();
--+                etf.setTransitions(trs);
--+                trs1.add(config);
--+                etd.setTransitions(trs1);
--+                List<Etats> etfs = new ArrayList();
--+                etfs.add(etf);
--+                List<String> al = this.alphabet;
--+                apEtats = new ArrayList();
--+                apEtats.add(etd);
--+                apEtats.add(etf);
--+                ap.setAlphabet(al);
--+                ap.setEtats(apEtats);
--+                ap.setEtatsArrivee(etfs);
--+                ap.setEtatDepart(etd);
--+                pileA.push(ap);
--+            }
--+
--+            if (expression.charAt(i) == '(') {
--+                System.out.println("(");
--+            }
--+
--+            if (expression.charAt(i) == '.') {
--+                pileM.push('.');
--+                System.out.println(".");
--+            }
--+
--+            if (expression.charAt(i) == '+') {
--+                pileM.push('+');
--+                System.out.println("+");
--+            }
--+
--+            ArrayList config1;
--+            ArrayList config2;
--+            ArrayList trF;
--+            String ed1;
--+            if (expression.charAt(i) == '*') {
--+                System.out.println("*");
--+                ap = (Automates)pileA.pop();
--+                Automates a = new Automates();
--+                new ArrayList();
--+                List<Etats> etats = ap.getEtats();
--+                String ed = ap.getEtatDepart().getNom();
--+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
--+                Etats etatD = new Etats();
--+                etatD.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etatF = new Etats();
--+                etatF.setNom(String.valueOf(etati));
--+                ArrayList etfss = new ArrayList();
--+                etatF.setTransitions(etfss);
--+                ++etati;
--+                apEtats = new ArrayList();
--+                apEtats.add(etatF);
--+                ArrayList trD = new ArrayList();
--+                config1 = new ArrayList();
--+                config1.add(etatF.getNom());
--+                config1.add("eps");
--+                trD.add(config1);
--+                config2 = new ArrayList();
--+                config2.add(ed);
--+                config2.add("eps");
--+                trD.add(config2);
--+                etatD.setTransitions(trD);
--+
--+                for(int j = 0; j < etats.size(); ++j) {
--+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(etatF.getNom());
--+                        config3.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(config3);
--+                        trF = new ArrayList();
--+                        trF.add(ed);
--+                        trF.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(trF);
--+                    }
--+                }
--+
--+                etats.add(etatD);
--+                etats.add(etatF);
--+                a.setEtatsArrivee(apEtats);
--+                a.setEtats(etats);
--+                a.setEtatDepart(etatD);
--+                a.setAlphabet(ap.getAlphabet());
--+                pileA.push(a);
--+            }
--+
--+            if (expression.charAt(i) == ')') {
--+                System.out.println(")");
--+                ap = new Automates();
--+                char exp = (Character)pileM.pop();
--+                Automates ap2 = (Automates)pileA.pop();
--+                Automates ap1 = (Automates)pileA.pop();
--+                ed1 = ap1.getEtatDepart().getNom();
--+                String ed2 = ap2.getEtatDepart().getNom();
--+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
--+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
--+                ap.setAlphabet(ap2.getAlphabet());
--+                apEtats = new ArrayList();
--+
--+                int j;
--+                for(j = 0; j < ap1.getEtats().size(); ++j) {
--+                    apEtats.add(ap1.getEtats().get(j));
--+                }
--+
--+                for(j = 0; j < ap2.getEtats().size(); ++j) {
--+                    apEtats.add(ap2.getEtats().get(j));
--+                }
--+
--+                ap.setEtats(apEtats);
--+                switch(exp) {
--+                    case '+':
--+                        Etats etatsD = new Etats();
--+                        etatsD.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        config1 = new ArrayList();
--+                        config1.add(String.valueOf(ed1));
--+                        config1.add("eps");
--+                        config2 = new ArrayList();
--+                        config2.add(String.valueOf(ed2));
--+                        config2.add("eps");
--+                        ArrayList trD = new ArrayList();
--+                        trD.add(config1);
--+                        trD.add(config2);
--+                        etatsD.setTransitions(trD);
--+                        ap.getEtats().add(etatsD);
--+                        Etats etatsF = new Etats();
--+                        etatsF.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        trF = new ArrayList();
--+                        etatsF.setTransitions(trF);
--+                        ap.getEtats().add(etatsF);
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(String.valueOf(etatsF.getNom()));
--+                        config3.add("eps");
--+                        ArrayList<String> config4 = new ArrayList();
--+                        config4.add(String.valueOf(etatsF.getNom()));
--+                        config4.add("eps");
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
--+                        List<Etats> efs = new ArrayList();
--+                        efs.add(etatsF);
--+                        ap.setEtatDepart(etatsD);
--+                        ap.setEtatsArrivee(efs);
--+                        pileA.push(ap);
--+                        break;
--+                    case '.':
--+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
--+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
--+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
--+                        ap.getEtats().remove(indiceD2);
--+                        ap.setEtatDepart(ap1.getEtatDepart());
--+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
--+                        pileA.push(ap);
--+                }
--+            }
--+        }
--+
--+        return (Automates)pileA.pop();
--+    }
--+
--+
--+
--+    public int get_etat(Automates automates, String nom) {
--+        for(int i = 0; i < automates.getEtats().size(); ++i) {
--+            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {
--+                return i;
--+            }
--+        }
--+
--+        return -1;
--+    }
--+
--+
--+
--+
--+    public void synch3(){
--+
--+        List<Etats> etats = this.getEtats();
--+
--+        /* etape1 : calcule des eps-transitivitées */
--+        for (int i = 0; i < etats.size(); i++){
--+            Etats etat0 = etats.get(i);
--+            for (int j = 0; j < etat0.getTransitions().size(); j++){
--+                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);
--+                if (config0.get(1) == "eps"){
--+                    int et = this.get_etat(this, config0.get(0).toString());
--+
--+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
--+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){
--+                            this.getEtatsArrivee().add(etat0);
--+                        }
--+                    }
--+                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){
--+                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);
--+                        if (config1.get(1) == "eps"){
--+                            etat0.getTransitions().add(config1);
--+                        }
--+                    }
--+                }
--+            }
--+        }
--+
--+        /* etape 2 calcule des transitivités sans epsilons */
--+        for (int i = 0; i < etats.size(); i++){
--+            Etats etat_courant = etats.get(i);
--+
--+            for (int j = 0; j < etat_courant.getTransitions().size(); j++){
--+                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);
--+                if (config.get(1) == "eps"){
--+                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));
--+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
--+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){
--+                            this.getEtatsArrivee().add(etat_courant);
--+                        }
--+                    }
--+
--+                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){
--+                        ArrayList trans = etat_inter.getTransitions();
--+                        for (int s = 0; s < trans.size(); s++){
--+                            ArrayList config1 = (ArrayList) trans.get(s);
--+                            if (config1.get(1) != "eps"){
--+                                etat_courant.getTransitions().add(config1);
--+                            }
--+                        }
--+                    }
--+                }
--+            }
--+        }
-- 
---        Queue<List> file_etat_cree = new LinkedList<List>();
---        List debut = new ArrayList();
---        debut.add(this.getEtatDepart().getNom());
---        file_etat_cree.add(debut);
-- 
---        while (file_etat_cree.size()!=0){
---            List etats_preced = file_etat_cree.poll();
---//            file_etat_cree.remove(etats_preced);
---//            System.out.println(file_etat_cree);
---            Etats etat = new Etats();
---            // concatener les etats groupés : à définir
---            etat.setNom(etats_preced.toString());
---            HashMap<String,List> hash = new HashMap<String,List>();
--+        /* etape 3 : suppression des eps-transitions */
--+        for ( int i = 0 ; i < this.getEtats().size(); i++){
--+            ArrayList trs = new ArrayList();
--+            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){
--+                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);
--+                if(a.get(1) != "eps"){
--+                    if ( ! trs.contains(a)){
--+                        trs.add(a);
--+                    }
--+                }
--+            }
--+            this.getEtats().get(i).setTransitions(trs);
--+        }
-- 
---            for(int i =0;i<etats_preced.size();i++){
---                for (int j=0;j<this.alphabet.size();j++){
---                    //verifier cette ligne
---                    if (hash.containsKey(this.alphabet.get(j))){
---                        // l'idée est là
---                        List l = (List)hash.get(this.alphabet.get(j));
---                        l.add(etats_preced);
---                        hash.put(this.alphabet.get(j),l);
---                    } else {
---                        //ici ce sera le nom de l'etat i qui nous sera utile
---                        List l = new ArrayList();
---                        l.add(etats_preced.get(i));
---                        hash.put(this.alphabet.get(j),l);
--+        /* etape 4: suppression des etats non accessibles et des transitions double */
--+        ArrayList<String> etats_acce = new ArrayList<String>();
--+        for (int i = 0; i < this.getEtats().size(); i++){
--+            String nom = this.getEtats().get(i).getNom();
--+            for (int j = 0; j < this.getEtats().size(); j++){
--+                ArrayList transitions = this.getEtats().get(j).getTransitions();
--+                for ( int k = 0; k < transitions.size(); k++){
--+                    ArrayList conf = (ArrayList) transitions.get(k);
--+                    if (conf.get(0) == nom){
--+                        etats_acce.add(nom);
--                     }
--                 }
--             }
---            System.out.println(hash);
---            // à revoir
---            ArrayList hashToList = new ArrayList();
---            for(String key: hash.keySet()){
---                file_etat_cree.add(hash.get(key));
---                ArrayList config = new ArrayList();
---                config.add(0,hash.get(key).toString());
---               config.add(1,hash.get(key));
---               hashToList.add(config);
---               etat.setTransitions(hashToList);
--+            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){
--+                etats_acce.add(this.getEtats().get(i).getNom());
--             }
--         }
--+
--+
--+        /* definition des nouveaux etats */
--+        ArrayList<Etats> etts = new ArrayList<Etats>();
--+        for (int i = 0; i < this.getEtats().size(); i++){
--+            if (etats_acce.contains(this.getEtats().get(i).getNom())){
--+                etts.add(this.getEtats().get(i));
--+            }
--+        }
--+        this.setEtats(etts);
-- 
---    }
--+        /* definition des nouveaux etats finaux */
--+        ArrayList<Etats> arr = new ArrayList<Etats>();
--+        for (int i = 0; i < this.getEtatsArrivee().size(); i++){
--+            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){
--+                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));
--+                if (!arr.contains(ett)){
--+                    arr.add(ett);
--+                }
--+            }
--+        }
--+        this.setEtatsArrivee(arr);
-- 
--+    }
-- }
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/.idea/workspace.xml	(date 1615501129147)
--@@ -4,13 +4,12 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
--+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
--     </list>
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--@@ -27,12 +26,25 @@
--   <component name="Git.Settings">
--     <option name="RECENT_BRANCH_BY_REPOSITORY">
--       <map>
---        <entry key="$PROJECT_DIR$" value="main" />
--+        <entry key="$PROJECT_DIR$" value="imadhou00" />
--       </map>
--     </option>
--     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
--+    <option name="RESET_MODE" value="MIXED" />
--+    <option name="UPDATE_TYPE" value="REBASE" />
--+  </component>
--+  <component name="GitSEFilterConfiguration">
--+    <file-type-list>
--+      <filtered-out-file-type name="LOCAL_BRANCH" />
--+      <filtered-out-file-type name="REMOTE_BRANCH" />
--+      <filtered-out-file-type name="TAG" />
--+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
--+    </file-type-list>
--   </component>
--   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
--+  <component name="ProjectLevelVcsManager">
--+    <ConfirmationsSetting value="2" id="Add" />
--+  </component>
--   <component name="ProjectViewState">
--     <option name="hideEmptyMiddlePackages" value="true" />
--     <option name="showLibraryContents" value="true" />
--@@ -42,15 +54,22 @@
--     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--     <property name="WebServerToolWindowFactoryState" value="false" />
--     <property name="aspect.path.notification.shown" value="true" />
---    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
--     <property name="node.js.detected.package.eslint" value="true" />
--     <property name="node.js.detected.package.tslint" value="true" />
--     <property name="node.js.path.for.package.eslint" value="project" />
--     <property name="node.js.path.for.package.tslint" value="project" />
--     <property name="node.js.selected.package.eslint" value="(autodetect)" />
--     <property name="node.js.selected.package.tslint" value="(autodetect)" />
--+    <property name="nodejs_package_manager_path" value="npm" />
--   </component>
---  <component name="RunManager">
--+  <component name="RunManager" selected="Application.JsonDeal">
--+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="Images" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
--       <module name="Automates" />
--@@ -58,13 +77,16 @@
--         <option name="Make" enabled="true" />
--       </method>
--     </configuration>
---    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
---      <option name="arquillianRunConfiguration">
---        <value>
---          <option name="containerStateName" value="" />
---        </value>
---      </option>
---      <option name="TEST_OBJECT" value="class" />
--+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
--+      <module name="Automates" />
--       <method v="2">
--         <option name="Make" enabled="true" />
--       </method>
--@@ -72,6 +94,10 @@
--     <recent_temporary>
--       <list>
--         <item itemvalue="Application.JsonDeal" />
--+        <item itemvalue="Application.TraitementTransitions" />
--+        <item itemvalue="Application.JsonTpGv" />
--+        <item itemvalue="Application.Images" />
--+        <item itemvalue="Application.JsonDeal" />
--       </list>
--     </recent_temporary>
--   </component>
--@@ -84,7 +110,15 @@
--       <option name="presentableId" value="Default" />
--       <updated>1613827742264</updated>
--       <workItem from="1613827744292" duration="363000" />
---      <workItem from="1613828133950" duration="3761000" />
--+      <workItem from="1613828133950" duration="1228000" />
--+      <workItem from="1614112267934" duration="567000" />
--+      <workItem from="1614337229980" duration="26000" />
--+      <workItem from="1614340764665" duration="8758000" />
--+      <workItem from="1614724089267" duration="43000" />
--+      <workItem from="1614948823465" duration="12413000" />
--+      <workItem from="1615029847548" duration="3790000" />
--+      <workItem from="1615067606138" duration="15975000" />
--+      <workItem from="1615500735341" duration="394000" />
--     </task>
--     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
--       <created>1613828472218</created>
--@@ -93,14 +127,28 @@
--       <option name="project" value="LOCAL" />
--       <updated>1613828472218</updated>
--     </task>
---    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
---      <created>1613832695232</created>
--+    <task id="LOCAL-00002" summary="Tout est bien">
--+      <created>1614052026476</created>
--       <option name="number" value="00002" />
--       <option name="presentableId" value="LOCAL-00002" />
--       <option name="project" value="LOCAL" />
---      <updated>1613832695232</updated>
--+      <updated>1614052026476</updated>
--+    </task>
--+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
--+      <created>1614052212166</created>
--+      <option name="number" value="00003" />
--+      <option name="presentableId" value="LOCAL-00003" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614052212166</updated>
--+    </task>
--+    <task id="LOCAL-00004" summary="0.1">
--+      <created>1614171320903</created>
--+      <option name="number" value="00004" />
--+      <option name="presentableId" value="LOCAL-00004" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614171320903</updated>
--     </task>
---    <option name="localTasksCounter" value="3" />
--+    <option name="localTasksCounter" value="5" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -111,7 +159,34 @@
--       <map>
--         <entry key="MAIN">
--           <value>
---            <State />
--+            <State>
--+              <option name="FILTERS">
--+                <map>
--+                  <entry key="branch">
--+                    <value>
--+                      <list>
--+                        <option value="imadhou00" />
--+                      </list>
--+                    </value>
--+                  </entry>
--+                </map>
--+              </option>
--+            </State>
--+          </value>
--+        </entry>
--+      </map>
--+    </option>
--+    <option name="RECENT_FILTERS">
--+      <map>
--+        <entry key="Branch">
--+          <value>
--+            <list>
--+              <RecentGroup>
--+                <option name="FILTER_VALUES">
--+                  <option value="HEAD" />
--+                </option>
--+              </RecentGroup>
--+            </list>
--           </value>
--         </entry>
--       </map>
--@@ -120,7 +195,28 @@
--   </component>
--   <component name="VcsManagerConfiguration">
--     <MESSAGE value="Ghilas commited les classes eni" />
---    <MESSAGE value="Ghilas commited a new version with new transitions" />
---    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
--+    <MESSAGE value="Tout est bien" />
--+    <MESSAGE value="Final push a propos de JSONDEAL" />
--+    <MESSAGE value="0.1" />
--+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
--+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
--+  </component>
--+  <component name="XDebuggerManager">
--+    <breakpoint-manager>
--+      <breakpoints>
--+        <breakpoint enabled="true" type="java-exception">
--+          <properties class="java.util.EmptyStackException" package="java.util" />
--+          <option name="timeStamp" value="11" />
--+        </breakpoint>
--+      </breakpoints>
--+      <default-breakpoints>
--+        <breakpoint enabled="true" type="java-exception" />
--+      </default-breakpoints>
--+    </breakpoint-manager>
--+    <watches-manager>
--+      <configuration name="Application">
--+        <watch expression="a" language="JAVA" />
--+      </configuration>
--+    </watches-manager>
--   </component>
-- </project>
--\ No newline at end of file
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch
-deleted file mode 100644
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,19 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1" date="1615371283486" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 11:14 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/Etats.class" />
-    <option name="AFTER_PATH" value="target/classes/Etats.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Etats.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/JsonDeal.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
-    <option name="AFTER_PATH" value="target/classes/Automates.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Automates.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34__Default_Changelist_1.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1" date="1616585691748" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 24/03/2021 12:34 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/JsonDeal.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,30 +0,0 @@
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ajout de l'algorithme de synchronisation\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Automates.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Automates.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Images.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Images.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.json\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"imadhou00\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.JsonDeal\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianTestNG\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\n      <properties />\n      <listeners />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614337229980\" duration=\"26000\" />\n      <workItem from=\"1614340764665\" duration=\"8758000\" />\n      <workItem from=\"1614724089267\" duration=\"43000\" />\n      <workItem from=\"1614948823465\" duration=\"12413000\" />\n      <workItem from=\"1615029847548\" duration=\"3790000\" />\n      <workItem from=\"1615067606138\" duration=\"15975000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"0.1\">\n      <created>1614171320903</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614171320903</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"imadhou00\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"HEAD\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"0.1\" />\n    <MESSAGE value=\"Ajout de l'algorithme de synchronisation\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ajout de l'algorithme de synchronisation\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.EmptyStackException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"11\" />\n        </breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 45d3bba6227b0f7909040457b727a5a7bddf4e08)
-+++ b/.idea/workspace.xml	(date 1615243638051)
-@@ -93,19 +93,6 @@
-         <option name="Make" enabled="true" />
-       </method>
-     </configuration>
--    <configuration default="true" type="ArquillianTestNG" factoryName="" nameIsGenerated="true">
--      <option name="arquillianRunConfiguration">
--        <value>
--          <option name="containerStateName" value="" />
--        </value>
--      </option>
--      <option name="TEST_OBJECT" value="CLASS" />
--      <properties />
--      <listeners />
--      <method v="2">
--        <option name="Make" enabled="true" />
--      </method>
--    </configuration>
-     <recent_temporary>
-       <list>
-         <item itemvalue="Application.JsonDeal" />
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]" date="1615243667224" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 08/03/2021 23:47 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44__Default_Changelist_1.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1" date="1616661931749" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 25/03/2021 09:44 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/Images.class" />
-    <option name="AFTER_PATH" value="target/classes/Images.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/Images.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/JsonDeal.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,23 +0,0 @@
-Index: test.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\"Alphabet\":[\"a\",\"b\",\"c\"],\"Init\":\"8\",\"Fin\":[\"19\"],\"Etats\":[\"0\",\"1\",\"2\",\"3\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"15\",\"16\",\"17\",\"19\"],\"Transitions\":[[\"0\",[[\"1\",\"a\"]]],[\"1\",[[\"7\",\"eps\"]]],[\"2\",[[\"3\",\"b\"]]],[\"3\",[[\"5\",\"b\"]]],[\"5\",[[\"7\",\"eps\"]]],[\"6\",[[\"0\",\"eps\"],[\"2\",\"eps\"]]],[\"7\",[[\"9\",\"eps\"],[\"6\",\"eps\"]]],[\"8\",[[\"9\",\"eps\"],[\"6\",\"eps\"]]],[\"9\",[[\"19\",\"eps\"],[\"16\",\"eps\"]]],[\"10\",[[\"11\",\"b\"]]],[\"11\",[[\"17\",\"eps\"]]],[\"12\",[[\"13\",\"a\"]]],[\"13\",[[\"15\",\"a\"]]],[\"15\",[[\"17\",\"eps\"]]],[\"16\",[[\"10\",\"eps\"],[\"12\",\"eps\"]]],[\"17\",[[\"19\",\"eps\"],[\"16\",\"eps\"]]],[\"19\",[]]]}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/test.json b/test.json
---- a/test.json	
-+++ b/test.json	
-@@ -1,1 +1,11 @@
--{"Alphabet":["a","b","c"],"Init":"8","Fin":["19"],"Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],"Transitions":[["0",[["1","a"]]],["1",[["7","eps"]]],["2",[["3","b"]]],["3",[["5","b"]]],["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
-+{
-+  "Alphabet":["a","b","c"],
-+  "Init":"8",
-+  "Fin":["19"],
-+  "Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],
-+  "Transitions":[
-+    ["0",[["1","a"]]],
-+    ["1",[["7","eps"]]],
-+    ["2",[["3","b"]]],
-+    ["3",[["5","b"]]],
-+    ["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,24 +0,0 @@
-Index: test.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\n  \"Alphabet\" : [\"a\", \"b\", \"c\", \"d\"],\n  \"Etats\" : [0,1,2,3],\n  \"Init\" : 0,\n  \"Fin\" : 2,\n  \"Transitions\" : [\n     [0, [[0,\"a\"], [1,\"b\"], [1, \"d\"]]],\n     [1, [[1,\"c\"], [3, \"a\"],[3, \"b\"]]],\n     [2, [[2, \"a\"],[3, \"a\"]]]\n  ]\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/test.json b/test.json
---- a/test.json	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
-+++ b/test.json	(date 1615373021473)
-@@ -1,11 +1,1 @@
--{
--  "Alphabet" : ["a", "b", "c", "d"],
--  "Etats" : [0,1,2,3],
--  "Init" : 0,
--  "Fin" : 2,
--  "Transitions" : [
--     [0, [[0,"a"], [1,"b"], [1, "d"]]],
--     [1, [[1,"c"], [3, "a"],[3, "b"]]],
--     [2, [[2, "a"],[3, "a"]]]
--  ]
--}
-\ No newline at end of file
-+{"Alphabet":["a","b","c"],"Init":"8","Fin":["19"],"Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],"Transitions":[["0",[["1","a"]]],["1",[["7","eps"]]],["2",[["3","b"]]],["3",[["5","b"]]],["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]" date="1615510211848" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 12/03/2021 01:50 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/JsonDeal.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
-    <option name="AFTER_PATH" value="target/classes/Automates.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/Automates.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1" date="1615373021554" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 11:43 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]" date="1615381716437" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 14:08 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,2191 +0,0 @@
-Index: src/main/java/JsonDeal.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n     int i =0;\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    /* construire un objet json a partir d'un objet de la classe automate */\n    public JSONObject automate_to_json(Automates automates){\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n        JsonDeal jsonDeal= new JsonDeal();\n\n\n        Images i = new Images();\n        i.jsonToDot(\"test.json\", \"abcd.dot\");\n\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
---- a/src/main/java/JsonDeal.java	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ b/src/main/java/JsonDeal.java	(date 1616586072013)
-@@ -248,6 +248,14 @@
-         Images i = new Images();
-         i.jsonToDot("test.json", "abcd.dot");
- 
-+        String[] a = {"a","b"};
-+        String at = "((a.b)*+(b.a)*)";
-+
-+        Automates au = new Automates();
-+        au = au.thompson(at, a);
-+        au.synch3();
-+        System.out.println(jsonDeal.automate_to_json(au));
-+
- 
-     }
- 
-Index: test.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\"Alphabet\":[\"a\",\"b\"],\"Init\":\"[0]\",\"Fin\":[\"[3, 4, 6, 7]\",\"[0]\"],\"Etats\":[\"[2, 5]\",\"[3, 4, 6, 7]\",\"[1]\",\"[0]\"],\"Transitions\":[[\"[2, 5]\",[[\"[3, 4, 6, 7]\",\"a\"],[\"[2, 5]\",\"b\"]]],[\"[3, 4, 6, 7]\",[[\"[2, 5]\",\"a\"],[\"[3, 4, 6, 7]\",\"b\"]]],[\"[1]\",[[\"[2, 5]\",\"a\"],[\"[1]\",\"b\"]]],[\"[0]\",[[\"[2, 5]\",\"a\"],[\"[1]\",\"b\"]]]]}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/test.json b/test.json
---- a/test.json	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ b/test.json	(date 1616586095777)
-@@ -1,1 +1,1 @@
--{"Alphabet":["a","b"],"Init":"[0]","Fin":["[3, 4, 6, 7]","[0]"],"Etats":["[2, 5]","[3, 4, 6, 7]","[1]","[0]"],"Transitions":[["[2, 5]",[["[3, 4, 6, 7]","a"],["[2, 5]","b"]]],["[3, 4, 6, 7]",[["[2, 5]","a"],["[3, 4, 6, 7]","b"]]],["[1]",[["[2, 5]","a"],["[1]","b"]]],["[0]",[["[2, 5]","a"],["[1]","b"]]]]}
-+{"Alphabet":["a", "b"],"Init":"12","Fin":["3","9","12"],"Etats":["1","3","7","9","12"],"Transitions":[["1",[["3","b"]]],["3",[["1","a"]]],["7",[["9","a"]]],["9",[["7","b"]]],["12",[["1","a"],["7","b"]]]]}
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,19 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1" date="1615371283486" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 11:14 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Etats.class" />
--    <option name="AFTER_PATH" value="target/classes/Etats.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Etats.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,23 +0,0 @@
--Index: test.json
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>{\"Alphabet\":[\"a\",\"b\",\"c\"],\"Init\":\"8\",\"Fin\":[\"19\"],\"Etats\":[\"0\",\"1\",\"2\",\"3\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"15\",\"16\",\"17\",\"19\"],\"Transitions\":[[\"0\",[[\"1\",\"a\"]]],[\"1\",[[\"7\",\"eps\"]]],[\"2\",[[\"3\",\"b\"]]],[\"3\",[[\"5\",\"b\"]]],[\"5\",[[\"7\",\"eps\"]]],[\"6\",[[\"0\",\"eps\"],[\"2\",\"eps\"]]],[\"7\",[[\"9\",\"eps\"],[\"6\",\"eps\"]]],[\"8\",[[\"9\",\"eps\"],[\"6\",\"eps\"]]],[\"9\",[[\"19\",\"eps\"],[\"16\",\"eps\"]]],[\"10\",[[\"11\",\"b\"]]],[\"11\",[[\"17\",\"eps\"]]],[\"12\",[[\"13\",\"a\"]]],[\"13\",[[\"15\",\"a\"]]],[\"15\",[[\"17\",\"eps\"]]],[\"16\",[[\"10\",\"eps\"],[\"12\",\"eps\"]]],[\"17\",[[\"19\",\"eps\"],[\"16\",\"eps\"]]],[\"19\",[]]]}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/test.json b/test.json
----- a/test.json	
--+++ b/test.json	
--@@ -1,1 +1,11 @@
---{"Alphabet":["a","b","c"],"Init":"8","Fin":["19"],"Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],"Transitions":[["0",[["1","a"]]],["1",[["7","eps"]]],["2",[["3","b"]]],["3",[["5","b"]]],["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
--+{
--+  "Alphabet":["a","b","c"],
--+  "Init":"8",
--+  "Fin":["19"],
--+  "Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],
--+  "Transitions":[
--+    ["0",[["1","a"]]],
--+    ["1",[["7","eps"]]],
--+    ["2",[["3","b"]]],
--+    ["3",[["5","b"]]],
--+    ["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,24 +0,0 @@
--Index: test.json
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>{\n  \"Alphabet\" : [\"a\", \"b\", \"c\", \"d\"],\n  \"Etats\" : [0,1,2,3],\n  \"Init\" : 0,\n  \"Fin\" : 2,\n  \"Transitions\" : [\n     [0, [[0,\"a\"], [1,\"b\"], [1, \"d\"]]],\n     [1, [[1,\"c\"], [3, \"a\"],[3, \"b\"]]],\n     [2, [[2, \"a\"],[3, \"a\"]]]\n  ]\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/test.json b/test.json
----- a/test.json	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/test.json	(date 1615373021473)
--@@ -1,11 +1,1 @@
---{
---  "Alphabet" : ["a", "b", "c", "d"],
---  "Etats" : [0,1,2,3],
---  "Init" : 0,
---  "Fin" : 2,
---  "Transitions" : [
---     [0, [[0,"a"], [1,"b"], [1, "d"]]],
---     [1, [[1,"c"], [3, "a"],[3, "b"]]],
---     [2, [[2, "a"],[3, "a"]]]
---  ]
---}
--\ No newline at end of file
--+{"Alphabet":["a","b","c"],"Init":"8","Fin":["19"],"Etats":["0","1","2","3","5","6","7","8","9","10","11","12","13","15","16","17","19"],"Transitions":[["0",[["1","a"]]],["1",[["7","eps"]]],["2",[["3","b"]]],["3",[["5","b"]]],["5",[["7","eps"]]],["6",[["0","eps"],["2","eps"]]],["7",[["9","eps"],["6","eps"]]],["8",[["9","eps"],["6","eps"]]],["9",[["19","eps"],["16","eps"]]],["10",[["11","b"]]],["11",[["17","eps"]]],["12",[["13","a"]]],["13",[["15","a"]]],["15",[["17","eps"]]],["16",[["10","eps"],["12","eps"]]],["17",[["19","eps"],["16","eps"]]],["19",[]]]}
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,254 +0,0 @@
--Index: src/main/java/JsonDeal.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n     int i =0;\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n        JsonDeal jsonDeal= new JsonDeal();\n\n\n        Automates a = jsonDeal.json_to_automate(\"test.json\");\n\n\n        String s = \"((a+(b.b))*.(b+(a.a))*)\";\n        String[] ss = {\"a\", \"b\", \"c\"};\n\n        Automates bb = a.thompson(s,ss);\n\n        System.out.println(jsonDeal.automate_to_json(bb));\n        Images i = new Images();\n        i.jsonToDot(\"test.json\", \"hh2.dot\");\n        bb.synch3();\n\n\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
----- a/src/main/java/JsonDeal.java	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
--+++ b/src/main/java/JsonDeal.java	(date 1615382724736)
--@@ -249,10 +249,11 @@
--         Automates a = jsonDeal.json_to_automate("test.json");
-- 
-- 
--+        String s1 = "(a+bb)*(b+aa)*";
--         String s = "((a+(b.b))*.(b+(a.a))*)";
--         String[] ss = {"a", "b", "c"};
-- 
---        Automates bb = a.thompson(s,ss);
--+        Automates bb = a.thompson(s1,ss);
-- 
--         System.out.println(jsonDeal.automate_to_json(bb));
--         Images i = new Images();
--Index: src/main/java/Automates.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Automates {\n    Stack<String> automates = new Stack();\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee;\n    private List<Etats> etats;\n    private List<String> alphabet;\n\n    public Automates() {\n    }\n\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return this.etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return this.etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return this.etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return this.alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    public void toMatrice() {\n    }\n\n    public void determiniser() {\n    }\n\n\n\n    boolean presentIn(char mot, String[] alphabet) {\n        boolean not_preset = true;\n\n        for(int i = 0; i < alphabet.length; ++i) {\n            if (alphabet[i].equals(String.valueOf(mot))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public Automates thompson(String expression, String[] alpha) {\n        Stack<Automates> pileA = new Stack();\n        Stack<Character> pileM = new Stack();\n        int etati = 0;\n\n\n        for(int i = 0; i < expression.length(); ++i) {\n            Automates ap;\n            ArrayList apEtats;\n\n            /* cas ou c est un charactere de l alphabet */\n            if (!this.presentIn(expression.charAt(i), alpha)) {\n                ap = new Automates();\n                Etats etd = new Etats();\n                etd.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etf = new Etats();\n                etf.setNom(String.valueOf(etati));\n                ++etati;\n                ArrayList<String> config = new ArrayList();\n                config.add(etf.getNom());\n                config.add(String.valueOf(expression.charAt(i)));\n                ArrayList trs = new ArrayList();\n                ArrayList trs1 = new ArrayList();\n                etf.setTransitions(trs);\n                trs1.add(config);\n                etd.setTransitions(trs1);\n                List<Etats> etfs = new ArrayList();\n                etfs.add(etf);\n                List<String> al = this.alphabet;\n                apEtats = new ArrayList();\n                apEtats.add(etd);\n                apEtats.add(etf);\n                ap.setAlphabet(al);\n                ap.setEtats(apEtats);\n                ap.setEtatsArrivee(etfs);\n                ap.setEtatDepart(etd);\n                pileA.push(ap);\n            }\n\n            if (expression.charAt(i) == '(') {\n                System.out.println(\"(\");\n            }\n\n            if (expression.charAt(i) == '.') {\n                pileM.push('.');\n                System.out.println(\".\");\n            }\n\n            if (expression.charAt(i) == '+') {\n                pileM.push('+');\n                System.out.println(\"+\");\n            }\n\n            ArrayList config1;\n            ArrayList config2;\n            ArrayList trF;\n            String ed1;\n            if (expression.charAt(i) == '*') {\n                System.out.println(\"*\");\n                ap = (Automates)pileA.pop();\n                Automates a = new Automates();\n                new ArrayList();\n                List<Etats> etats = ap.getEtats();\n                String ed = ap.getEtatDepart().getNom();\n                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();\n                Etats etatD = new Etats();\n                etatD.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etatF = new Etats();\n                etatF.setNom(String.valueOf(etati));\n                ArrayList etfss = new ArrayList();\n                etatF.setTransitions(etfss);\n                ++etati;\n                apEtats = new ArrayList();\n                apEtats.add(etatF);\n                ArrayList trD = new ArrayList();\n                config1 = new ArrayList();\n                config1.add(etatF.getNom());\n                config1.add(\"eps\");\n                trD.add(config1);\n                config2 = new ArrayList();\n                config2.add(ed);\n                config2.add(\"eps\");\n                trD.add(config2);\n                etatD.setTransitions(trD);\n\n                for(int j = 0; j < etats.size(); ++j) {\n                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(etatF.getNom());\n                        config3.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(config3);\n                        trF = new ArrayList();\n                        trF.add(ed);\n                        trF.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(trF);\n                    }\n                }\n\n                etats.add(etatD);\n                etats.add(etatF);\n                a.setEtatsArrivee(apEtats);\n                a.setEtats(etats);\n                a.setEtatDepart(etatD);\n                a.setAlphabet(ap.getAlphabet());\n                pileA.push(a);\n            }\n\n            if (expression.charAt(i) == ')') {\n                System.out.println(\")\");\n                ap = new Automates();\n                char exp = (Character)pileM.pop();\n                Automates ap2 = (Automates)pileA.pop();\n                Automates ap1 = (Automates)pileA.pop();\n                ed1 = ap1.getEtatDepart().getNom();\n                String ed2 = ap2.getEtatDepart().getNom();\n                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();\n                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();\n                ap.setAlphabet(ap2.getAlphabet());\n                apEtats = new ArrayList();\n\n                int j;\n                for(j = 0; j < ap1.getEtats().size(); ++j) {\n                    apEtats.add(ap1.getEtats().get(j));\n                }\n\n                for(j = 0; j < ap2.getEtats().size(); ++j) {\n                    apEtats.add(ap2.getEtats().get(j));\n                }\n\n                ap.setEtats(apEtats);\n                switch(exp) {\n                    case '+':\n                        Etats etatsD = new Etats();\n                        etatsD.setNom(String.valueOf(etati));\n                        ++etati;\n                        config1 = new ArrayList();\n                        config1.add(String.valueOf(ed1));\n                        config1.add(\"eps\");\n                        config2 = new ArrayList();\n                        config2.add(String.valueOf(ed2));\n                        config2.add(\"eps\");\n                        ArrayList trD = new ArrayList();\n                        trD.add(config1);\n                        trD.add(config2);\n                        etatsD.setTransitions(trD);\n                        ap.getEtats().add(etatsD);\n                        Etats etatsF = new Etats();\n                        etatsF.setNom(String.valueOf(etati));\n                        ++etati;\n                        trF = new ArrayList();\n                        etatsF.setTransitions(trF);\n                        ap.getEtats().add(etatsF);\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(String.valueOf(etatsF.getNom()));\n                        config3.add(\"eps\");\n                        ArrayList<String> config4 = new ArrayList();\n                        config4.add(String.valueOf(etatsF.getNom()));\n                        config4.add(\"eps\");\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);\n                        List<Etats> efs = new ArrayList();\n                        efs.add(etatsF);\n                        ap.setEtatDepart(etatsD);\n                        ap.setEtatsArrivee(efs);\n                        pileA.push(ap);\n                        break;\n                    case '.':\n                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());\n                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());\n                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());\n                        ap.getEtats().remove(indiceD2);\n                        ap.setEtatDepart(ap1.getEtatDepart());\n                        ap.setEtatsArrivee(ap2.getEtatsArrivee());\n                        pileA.push(ap);\n                }\n            }\n        }\n\n        return (Automates)pileA.pop();\n    }\n\n\n\n    public int get_etat(Automates automates, String nom) {\n        for(int i = 0; i < automates.getEtats().size(); ++i) {\n            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n\n\n\n    public void synch3(){\n\n        List<Etats> etats = this.getEtats();\n\n        /* etape1 : calcule des eps-transitivitées */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat0 = etats.get(i);\n            for (int j = 0; j < etat0.getTransitions().size(); j++){\n                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);\n                if (config0.get(1) == \"eps\"){\n                    int et = this.get_etat(this, config0.get(0).toString());\n\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){\n                            this.getEtatsArrivee().add(etat0);\n                        }\n                    }\n                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){\n                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);\n                        if (config1.get(1) == \"eps\"){\n                            etat0.getTransitions().add(config1);\n                        }\n                    }\n                }\n            }\n        }\n\n        /* etape 2 calcule des transitivités sans epsilons */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat_courant = etats.get(i);\n\n            for (int j = 0; j < etat_courant.getTransitions().size(); j++){\n                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);\n                if (config.get(1) == \"eps\"){\n                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){\n                            this.getEtatsArrivee().add(etat_courant);\n                        }\n                    }\n\n                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){\n                        ArrayList trans = etat_inter.getTransitions();\n                        for (int s = 0; s < trans.size(); s++){\n                            ArrayList config1 = (ArrayList) trans.get(s);\n                            if (config1.get(1) != \"eps\"){\n                                etat_courant.getTransitions().add(config1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n        /* etape 3 : suppression des eps-transitions */\n        for ( int i = 0 ; i < this.getEtats().size(); i++){\n            ArrayList trs = new ArrayList();\n            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){\n                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);\n                if(a.get(1) != \"eps\"){\n                    if ( ! trs.contains(a)){\n                        trs.add(a);\n                    }\n                }\n            }\n            this.getEtats().get(i).setTransitions(trs);\n        }\n\n        /* etape 4: suppression des etats non accessibles et des transitions double */\n        ArrayList<String> etats_acce = new ArrayList<String>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            String nom = this.getEtats().get(i).getNom();\n            for (int j = 0; j < this.getEtats().size(); j++){\n                ArrayList transitions = this.getEtats().get(j).getTransitions();\n                for ( int k = 0; k < transitions.size(); k++){\n                    ArrayList conf = (ArrayList) transitions.get(k);\n                    if (conf.get(0) == nom){\n                        etats_acce.add(nom);\n                    }\n                }\n            }\n            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){\n                etats_acce.add(this.getEtats().get(i).getNom());\n            }\n        }\n\n\n        /* definition des nouveaux etats */\n        ArrayList<Etats> etts = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            if (etats_acce.contains(this.getEtats().get(i).getNom())){\n                etts.add(this.getEtats().get(i));\n            }\n        }\n        this.setEtats(etts);\n\n        /* definition des nouveaux etats finaux */\n        ArrayList<Etats> arr = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtatsArrivee().size(); i++){\n            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){\n                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));\n                if (!arr.contains(ett)){\n                    arr.add(ett);\n                }\n            }\n        }\n        this.setEtatsArrivee(arr);\n\n    }\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
----- a/src/main/java/Automates.java	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
--+++ b/src/main/java/Automates.java	(date 1615382898442)
--@@ -384,4 +384,197 @@
--         this.setEtatsArrivee(arr);
-- 
--     }
--+
--+
--+
--+
--+
--+    public Automates thompson2(String expression, String[] alpha) {
--+        Stack<Automates> pileA = new Stack();
--+        Stack<Character> pileM = new Stack();
--+        int etati = 0;
--+
--+
--+        for(int i = 0; i < expression.length(); ++i) {
--+            Automates ap;
--+            ArrayList apEtats;
--+
--+            /* cas ou c est un charactere de l alphabet */
--+            if (!this.presentIn(expression.charAt(i), alpha)) {
--+                ap = new Automates();
--+                Etats etd = new Etats();
--+                etd.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etf = new Etats();
--+                etf.setNom(String.valueOf(etati));
--+                ++etati;
--+                ArrayList<String> config = new ArrayList();
--+                config.add(etf.getNom());
--+                config.add(String.valueOf(expression.charAt(i)));
--+                ArrayList trs = new ArrayList();
--+                ArrayList trs1 = new ArrayList();
--+                etf.setTransitions(trs);
--+                trs1.add(config);
--+                etd.setTransitions(trs1);
--+                List<Etats> etfs = new ArrayList();
--+                etfs.add(etf);
--+                List<String> al = this.alphabet;
--+                apEtats = new ArrayList();
--+                apEtats.add(etd);
--+                apEtats.add(etf);
--+                ap.setAlphabet(al);
--+                ap.setEtats(apEtats);
--+                ap.setEtatsArrivee(etfs);
--+                ap.setEtatDepart(etd);
--+                pileA.push(ap);
--+            }
--+
--+            if (expression.charAt(i) == '(') {
--+                System.out.println("(");
--+            }
--+
--+            if (expression.charAt(i) == '.') {
--+                pileM.push('.');
--+                System.out.println(".");
--+            }
--+
--+            if (expression.charAt(i) == '+') {
--+                pileM.push('+');
--+                System.out.println("+");
--+            }
--+
--+            ArrayList config1;
--+            ArrayList config2;
--+            ArrayList trF;
--+            String ed1;
--+            if (expression.charAt(i) == '*') {
--+                System.out.println("*");
--+                ap = (Automates)pileA.pop();
--+                Automates a = new Automates();
--+                new ArrayList();
--+                List<Etats> etats = ap.getEtats();
--+                String ed = ap.getEtatDepart().getNom();
--+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
--+                Etats etatD = new Etats();
--+                etatD.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etatF = new Etats();
--+                etatF.setNom(String.valueOf(etati));
--+                ArrayList etfss = new ArrayList();
--+                etatF.setTransitions(etfss);
--+                ++etati;
--+                apEtats = new ArrayList();
--+                apEtats.add(etatF);
--+                ArrayList trD = new ArrayList();
--+                config1 = new ArrayList();
--+                config1.add(etatF.getNom());
--+                config1.add("eps");
--+                trD.add(config1);
--+                config2 = new ArrayList();
--+                config2.add(ed);
--+                config2.add("eps");
--+                trD.add(config2);
--+                etatD.setTransitions(trD);
--+
--+                for(int j = 0; j < etats.size(); ++j) {
--+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(etatF.getNom());
--+                        config3.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(config3);
--+                        trF = new ArrayList();
--+                        trF.add(ed);
--+                        trF.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(trF);
--+                    }
--+                }
--+
--+                etats.add(etatD);
--+                etats.add(etatF);
--+                a.setEtatsArrivee(apEtats);
--+                a.setEtats(etats);
--+                a.setEtatDepart(etatD);
--+                a.setAlphabet(ap.getAlphabet());
--+                pileA.push(a);
--+            }
--+
--+            if (expression.charAt(i) == ')') {
--+                System.out.println(")");
--+                ap = new Automates();
--+                char exp = (Character)pileM.pop();
--+                Automates ap2 = (Automates)pileA.pop();
--+                Automates ap1 = (Automates)pileA.pop();
--+                ed1 = ap1.getEtatDepart().getNom();
--+                String ed2 = ap2.getEtatDepart().getNom();
--+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
--+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
--+                ap.setAlphabet(ap2.getAlphabet());
--+                apEtats = new ArrayList();
--+
--+                int j;
--+                for(j = 0; j < ap1.getEtats().size(); ++j) {
--+                    apEtats.add(ap1.getEtats().get(j));
--+                }
--+
--+                for(j = 0; j < ap2.getEtats().size(); ++j) {
--+                    apEtats.add(ap2.getEtats().get(j));
--+                }
--+
--+                ap.setEtats(apEtats);
--+                switch(exp) {
--+                    case '+':
--+                        Etats etatsD = new Etats();
--+                        etatsD.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        config1 = new ArrayList();
--+                        config1.add(String.valueOf(ed1));
--+                        config1.add("eps");
--+                        config2 = new ArrayList();
--+                        config2.add(String.valueOf(ed2));
--+                        config2.add("eps");
--+                        ArrayList trD = new ArrayList();
--+                        trD.add(config1);
--+                        trD.add(config2);
--+                        etatsD.setTransitions(trD);
--+                        ap.getEtats().add(etatsD);
--+                        Etats etatsF = new Etats();
--+                        etatsF.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        trF = new ArrayList();
--+                        etatsF.setTransitions(trF);
--+                        ap.getEtats().add(etatsF);
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(String.valueOf(etatsF.getNom()));
--+                        config3.add("eps");
--+                        ArrayList<String> config4 = new ArrayList();
--+                        config4.add(String.valueOf(etatsF.getNom()));
--+                        config4.add("eps");
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
--+                        List<Etats> efs = new ArrayList();
--+                        efs.add(etatsF);
--+                        ap.setEtatDepart(etatsD);
--+                        ap.setEtatsArrivee(efs);
--+                        pileA.push(ap);
--+                        break;
--+                    case '.':
--+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
--+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
--+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
--+                        ap.getEtats().remove(indiceD2);
--+                        ap.setEtatDepart(ap1.getEtatDepart());
--+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
--+                        pileA.push(ap);
--+                }
--+            }
--+        }
--+
--+        return (Automates)pileA.pop();
--+    }
--+
--+
--+
--+
--+
--+
-- }
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ajout de l'algorithme de synchronisation\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Automates.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Automates.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Images.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Images.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.json\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"imadhou00\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.JsonDeal\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614337229980\" duration=\"26000\" />\n      <workItem from=\"1614340764665\" duration=\"8758000\" />\n      <workItem from=\"1614724089267\" duration=\"43000\" />\n      <workItem from=\"1614948823465\" duration=\"12413000\" />\n      <workItem from=\"1615029847548\" duration=\"3790000\" />\n      <workItem from=\"1615067606138\" duration=\"15975000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"0.1\">\n      <created>1614171320903</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614171320903</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"imadhou00\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"HEAD\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"0.1\" />\n    <MESSAGE value=\"Ajout de l'algorithme de synchronisation\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ajout de l'algorithme de synchronisation\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.EmptyStackException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"11\" />\n        </breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 5cf1c6632980e45e697d7cf1ddaa121b25468ecf)
--+++ b/.idea/workspace.xml	(date 1615383892792)
--@@ -7,12 +7,9 @@
--     <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/target/classes/Images.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Images.class" afterDir="false" />
--       <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/test.json" beforeDir="false" afterPath="$PROJECT_DIR$/test.json" afterDir="false" />
--     </list>
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,14 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]" date="1615510211848" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 12/03/2021 01:50 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1" date="1615373021554" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 11:43 [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]" date="1615381716437" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/03/2021 14:08 [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,14 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]" date="1615501135694" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/03/2021 23:18 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,630 +0,0 @@
--Index: src/main/java/JsonDeal.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
----- a/src/main/java/JsonDeal.java	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
--+++ b/src/main/java/JsonDeal.java	(date 1615501227224)
--@@ -9,6 +9,7 @@
-- import java.util.*;
-- 
-- public class JsonDeal {
--+     int i =0;
-- 
-- 
--     /*
--@@ -16,11 +17,6 @@
--     d'etats, le nombre de transitions, une liste d'alphabet
--      */
-- 
---    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
---
---        return null;
---    }
---
--     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
--         Random random = new Random();
-- 
--@@ -247,295 +243,22 @@
-- 
-- 
--     public static void main(String[] args) {
---//        JsonDeal jsonDeal= new JsonDeal();
---//        Automates a = jsonDeal.json_to_automate("test.json");
---//        jsonDeal.automate_to_json(a);
---
---        ArrayList transition = new ArrayList();
---
---        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
---
---        // creation q1
---        ArrayList transition1 = new ArrayList();
---        transition1.add("1");
---        transition1.add("a");
---        ArrayList transition2 = new ArrayList();
---        transition2.add("2");
---        transition2.add("a");
---        Etats q1 = new Etats();
---        q1.setNom("1");
---        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
---        q1_transitions = new ArrayList<ArrayList<String>>();
---        q1_transitions.add(transition1);
---        q1_transitions.add(transition2);
---        q1.setTransitions(q1_transitions);
--+        JsonDeal jsonDeal= new JsonDeal();
-- 
---        // creation q2
---        ArrayList transition3 = new ArrayList();
---        transition3.add("3");
---        transition3.add("@");
---        Etats q2 = new Etats();
---        q2.setNom("2");
---        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
---        q2_transitions.add(transition3);
---        q2.setTransitions(q2_transitions);
-- 
---        // creation q3
---        ArrayList transition4 = new ArrayList();
---        transition4.add("3");
---        transition4.add("a");
---        ArrayList transition5 = new ArrayList();
---        transition5.add("4");
---        transition5.add("a");
---        Etats q3 = new Etats();
---        q3.setNom("3");
---        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
---        q3_transitions.add(transition4);
---        q3_transitions.add(transition5);
---        q3.setTransitions(q3_transitions);
--+        Automates a = jsonDeal.json_to_automate("test.json");
-- 
---        // creation q4
---        ArrayList transition6 = new ArrayList();
---        transition6.add("5");
---        transition6.add(".");
---        Etats q4 = new Etats();
---        q4.setNom("4");
---        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
---        q4_transitions.add(transition6);
---        q4.setTransitions(q4_transitions);
-- 
---        // creation q5
---        ArrayList transition7 = new ArrayList();
---        transition7.add("5");
---        transition7.add("a");
---        ArrayList transition8 = new ArrayList();
---        transition8.add("6");
---        transition8.add("a");
---        Etats q5 = new Etats();
---        q5.setNom("5");
---        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
---        q5_transitions.add(transition7);
---        q5_transitions.add(transition8);
---        q5.setTransitions(q5_transitions);
--+        String s = "((a+(b.b))*.(b+(a.a))*)";
--+        String[] ss = {"a", "b", "c"};
-- 
---        //q6
--+        Automates bb = a.thompson(s,ss);
-- 
---        Etats q6 = new Etats();
---        q6.setNom("6");
---        q6.setTransitions(null);
--+        System.out.println(jsonDeal.automate_to_json(bb));
--+        Images i = new Images();
--+        i.jsonToDot("test.json", "hh2.dot");
--+        bb.synch3();
-- 
---        ArrayList<Etats> arrivee = new ArrayList<Etats>();
---        arrivee.add(q6);
---        ArrayList<Etats> etats = new ArrayList<Etats>();
---        etats.add(q1);
---        etats.add(q2);
---        etats.add(q3);
---        etats.add(q4);
---        etats.add(q5);
---        etats.add(q6);
---        ArrayList<String> alphabet = new ArrayList<String>();
---        alphabet.add("a");
---        alphabet.add("@");
---        alphabet.add(".");
---        Automates a = new Automates(q1,arrivee,etats,alphabet);
---        a.determiniser();
---//        System.out.println(a.getAlphabet());
---////        System.out.println(a.getEtats());
---//        for(int i=0;i<a.getEtats().size();i++) {
---//            System.out.println(a.getEtats().get(i).getNom());
---//            System.out.println(a.getEtats().get(i).getTransitions());
---//        }
---//        System.out.println(a.getEtatDepart());
---//        System.out.println(a.getEtatsArrivee());
---//        System.out.println(a.getEtats().get(0).getTransitions());
---
---//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
---//        ArrayList<String> str = new ArrayList<String>();
---//        str.add("3");
---//        str.add("a");
---//        listOfLists.add(str);
---//        ArrayList<String> str2 = new ArrayList<String>();
---//        str2.add("1");
---//        str2.add("g");
---//        listOfLists.add(str2);
---//        System.out.println(listOfLists);
---
---
---        // determinaison
---//        System.out.println(a.getEtats().get());
---        // contient les transitions finales à inserer dans les grpEtats
---//        ArrayList grpTransitions = new ArrayList();
---//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
---//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
---//        // contient les etat à inserer dans l'automate final deteminisé
---//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
---//        Etats e = new Etats();
---//        e.setNom(a.getEtatDepart().getNom());
---//        grpEtats.add(e);
---//        // on parcourt les etats de a
---//        for(int i=0;i<a.getEtats().size();i++){
---//            // contient les transition de l'etat i
---//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
---//            int size = 0;
---//            if (transitions_etat == null)
---//                size = 0;
---//            else
---//                size = transitions_etat.size();
---//            // parcourt les transitions de l"etat i
---//            for(int j=0;j<size;j++){
---//                if (transitions_etat.get(j) != null) {
---//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
---//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
---//                    //System.out.println(tr.get(1));
---//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
---//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
---//                    // a partir de cette liste on creera les etats
---//                    boolean exist = false;
---//                    if(grpTransitionsTemp != null) {
---//                        // parcourt les transitions temporaires
---//                        for(int k=0;k<grpTransitionsTemp.size();k++){
---//                            String str = grpTransitionsTemp.get(k);
---//                            String alph_etat[] = str.split(":");
---////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
---//                            // ajouter un nouvel etat au groupe d'etat
---//                            if (tr.get(1).equals(alph_etat[0])){
---////                                System.out.println(alph_etat[1]);
---//                                // ici erreur :
---//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
---//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
---//                                // les deux prochaines lignes devraient etre correctes ???
---//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
---//
---//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
---//                                // le a va bel et bien vers 1,2,3,4,5,6
---//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
---//                                // determiner le depart des arcs
---//                                String temp =alph_etat[0]+":"+alph_etat[1];
---//                                grpTransitionsTemp.set(k,temp);
---////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
---//                                exist = true;
---//                            }
---//                        }
---//
---//                    }
---//                    // creation d'une transition pour un group d'etat
---//                    if (!exist){
---//                        String str = tr.get(1)+":"+tr.get(0);
---//                        grpTransitionsTemp.add(str);
---//                    }
---//                }
---//            }
---//            for(int g=0;g<grpEtats.size();g++)
---//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
---//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
---//            // ici generer grpTransitions
---//
---//            System.out.println("fin du parcours de l'etat "+(i+1));
---//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
---//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
---//            int s;
---//            if(grpTransitionsTemp!=null) {
---//                s = grpTransitionsTemp.size();
---//            }else {
---//                s = 0;
---//            }
---//                for (int x = 0; x < s; x++) {
---//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
---////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
---//                    if (grpEtats.contains(alph_etat[1])) {
---//
---//                    } else {
---//                        Etats et = new Etats();
---//                        et.setNom(alph_etat[1]);
---//                        // la partie suivante pourra etre ajoutée à une autre boucle
---//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
---////                        ArrayList<String> trns = new ArrayList<String>();
---////                        trns.add()
---////                        et.getTransitions().add();
---//                        grpEtats.add(et);
---//                    }
---//                }
---//                // ici former grpTransitions
---//            grpTransitions.add(String.valueOf(i));
---//            grpTransitions.add(grpTransitionsTemp);
---//            // ICI PPROBLEME
---//            // grpTransitionTemp est vide????
---//            System.out.println("voila "+grpTransitions);
---//            grpTransitionsTemp.clear();
---//
---//        }
---//            // parcours de grpEtat ( pour le depart )
---//            for(int j=0;j<grpEtats.size();j++){
---//                String etat[] = grpEtats.get(j).getNom().split(",");
---//                // on recupere les etats du grpEtat ( depart )
---//                for (int y=0;y<etat.length;y++){
---//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
---//                    for (int i=0;i<a.getEtats().size();i++) {
---//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
---//                            // ajouter les transitions de l'etat i de l'automate non deterministe
---//                            if(a.getEtats().get(i).getTransitions()!=null){
---//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
---//                                //grpetat pour les arrivées
---//                                for (int l = 0; l < grpEtats.size(); l++) {
---//                                    // etat1 contient les etats d'arrivée à tester
---//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
---//                                    for (int g = 0; g < etat1.length; g++) {
---//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
---//                                        if (ltr.get(0).equals(etat1[g])) {
---//                                            boolean trouve = false;
---//                                            // verfie si on a déja ajouté la transition
---//                                            if (grpEtats.get(j).getTransitions() != null) {
---//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
---//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
---//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
---//                                                        trouve = true;
---//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
---//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
---//                                                    }
---//                                                }
---//                                            }
---//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
---//                                            if (!trouve) {
---//                                                ArrayList<String> al = new ArrayList<String>();
---//                                                // cette ligne a un probleme
---//                                                al.add(grpEtats.get(l).getNom());
---//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
---//                                                if (grpEtats.get(j).getTransitions() != null) {
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//                                                } else {
---//                                                    // à regler le cas ou les transitions sont vides
---////                                                grpEtats.get(j).getTransitions() = new ArrayList();
---//                                                    grpEtats.get(j).setTransitions(new ArrayList());
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//
---//                                                }
---//
---//                                        }
---//                                        }
---//                                    }
---//                                }
---//                            }
---//                        }
---//                        }
---//                    }
---//                }
---//            }
---//
---//        System.out.println(grpTransitionsTemp);
---//            for (int i=0;i<grpEtats.size();i++){
---//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
---//            }
---//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
---
---//        List<List> lists = new ArrayList<List>();
---//        for (int i = 0; i < 4; i++) {
---//            List list = new ArrayList();
---//            list.add(i);
---//            list.add("a");
---//            lists.add(list);
---//            // Use the list further...
---//        }
---//        System.out.println(lists);
-- 
-- 
--     }
--Index: src/main/java/Automates.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            // contient les colonnes du tableau\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                // on pourrait declarer l ici\n                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash\n                // on pourrait meme remplacer la boucle suivante\n                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction\n                    // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        // pourquoi etats_preced alors qu'en bas on met un get(i)???\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR\n                config.add(0,hash.get(key).toString());\n//                config.add(1,hash.get(key));\n                config.add(1,key);\n                hashToList.add(config);\n                etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
----- a/src/main/java/Automates.java	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
--+++ b/src/main/java/Automates.java	(date 1615501227280)
--@@ -74,7 +74,7 @@
--     // ALGORITHMES
-- 
--     public void determiniser(){
---        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )
--+
--         Queue<List> file_etat_cree = new LinkedList<List>();
--         List debut = new ArrayList();
--         debut.add(this.getEtatDepart().getNom());
--@@ -87,21 +87,14 @@
--             Etats etat = new Etats();
--             // concatener les etats groupés : à définir
--             etat.setNom(etats_preced.toString());
---            // contient les colonnes du tableau
--             HashMap<String,List> hash = new HashMap<String,List>();
-- 
--             for(int i =0;i<etats_preced.size();i++){
---                // on pourrait declarer l ici
---                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash
---                // on pourrait meme remplacer la boucle suivante
---                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates
--                 for (int j=0;j<this.alphabet.size();j++){
---                    //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction
---                    // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur
--+                    //verifier cette ligne
--                     if (hash.containsKey(this.alphabet.get(j))){
--                         // l'idée est là
--                         List l = (List)hash.get(this.alphabet.get(j));
---                        // pourquoi etats_preced alors qu'en bas on met un get(i)???
--                         l.add(etats_preced);
--                         hash.put(this.alphabet.get(j),l);
--                     } else {
--@@ -114,17 +107,14 @@
--             }
--             System.out.println(hash);
--             // à revoir
---            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation
--             ArrayList hashToList = new ArrayList();
--             for(String key: hash.keySet()){
--                 file_etat_cree.add(hash.get(key));
--                 ArrayList config = new ArrayList();
---                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR
--                 config.add(0,hash.get(key).toString());
---//                config.add(1,hash.get(key));
---                config.add(1,key);
---                hashToList.add(config);
---                etat.setTransitions(hashToList);
--+               config.add(1,hash.get(key));
--+               hashToList.add(config);
--+               etat.setTransitions(hashToList);
--             }
--         }
-- 
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
--+++ b/.idea/workspace.xml	(date 1615501227340)
--@@ -4,13 +4,12 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
--+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
--     </list>
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--@@ -27,12 +26,25 @@
--   <component name="Git.Settings">
--     <option name="RECENT_BRANCH_BY_REPOSITORY">
--       <map>
---        <entry key="$PROJECT_DIR$" value="main" />
--+        <entry key="$PROJECT_DIR$" value="imadhou00" />
--       </map>
--     </option>
--     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
--+    <option name="RESET_MODE" value="MIXED" />
--+    <option name="UPDATE_TYPE" value="REBASE" />
--+  </component>
--+  <component name="GitSEFilterConfiguration">
--+    <file-type-list>
--+      <filtered-out-file-type name="LOCAL_BRANCH" />
--+      <filtered-out-file-type name="REMOTE_BRANCH" />
--+      <filtered-out-file-type name="TAG" />
--+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
--+    </file-type-list>
--   </component>
--   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
--+  <component name="ProjectLevelVcsManager">
--+    <ConfirmationsSetting value="2" id="Add" />
--+  </component>
--   <component name="ProjectViewState">
--     <option name="hideEmptyMiddlePackages" value="true" />
--     <option name="showLibraryContents" value="true" />
--@@ -42,15 +54,22 @@
--     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--     <property name="WebServerToolWindowFactoryState" value="false" />
--     <property name="aspect.path.notification.shown" value="true" />
---    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
--     <property name="node.js.detected.package.eslint" value="true" />
--     <property name="node.js.detected.package.tslint" value="true" />
--     <property name="node.js.path.for.package.eslint" value="project" />
--     <property name="node.js.path.for.package.tslint" value="project" />
--     <property name="node.js.selected.package.eslint" value="(autodetect)" />
--     <property name="node.js.selected.package.tslint" value="(autodetect)" />
--+    <property name="nodejs_package_manager_path" value="npm" />
--   </component>
---  <component name="RunManager">
--+  <component name="RunManager" selected="Application.JsonDeal">
--+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="Images" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
--       <module name="Automates" />
--@@ -58,13 +77,16 @@
--         <option name="Make" enabled="true" />
--       </method>
--     </configuration>
---    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
---      <option name="arquillianRunConfiguration">
---        <value>
---          <option name="containerStateName" value="" />
---        </value>
---      </option>
---      <option name="TEST_OBJECT" value="class" />
--+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
--+      <module name="Automates" />
--       <method v="2">
--         <option name="Make" enabled="true" />
--       </method>
--@@ -72,6 +94,10 @@
--     <recent_temporary>
--       <list>
--         <item itemvalue="Application.JsonDeal" />
--+        <item itemvalue="Application.TraitementTransitions" />
--+        <item itemvalue="Application.JsonTpGv" />
--+        <item itemvalue="Application.Images" />
--+        <item itemvalue="Application.JsonDeal" />
--       </list>
--     </recent_temporary>
--   </component>
--@@ -84,7 +110,15 @@
--       <option name="presentableId" value="Default" />
--       <updated>1613827742264</updated>
--       <workItem from="1613827744292" duration="363000" />
---      <workItem from="1613828133950" duration="3761000" />
--+      <workItem from="1613828133950" duration="1228000" />
--+      <workItem from="1614112267934" duration="567000" />
--+      <workItem from="1614337229980" duration="26000" />
--+      <workItem from="1614340764665" duration="8758000" />
--+      <workItem from="1614724089267" duration="43000" />
--+      <workItem from="1614948823465" duration="12413000" />
--+      <workItem from="1615029847548" duration="3790000" />
--+      <workItem from="1615067606138" duration="15975000" />
--+      <workItem from="1615500735341" duration="394000" />
--     </task>
--     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
--       <created>1613828472218</created>
--@@ -93,14 +127,28 @@
--       <option name="project" value="LOCAL" />
--       <updated>1613828472218</updated>
--     </task>
---    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
---      <created>1613832695232</created>
--+    <task id="LOCAL-00002" summary="Tout est bien">
--+      <created>1614052026476</created>
--       <option name="number" value="00002" />
--       <option name="presentableId" value="LOCAL-00002" />
--       <option name="project" value="LOCAL" />
---      <updated>1613832695232</updated>
--+      <updated>1614052026476</updated>
--+    </task>
--+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
--+      <created>1614052212166</created>
--+      <option name="number" value="00003" />
--+      <option name="presentableId" value="LOCAL-00003" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614052212166</updated>
--+    </task>
--+    <task id="LOCAL-00004" summary="0.1">
--+      <created>1614171320903</created>
--+      <option name="number" value="00004" />
--+      <option name="presentableId" value="LOCAL-00004" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614171320903</updated>
--     </task>
---    <option name="localTasksCounter" value="3" />
--+    <option name="localTasksCounter" value="5" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -111,7 +159,34 @@
--       <map>
--         <entry key="MAIN">
--           <value>
---            <State />
--+            <State>
--+              <option name="FILTERS">
--+                <map>
--+                  <entry key="branch">
--+                    <value>
--+                      <list>
--+                        <option value="imadhou00" />
--+                      </list>
--+                    </value>
--+                  </entry>
--+                </map>
--+              </option>
--+            </State>
--+          </value>
--+        </entry>
--+      </map>
--+    </option>
--+    <option name="RECENT_FILTERS">
--+      <map>
--+        <entry key="Branch">
--+          <value>
--+            <list>
--+              <RecentGroup>
--+                <option name="FILTER_VALUES">
--+                  <option value="HEAD" />
--+                </option>
--+              </RecentGroup>
--+            </list>
--           </value>
--         </entry>
--       </map>
--@@ -120,7 +195,28 @@
--   </component>
--   <component name="VcsManagerConfiguration">
--     <MESSAGE value="Ghilas commited les classes eni" />
---    <MESSAGE value="Ghilas commited a new version with new transitions" />
---    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
--+    <MESSAGE value="Tout est bien" />
--+    <MESSAGE value="Final push a propos de JSONDEAL" />
--+    <MESSAGE value="0.1" />
--+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
--+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
--+  </component>
--+  <component name="XDebuggerManager">
--+    <breakpoint-manager>
--+      <breakpoints>
--+        <breakpoint enabled="true" type="java-exception">
--+          <properties class="java.util.EmptyStackException" package="java.util" />
--+          <option name="timeStamp" value="11" />
--+        </breakpoint>
--+      </breakpoints>
--+      <default-breakpoints>
--+        <breakpoint enabled="true" type="java-exception" />
--+      </default-breakpoints>
--+    </breakpoint-manager>
--+    <watches-manager>
--+      <configuration name="Application">
--+        <watch expression="a" language="JAVA" />
--+      </configuration>
--+    </watches-manager>
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,14 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]" date="1615500775137" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 11/03/2021 23:12 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
--    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/JsonDeal.class" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="target/classes/Automates.class" />
--    <option name="AFTER_PATH" value="target/classes/Automates.class" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/Automates.class" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ /dev/null	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-@@ -1,1033 +0,0 @@
--Index: src/main/java/JsonDeal.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
----- a/src/main/java/JsonDeal.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/src/main/java/JsonDeal.java	(date 1615500832973)
--@@ -9,6 +9,7 @@
-- import java.util.*;
-- 
-- public class JsonDeal {
--+     int i =0;
-- 
-- 
--     /*
--@@ -16,11 +17,6 @@
--     d'etats, le nombre de transitions, une liste d'alphabet
--      */
-- 
---    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
---
---        return null;
---    }
---
--     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
--         Random random = new Random();
-- 
--@@ -247,295 +243,22 @@
-- 
-- 
--     public static void main(String[] args) {
---//        JsonDeal jsonDeal= new JsonDeal();
---//        Automates a = jsonDeal.json_to_automate("test.json");
---//        jsonDeal.automate_to_json(a);
---
---        ArrayList transition = new ArrayList();
---
---        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
---
---        // creation q1
---        ArrayList transition1 = new ArrayList();
---        transition1.add("1");
---        transition1.add("a");
---        ArrayList transition2 = new ArrayList();
---        transition2.add("2");
---        transition2.add("a");
---        Etats q1 = new Etats();
---        q1.setNom("1");
---        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
---        q1_transitions = new ArrayList<ArrayList<String>>();
---        q1_transitions.add(transition1);
---        q1_transitions.add(transition2);
---        q1.setTransitions(q1_transitions);
--+        JsonDeal jsonDeal= new JsonDeal();
-- 
---        // creation q2
---        ArrayList transition3 = new ArrayList();
---        transition3.add("3");
---        transition3.add("@");
---        Etats q2 = new Etats();
---        q2.setNom("2");
---        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
---        q2_transitions.add(transition3);
---        q2.setTransitions(q2_transitions);
-- 
---        // creation q3
---        ArrayList transition4 = new ArrayList();
---        transition4.add("3");
---        transition4.add("a");
---        ArrayList transition5 = new ArrayList();
---        transition5.add("4");
---        transition5.add("a");
---        Etats q3 = new Etats();
---        q3.setNom("3");
---        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
---        q3_transitions.add(transition4);
---        q3_transitions.add(transition5);
---        q3.setTransitions(q3_transitions);
--+        Automates a = jsonDeal.json_to_automate("test.json");
-- 
---        // creation q4
---        ArrayList transition6 = new ArrayList();
---        transition6.add("5");
---        transition6.add(".");
---        Etats q4 = new Etats();
---        q4.setNom("4");
---        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
---        q4_transitions.add(transition6);
---        q4.setTransitions(q4_transitions);
-- 
---        // creation q5
---        ArrayList transition7 = new ArrayList();
---        transition7.add("5");
---        transition7.add("a");
---        ArrayList transition8 = new ArrayList();
---        transition8.add("6");
---        transition8.add("a");
---        Etats q5 = new Etats();
---        q5.setNom("5");
---        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
---        q5_transitions.add(transition7);
---        q5_transitions.add(transition8);
---        q5.setTransitions(q5_transitions);
--+        String s = "((a+(b.b))*.(b+(a.a))*)";
--+        String[] ss = {"a", "b", "c"};
-- 
---        //q6
--+        Automates bb = a.thompson(s,ss);
-- 
---        Etats q6 = new Etats();
---        q6.setNom("6");
---        q6.setTransitions(null);
--+        System.out.println(jsonDeal.automate_to_json(bb));
--+        Images i = new Images();
--+        i.jsonToDot("test.json", "hh2.dot");
--+        bb.synch3();
-- 
---        ArrayList<Etats> arrivee = new ArrayList<Etats>();
---        arrivee.add(q6);
---        ArrayList<Etats> etats = new ArrayList<Etats>();
---        etats.add(q1);
---        etats.add(q2);
---        etats.add(q3);
---        etats.add(q4);
---        etats.add(q5);
---        etats.add(q6);
---        ArrayList<String> alphabet = new ArrayList<String>();
---        alphabet.add("a");
---        alphabet.add("@");
---        alphabet.add(".");
---        Automates a = new Automates(q1,arrivee,etats,alphabet);
---        a.determiniser();
---//        System.out.println(a.getAlphabet());
---////        System.out.println(a.getEtats());
---//        for(int i=0;i<a.getEtats().size();i++) {
---//            System.out.println(a.getEtats().get(i).getNom());
---//            System.out.println(a.getEtats().get(i).getTransitions());
---//        }
---//        System.out.println(a.getEtatDepart());
---//        System.out.println(a.getEtatsArrivee());
---//        System.out.println(a.getEtats().get(0).getTransitions());
---
---//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
---//        ArrayList<String> str = new ArrayList<String>();
---//        str.add("3");
---//        str.add("a");
---//        listOfLists.add(str);
---//        ArrayList<String> str2 = new ArrayList<String>();
---//        str2.add("1");
---//        str2.add("g");
---//        listOfLists.add(str2);
---//        System.out.println(listOfLists);
---
---
---        // determinaison
---//        System.out.println(a.getEtats().get());
---        // contient les transitions finales à inserer dans les grpEtats
---//        ArrayList grpTransitions = new ArrayList();
---//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
---//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
---//        // contient les etat à inserer dans l'automate final deteminisé
---//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
---//        Etats e = new Etats();
---//        e.setNom(a.getEtatDepart().getNom());
---//        grpEtats.add(e);
---//        // on parcourt les etats de a
---//        for(int i=0;i<a.getEtats().size();i++){
---//            // contient les transition de l'etat i
---//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
---//            int size = 0;
---//            if (transitions_etat == null)
---//                size = 0;
---//            else
---//                size = transitions_etat.size();
---//            // parcourt les transitions de l"etat i
---//            for(int j=0;j<size;j++){
---//                if (transitions_etat.get(j) != null) {
---//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
---//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
---//                    //System.out.println(tr.get(1));
---//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
---//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
---//                    // a partir de cette liste on creera les etats
---//                    boolean exist = false;
---//                    if(grpTransitionsTemp != null) {
---//                        // parcourt les transitions temporaires
---//                        for(int k=0;k<grpTransitionsTemp.size();k++){
---//                            String str = grpTransitionsTemp.get(k);
---//                            String alph_etat[] = str.split(":");
---////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
---//                            // ajouter un nouvel etat au groupe d'etat
---//                            if (tr.get(1).equals(alph_etat[0])){
---////                                System.out.println(alph_etat[1]);
---//                                // ici erreur :
---//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
---//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
---//                                // les deux prochaines lignes devraient etre correctes ???
---//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
---//
---//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
---//                                // le a va bel et bien vers 1,2,3,4,5,6
---//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
---//                                // determiner le depart des arcs
---//                                String temp =alph_etat[0]+":"+alph_etat[1];
---//                                grpTransitionsTemp.set(k,temp);
---////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
---//                                exist = true;
---//                            }
---//                        }
---//
---//                    }
---//                    // creation d'une transition pour un group d'etat
---//                    if (!exist){
---//                        String str = tr.get(1)+":"+tr.get(0);
---//                        grpTransitionsTemp.add(str);
---//                    }
---//                }
---//            }
---//            for(int g=0;g<grpEtats.size();g++)
---//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
---//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
---//            // ici generer grpTransitions
---//
---//            System.out.println("fin du parcours de l'etat "+(i+1));
---//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
---//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
---//            int s;
---//            if(grpTransitionsTemp!=null) {
---//                s = grpTransitionsTemp.size();
---//            }else {
---//                s = 0;
---//            }
---//                for (int x = 0; x < s; x++) {
---//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
---////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
---//                    if (grpEtats.contains(alph_etat[1])) {
---//
---//                    } else {
---//                        Etats et = new Etats();
---//                        et.setNom(alph_etat[1]);
---//                        // la partie suivante pourra etre ajoutée à une autre boucle
---//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
---////                        ArrayList<String> trns = new ArrayList<String>();
---////                        trns.add()
---////                        et.getTransitions().add();
---//                        grpEtats.add(et);
---//                    }
---//                }
---//                // ici former grpTransitions
---//            grpTransitions.add(String.valueOf(i));
---//            grpTransitions.add(grpTransitionsTemp);
---//            // ICI PPROBLEME
---//            // grpTransitionTemp est vide????
---//            System.out.println("voila "+grpTransitions);
---//            grpTransitionsTemp.clear();
---//
---//        }
---//            // parcours de grpEtat ( pour le depart )
---//            for(int j=0;j<grpEtats.size();j++){
---//                String etat[] = grpEtats.get(j).getNom().split(",");
---//                // on recupere les etats du grpEtat ( depart )
---//                for (int y=0;y<etat.length;y++){
---//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
---//                    for (int i=0;i<a.getEtats().size();i++) {
---//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
---//                            // ajouter les transitions de l'etat i de l'automate non deterministe
---//                            if(a.getEtats().get(i).getTransitions()!=null){
---//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
---//                                //grpetat pour les arrivées
---//                                for (int l = 0; l < grpEtats.size(); l++) {
---//                                    // etat1 contient les etats d'arrivée à tester
---//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
---//                                    for (int g = 0; g < etat1.length; g++) {
---//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
---//                                        if (ltr.get(0).equals(etat1[g])) {
---//                                            boolean trouve = false;
---//                                            // verfie si on a déja ajouté la transition
---//                                            if (grpEtats.get(j).getTransitions() != null) {
---//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
---//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
---//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
---//                                                        trouve = true;
---//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
---//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
---//                                                    }
---//                                                }
---//                                            }
---//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
---//                                            if (!trouve) {
---//                                                ArrayList<String> al = new ArrayList<String>();
---//                                                // cette ligne a un probleme
---//                                                al.add(grpEtats.get(l).getNom());
---//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
---//                                                if (grpEtats.get(j).getTransitions() != null) {
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//                                                } else {
---//                                                    // à regler le cas ou les transitions sont vides
---////                                                grpEtats.get(j).getTransitions() = new ArrayList();
---//                                                    grpEtats.get(j).setTransitions(new ArrayList());
---//                                                    grpEtats.get(j).getTransitions().add(al);
---//
---//                                                }
---//
---//                                        }
---//                                        }
---//                                    }
---//                                }
---//                            }
---//                        }
---//                        }
---//                    }
---//                }
---//            }
---//
---//        System.out.println(grpTransitionsTemp);
---//            for (int i=0;i<grpEtats.size();i++){
---//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
---//            }
---//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
---
---//        List<List> lists = new ArrayList<List>();
---//        for (int i = 0; i < 4; i++) {
---//            List list = new ArrayList();
---//            list.add(i);
---//            list.add("a");
---//            lists.add(list);
---//            // Use the list further...
---//        }
---//        System.out.println(lists);
-- 
-- 
--     }
--Index: src/main/java/Automates.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                config.add(0,hash.get(key).toString());\n               config.add(1,hash.get(key));\n               hashToList.add(config);\n               etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
----- a/src/main/java/Automates.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/src/main/java/Automates.java	(date 1615500833025)
--@@ -1,15 +1,22 @@
---import java.util.*;
---import java.util.concurrent.ArrayBlockingQueue;
--+//
--+// Source code recreated from a .class file by IntelliJ IDEA
--+// (powered by FernFlower decompiler)
--+//
--+
--+import java.util.ArrayList;
--+import java.util.List;
--+import java.util.Stack;
-- 
-- public class Automates {
---
--+    Stack<String> automates = new Stack();
--     private Etats etatDepart;
---    private List<Etats> etatsArrivee,etats;
--+    private List<Etats> etatsArrivee;
--+    private List<Etats> etats;
--     private List<String> alphabet;
-- 
---    public Automates(){
---
--+    public Automates() {
--     }
--+
--     public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {
--         this.etatDepart = etatDepart;
--         this.etatsArrivee = etatsArrivee;
--@@ -18,7 +25,7 @@
--     }
-- 
--     public Etats getEtatDepart() {
---        return etatDepart;
--+        return this.etatDepart;
--     }
-- 
--     public void setEtatDepart(Etats etatDepart) {
--@@ -26,7 +33,7 @@
--     }
-- 
--     public List<Etats> getEtatsArrivee() {
---        return etatsArrivee;
--+        return this.etatsArrivee;
--     }
-- 
--     public void setEtatsArrivee(List<Etats> etatsArrivee) {
--@@ -34,7 +41,7 @@
--     }
-- 
--     public List<Etats> getEtats() {
---        return etats;
--+        return this.etats;
--     }
-- 
--     public void setEtats(List<Etats> etats) {
--@@ -42,82 +49,339 @@
--     }
-- 
--     public List<String> getAlphabet() {
---        return alphabet;
--+        return this.alphabet;
--     }
-- 
--     public void setAlphabet(List<String> alphabet) {
--         this.alphabet = alphabet;
--     }
-- 
---    // ALGORITHMES UTILES
---
---
---    public void toMatrice(){
---        //  TO DO
--+    public void toMatrice() {
--     }
---
---    public String concatener(List etatsG){
---        if(etats == null) return "";
---        else {
---            String str = "";
---            for(int a=0;a<etatsG.size();a++){
---                if ( a == 0 ){
---                    str = (String) etatsG.get(a);
---                }else {
---                    str = str + "," + (String) etatsG.get(a);
---                }
---            }
---            return str;
---        }
---    }
---
---    // ALGORITHMES
-- 
---    public void determiniser(){
--+    public void determiniser() {
--+    }
--+
--+
--+
--+    boolean presentIn(char mot, String[] alphabet) {
--+        boolean not_preset = true;
--+
--+        for(int i = 0; i < alphabet.length; ++i) {
--+            if (alphabet[i].equals(String.valueOf(mot))) {
--+                return false;
--+            }
--+        }
--+
--+        return true;
--+    }
--+
--+    public Automates thompson(String expression, String[] alpha) {
--+        Stack<Automates> pileA = new Stack();
--+        Stack<Character> pileM = new Stack();
--+        int etati = 0;
--+
--+
--+        for(int i = 0; i < expression.length(); ++i) {
--+            Automates ap;
--+            ArrayList apEtats;
--+
--+            /* cas ou c est un charactere de l alphabet */
--+            if (!this.presentIn(expression.charAt(i), alpha)) {
--+                ap = new Automates();
--+                Etats etd = new Etats();
--+                etd.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etf = new Etats();
--+                etf.setNom(String.valueOf(etati));
--+                ++etati;
--+                ArrayList<String> config = new ArrayList();
--+                config.add(etf.getNom());
--+                config.add(String.valueOf(expression.charAt(i)));
--+                ArrayList trs = new ArrayList();
--+                ArrayList trs1 = new ArrayList();
--+                etf.setTransitions(trs);
--+                trs1.add(config);
--+                etd.setTransitions(trs1);
--+                List<Etats> etfs = new ArrayList();
--+                etfs.add(etf);
--+                List<String> al = this.alphabet;
--+                apEtats = new ArrayList();
--+                apEtats.add(etd);
--+                apEtats.add(etf);
--+                ap.setAlphabet(al);
--+                ap.setEtats(apEtats);
--+                ap.setEtatsArrivee(etfs);
--+                ap.setEtatDepart(etd);
--+                pileA.push(ap);
--+            }
--+
--+            if (expression.charAt(i) == '(') {
--+                System.out.println("(");
--+            }
--+
--+            if (expression.charAt(i) == '.') {
--+                pileM.push('.');
--+                System.out.println(".");
--+            }
--+
--+            if (expression.charAt(i) == '+') {
--+                pileM.push('+');
--+                System.out.println("+");
--+            }
--+
--+            ArrayList config1;
--+            ArrayList config2;
--+            ArrayList trF;
--+            String ed1;
--+            if (expression.charAt(i) == '*') {
--+                System.out.println("*");
--+                ap = (Automates)pileA.pop();
--+                Automates a = new Automates();
--+                new ArrayList();
--+                List<Etats> etats = ap.getEtats();
--+                String ed = ap.getEtatDepart().getNom();
--+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
--+                Etats etatD = new Etats();
--+                etatD.setNom(String.valueOf(etati));
--+                ++etati;
--+                Etats etatF = new Etats();
--+                etatF.setNom(String.valueOf(etati));
--+                ArrayList etfss = new ArrayList();
--+                etatF.setTransitions(etfss);
--+                ++etati;
--+                apEtats = new ArrayList();
--+                apEtats.add(etatF);
--+                ArrayList trD = new ArrayList();
--+                config1 = new ArrayList();
--+                config1.add(etatF.getNom());
--+                config1.add("eps");
--+                trD.add(config1);
--+                config2 = new ArrayList();
--+                config2.add(ed);
--+                config2.add("eps");
--+                trD.add(config2);
--+                etatD.setTransitions(trD);
--+
--+                for(int j = 0; j < etats.size(); ++j) {
--+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(etatF.getNom());
--+                        config3.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(config3);
--+                        trF = new ArrayList();
--+                        trF.add(ed);
--+                        trF.add("eps");
--+                        ((Etats)etats.get(j)).getTransitions().add(trF);
--+                    }
--+                }
--+
--+                etats.add(etatD);
--+                etats.add(etatF);
--+                a.setEtatsArrivee(apEtats);
--+                a.setEtats(etats);
--+                a.setEtatDepart(etatD);
--+                a.setAlphabet(ap.getAlphabet());
--+                pileA.push(a);
--+            }
--+
--+            if (expression.charAt(i) == ')') {
--+                System.out.println(")");
--+                ap = new Automates();
--+                char exp = (Character)pileM.pop();
--+                Automates ap2 = (Automates)pileA.pop();
--+                Automates ap1 = (Automates)pileA.pop();
--+                ed1 = ap1.getEtatDepart().getNom();
--+                String ed2 = ap2.getEtatDepart().getNom();
--+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
--+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
--+                ap.setAlphabet(ap2.getAlphabet());
--+                apEtats = new ArrayList();
--+
--+                int j;
--+                for(j = 0; j < ap1.getEtats().size(); ++j) {
--+                    apEtats.add(ap1.getEtats().get(j));
--+                }
--+
--+                for(j = 0; j < ap2.getEtats().size(); ++j) {
--+                    apEtats.add(ap2.getEtats().get(j));
--+                }
--+
--+                ap.setEtats(apEtats);
--+                switch(exp) {
--+                    case '+':
--+                        Etats etatsD = new Etats();
--+                        etatsD.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        config1 = new ArrayList();
--+                        config1.add(String.valueOf(ed1));
--+                        config1.add("eps");
--+                        config2 = new ArrayList();
--+                        config2.add(String.valueOf(ed2));
--+                        config2.add("eps");
--+                        ArrayList trD = new ArrayList();
--+                        trD.add(config1);
--+                        trD.add(config2);
--+                        etatsD.setTransitions(trD);
--+                        ap.getEtats().add(etatsD);
--+                        Etats etatsF = new Etats();
--+                        etatsF.setNom(String.valueOf(etati));
--+                        ++etati;
--+                        trF = new ArrayList();
--+                        etatsF.setTransitions(trF);
--+                        ap.getEtats().add(etatsF);
--+                        ArrayList<String> config3 = new ArrayList();
--+                        config3.add(String.valueOf(etatsF.getNom()));
--+                        config3.add("eps");
--+                        ArrayList<String> config4 = new ArrayList();
--+                        config4.add(String.valueOf(etatsF.getNom()));
--+                        config4.add("eps");
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
--+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
--+                        List<Etats> efs = new ArrayList();
--+                        efs.add(etatsF);
--+                        ap.setEtatDepart(etatsD);
--+                        ap.setEtatsArrivee(efs);
--+                        pileA.push(ap);
--+                        break;
--+                    case '.':
--+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
--+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
--+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
--+                        ap.getEtats().remove(indiceD2);
--+                        ap.setEtatDepart(ap1.getEtatDepart());
--+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
--+                        pileA.push(ap);
--+                }
--+            }
--+        }
--+
--+        return (Automates)pileA.pop();
--+    }
--+
--+
--+
--+    public int get_etat(Automates automates, String nom) {
--+        for(int i = 0; i < automates.getEtats().size(); ++i) {
--+            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {
--+                return i;
--+            }
--+        }
--+
--+        return -1;
--+    }
--+
--+
--+
--+
--+    public void synch3(){
--+
--+        List<Etats> etats = this.getEtats();
--+
--+        /* etape1 : calcule des eps-transitivitées */
--+        for (int i = 0; i < etats.size(); i++){
--+            Etats etat0 = etats.get(i);
--+            for (int j = 0; j < etat0.getTransitions().size(); j++){
--+                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);
--+                if (config0.get(1) == "eps"){
--+                    int et = this.get_etat(this, config0.get(0).toString());
--+
--+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
--+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){
--+                            this.getEtatsArrivee().add(etat0);
--+                        }
--+                    }
--+                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){
--+                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);
--+                        if (config1.get(1) == "eps"){
--+                            etat0.getTransitions().add(config1);
--+                        }
--+                    }
--+                }
--+            }
--+        }
--+
--+        /* etape 2 calcule des transitivités sans epsilons */
--+        for (int i = 0; i < etats.size(); i++){
--+            Etats etat_courant = etats.get(i);
--+
--+            for (int j = 0; j < etat_courant.getTransitions().size(); j++){
--+                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);
--+                if (config.get(1) == "eps"){
--+                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));
--+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
--+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){
--+                            this.getEtatsArrivee().add(etat_courant);
--+                        }
--+                    }
--+
--+                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){
--+                        ArrayList trans = etat_inter.getTransitions();
--+                        for (int s = 0; s < trans.size(); s++){
--+                            ArrayList config1 = (ArrayList) trans.get(s);
--+                            if (config1.get(1) != "eps"){
--+                                etat_courant.getTransitions().add(config1);
--+                            }
--+                        }
--+                    }
--+                }
--+            }
--+        }
-- 
---        Queue<List> file_etat_cree = new LinkedList<List>();
---        List debut = new ArrayList();
---        debut.add(this.getEtatDepart().getNom());
---        file_etat_cree.add(debut);
-- 
---        while (file_etat_cree.size()!=0){
---            List etats_preced = file_etat_cree.poll();
---//            file_etat_cree.remove(etats_preced);
---//            System.out.println(file_etat_cree);
---            Etats etat = new Etats();
---            // concatener les etats groupés : à définir
---            etat.setNom(etats_preced.toString());
---            HashMap<String,List> hash = new HashMap<String,List>();
--+        /* etape 3 : suppression des eps-transitions */
--+        for ( int i = 0 ; i < this.getEtats().size(); i++){
--+            ArrayList trs = new ArrayList();
--+            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){
--+                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);
--+                if(a.get(1) != "eps"){
--+                    if ( ! trs.contains(a)){
--+                        trs.add(a);
--+                    }
--+                }
--+            }
--+            this.getEtats().get(i).setTransitions(trs);
--+        }
-- 
---            for(int i =0;i<etats_preced.size();i++){
---                for (int j=0;j<this.alphabet.size();j++){
---                    //verifier cette ligne
---                    if (hash.containsKey(this.alphabet.get(j))){
---                        // l'idée est là
---                        List l = (List)hash.get(this.alphabet.get(j));
---                        l.add(etats_preced);
---                        hash.put(this.alphabet.get(j),l);
---                    } else {
---                        //ici ce sera le nom de l'etat i qui nous sera utile
---                        List l = new ArrayList();
---                        l.add(etats_preced.get(i));
---                        hash.put(this.alphabet.get(j),l);
--+        /* etape 4: suppression des etats non accessibles et des transitions double */
--+        ArrayList<String> etats_acce = new ArrayList<String>();
--+        for (int i = 0; i < this.getEtats().size(); i++){
--+            String nom = this.getEtats().get(i).getNom();
--+            for (int j = 0; j < this.getEtats().size(); j++){
--+                ArrayList transitions = this.getEtats().get(j).getTransitions();
--+                for ( int k = 0; k < transitions.size(); k++){
--+                    ArrayList conf = (ArrayList) transitions.get(k);
--+                    if (conf.get(0) == nom){
--+                        etats_acce.add(nom);
--                     }
--                 }
--             }
---            System.out.println(hash);
---            // à revoir
---            ArrayList hashToList = new ArrayList();
---            for(String key: hash.keySet()){
---                file_etat_cree.add(hash.get(key));
---                ArrayList config = new ArrayList();
---                config.add(0,hash.get(key).toString());
---               config.add(1,hash.get(key));
---               hashToList.add(config);
---               etat.setTransitions(hashToList);
--+            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){
--+                etats_acce.add(this.getEtats().get(i).getNom());
--             }
--         }
--+
--+
--+        /* definition des nouveaux etats */
--+        ArrayList<Etats> etts = new ArrayList<Etats>();
--+        for (int i = 0; i < this.getEtats().size(); i++){
--+            if (etats_acce.contains(this.getEtats().get(i).getNom())){
--+                etts.add(this.getEtats().get(i));
--+            }
--+        }
--+        this.setEtats(etts);
-- 
---    }
--+        /* definition des nouveaux etats finaux */
--+        ArrayList<Etats> arr = new ArrayList<Etats>();
--+        for (int i = 0; i < this.getEtatsArrivee().size(); i++){
--+            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){
--+                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));
--+                if (!arr.contains(ett)){
--+                    arr.add(ett);
--+                }
--+            }
--+        }
--+        this.setEtatsArrivee(arr);
-- 
--+    }
-- }
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
--+++ b/.idea/workspace.xml	(date 1615501129147)
--@@ -4,13 +4,12 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
--+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
--       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
--+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
--     </list>
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--@@ -27,12 +26,25 @@
--   <component name="Git.Settings">
--     <option name="RECENT_BRANCH_BY_REPOSITORY">
--       <map>
---        <entry key="$PROJECT_DIR$" value="main" />
--+        <entry key="$PROJECT_DIR$" value="imadhou00" />
--       </map>
--     </option>
--     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
--+    <option name="RESET_MODE" value="MIXED" />
--+    <option name="UPDATE_TYPE" value="REBASE" />
--+  </component>
--+  <component name="GitSEFilterConfiguration">
--+    <file-type-list>
--+      <filtered-out-file-type name="LOCAL_BRANCH" />
--+      <filtered-out-file-type name="REMOTE_BRANCH" />
--+      <filtered-out-file-type name="TAG" />
--+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
--+    </file-type-list>
--   </component>
--   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
--+  <component name="ProjectLevelVcsManager">
--+    <ConfirmationsSetting value="2" id="Add" />
--+  </component>
--   <component name="ProjectViewState">
--     <option name="hideEmptyMiddlePackages" value="true" />
--     <option name="showLibraryContents" value="true" />
--@@ -42,15 +54,22 @@
--     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--     <property name="WebServerToolWindowFactoryState" value="false" />
--     <property name="aspect.path.notification.shown" value="true" />
---    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
--     <property name="node.js.detected.package.eslint" value="true" />
--     <property name="node.js.detected.package.tslint" value="true" />
--     <property name="node.js.path.for.package.eslint" value="project" />
--     <property name="node.js.path.for.package.tslint" value="project" />
--     <property name="node.js.selected.package.eslint" value="(autodetect)" />
--     <property name="node.js.selected.package.tslint" value="(autodetect)" />
--+    <property name="nodejs_package_manager_path" value="npm" />
--   </component>
---  <component name="RunManager">
--+  <component name="RunManager" selected="Application.JsonDeal">
--+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="Images" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
--       <module name="Automates" />
--@@ -58,13 +77,16 @@
--         <option name="Make" enabled="true" />
--       </method>
--     </configuration>
---    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
---      <option name="arquillianRunConfiguration">
---        <value>
---          <option name="containerStateName" value="" />
---        </value>
---      </option>
---      <option name="TEST_OBJECT" value="class" />
--+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
--+      <module name="Automates" />
--+      <method v="2">
--+        <option name="Make" enabled="true" />
--+      </method>
--+    </configuration>
--+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
--+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
--+      <module name="Automates" />
--       <method v="2">
--         <option name="Make" enabled="true" />
--       </method>
--@@ -72,6 +94,10 @@
--     <recent_temporary>
--       <list>
--         <item itemvalue="Application.JsonDeal" />
--+        <item itemvalue="Application.TraitementTransitions" />
--+        <item itemvalue="Application.JsonTpGv" />
--+        <item itemvalue="Application.Images" />
--+        <item itemvalue="Application.JsonDeal" />
--       </list>
--     </recent_temporary>
--   </component>
--@@ -84,7 +110,15 @@
--       <option name="presentableId" value="Default" />
--       <updated>1613827742264</updated>
--       <workItem from="1613827744292" duration="363000" />
---      <workItem from="1613828133950" duration="3761000" />
--+      <workItem from="1613828133950" duration="1228000" />
--+      <workItem from="1614112267934" duration="567000" />
--+      <workItem from="1614337229980" duration="26000" />
--+      <workItem from="1614340764665" duration="8758000" />
--+      <workItem from="1614724089267" duration="43000" />
--+      <workItem from="1614948823465" duration="12413000" />
--+      <workItem from="1615029847548" duration="3790000" />
--+      <workItem from="1615067606138" duration="15975000" />
--+      <workItem from="1615500735341" duration="394000" />
--     </task>
--     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
--       <created>1613828472218</created>
--@@ -93,14 +127,28 @@
--       <option name="project" value="LOCAL" />
--       <updated>1613828472218</updated>
--     </task>
---    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
---      <created>1613832695232</created>
--+    <task id="LOCAL-00002" summary="Tout est bien">
--+      <created>1614052026476</created>
--       <option name="number" value="00002" />
--       <option name="presentableId" value="LOCAL-00002" />
--       <option name="project" value="LOCAL" />
---      <updated>1613832695232</updated>
--+      <updated>1614052026476</updated>
--+    </task>
--+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
--+      <created>1614052212166</created>
--+      <option name="number" value="00003" />
--+      <option name="presentableId" value="LOCAL-00003" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614052212166</updated>
--+    </task>
--+    <task id="LOCAL-00004" summary="0.1">
--+      <created>1614171320903</created>
--+      <option name="number" value="00004" />
--+      <option name="presentableId" value="LOCAL-00004" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1614171320903</updated>
--     </task>
---    <option name="localTasksCounter" value="3" />
--+    <option name="localTasksCounter" value="5" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -111,7 +159,34 @@
--       <map>
--         <entry key="MAIN">
--           <value>
---            <State />
--+            <State>
--+              <option name="FILTERS">
--+                <map>
--+                  <entry key="branch">
--+                    <value>
--+                      <list>
--+                        <option value="imadhou00" />
--+                      </list>
--+                    </value>
--+                  </entry>
--+                </map>
--+              </option>
--+            </State>
--+          </value>
--+        </entry>
--+      </map>
--+    </option>
--+    <option name="RECENT_FILTERS">
--+      <map>
--+        <entry key="Branch">
--+          <value>
--+            <list>
--+              <RecentGroup>
--+                <option name="FILTER_VALUES">
--+                  <option value="HEAD" />
--+                </option>
--+              </RecentGroup>
--+            </list>
--           </value>
--         </entry>
--       </map>
--@@ -120,7 +195,28 @@
--   </component>
--   <component name="VcsManagerConfiguration">
--     <MESSAGE value="Ghilas commited les classes eni" />
---    <MESSAGE value="Ghilas commited a new version with new transitions" />
---    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
--+    <MESSAGE value="Tout est bien" />
--+    <MESSAGE value="Final push a propos de JSONDEAL" />
--+    <MESSAGE value="0.1" />
--+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
--+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
--+  </component>
--+  <component name="XDebuggerManager">
--+    <breakpoint-manager>
--+      <breakpoints>
--+        <breakpoint enabled="true" type="java-exception">
--+          <properties class="java.util.EmptyStackException" package="java.util" />
--+          <option name="timeStamp" value="11" />
--+        </breakpoint>
--+      </breakpoints>
--+      <default-breakpoints>
--+        <breakpoint enabled="true" type="java-exception" />
--+      </default-breakpoints>
--+    </breakpoint-manager>
--+    <watches-manager>
--+      <configuration name="Application">
--+        <watch expression="a" language="JAVA" />
--+      </configuration>
--+    </watches-manager>
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ajout de l'algorithme de synchronisation\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Automates.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Automates.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/JsonDeal.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.json\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"imadhou00\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.JsonDeal\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n        <item itemvalue=\"Application.Images\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614337229980\" duration=\"26000\" />\n      <workItem from=\"1614340764665\" duration=\"8758000\" />\n      <workItem from=\"1614724089267\" duration=\"43000\" />\n      <workItem from=\"1614948823465\" duration=\"12413000\" />\n      <workItem from=\"1615029847548\" duration=\"3790000\" />\n      <workItem from=\"1615067606138\" duration=\"15975000\" />\n      <workItem from=\"1615680586016\" duration=\"5811000\" />\n      <workItem from=\"1615850445118\" duration=\"5099000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"0.1\">\n      <created>1614171320903</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614171320903</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Ajout de l'algorithme de synchronisation\">\n      <created>1615849727905</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615849727905</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"6\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"imadhou00\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"HEAD\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"0.1\" />\n    <MESSAGE value=\"Ajout de l'algorithme de synchronisation\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ajout de l'algorithme de synchronisation\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.EmptyStackException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"11\" />\n        </breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d)
-+++ b/.idea/workspace.xml	(date 1616677928050)
-@@ -5,12 +5,8 @@
-   </component>
-   <component name="ChangeListManager">
-     <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/test.json" beforeDir="false" afterPath="$PROJECT_DIR$/test.json" afterDir="false" />
-     </list>
-@@ -218,6 +214,11 @@
-           <properties class="java.util.EmptyStackException" package="java.util" />
-           <option name="timeStamp" value="11" />
-         </breakpoint>
-+        <line-breakpoint enabled="true" type="java-line">
-+          <url>file://$PROJECT_DIR$/src/main/java/JsonDeal.java</url>
-+          <line>251</line>
-+          <option name="timeStamp" value="12" />
-+        </line-breakpoint>
-       </breakpoints>
-       <default-breakpoints>
-         <breakpoint enabled="true" type="java-exception" />
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch
-deleted file mode 100644
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,69 +0,0 @@
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"update\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"bapn3454\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.maven.repository.indices\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Pdf$PDFCreateExample\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Pdf$PDFCreateExample\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"latex\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\n      <texify>\n        <compiler>PDFLATEX</compiler>\n        <compiler-path />\n        <sumatra-path />\n        <pdf-viewer>EVINCE</pdf-viewer>\n        <viewer-command />\n        <compiler-arguments />\n        <envs />\n        <main-file />\n        <output-path>$PROJECT_DIR$/out</output-path>\n        <auxil-path>{projectDir}/auxil</auxil-path>\n        <compile-twice>false</compile-twice>\n        <output-format>PDF</output-format>\n        <latex-distribution>TEXLIVE</latex-distribution>\n        <has-been-run>true</has-been-run>\n        <bib-run-config>[]</bib-run-config>\n        <makeindex-run-config>[]</makeindex-run-config>\n      </texify>\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"Application.Pdf$PDFCreateExample\" />\n        <item itemvalue=\"LaTeX.latex\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.Images\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614454141310\" duration=\"672000\" />\n      <workItem from=\"1614455104850\" duration=\"296000\" />\n      <workItem from=\"1615901549137\" duration=\"9291000\" />\n      <workItem from=\"1616571516622\" duration=\"4053000\" />\n      <workItem from=\"1616671734507\" duration=\"3814000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"fonction jsonToDot fonctionelle\">\n      <created>1614175404668</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614175404668</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"images\">\n      <created>1614204046565</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614204046566</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Latex + PDF\">\n      <created>1616677768687</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616677768687</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Latex + PDF\">\n      <created>1616677805525</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616677805525</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Latex + PDF\">\n      <created>1616677846333</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616677846333</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Latex + PDF + CommandExec\">\n      <created>1616678094777</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616678094777</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"10\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/imadhou\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"fonction jsonToDot fonctionelle\" />\n    <MESSAGE value=\"images\" />\n    <MESSAGE value=\"Latex + PDF\" />\n    <MESSAGE value=\"Latex + PDF + CommandExec\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Latex + PDF + CommandExec\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/Automates$Pdf_PDFCreateExample.ic\" NAME=\"Pdf$PDFCreateExample Coverage Results\" MODIFIED=\"1616667822699\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision b87cb3ef3ac9c20a079c4245b08566f9c5084f31)
-+++ b/.idea/workspace.xml	(date 1616679539165)
-@@ -4,7 +4,7 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="update">
-+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Merge remote-tracking branch 'origin/rayani00' into rayani00">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-@@ -136,7 +136,7 @@
-       <workItem from="1614455104850" duration="296000" />
-       <workItem from="1615901549137" duration="9291000" />
-       <workItem from="1616571516622" duration="4053000" />
--      <workItem from="1616671734507" duration="3814000" />
-+      <workItem from="1616671734507" duration="4728000" />
-     </task>
-     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
-       <created>1613828472218</created>
-@@ -201,7 +201,28 @@
-       <option name="project" value="LOCAL" />
-       <updated>1616678094777</updated>
-     </task>
--    <option name="localTasksCounter" value="10" />
-+    <task id="LOCAL-00010" summary="update">
-+      <created>1616678638238</created>
-+      <option name="number" value="00010" />
-+      <option name="presentableId" value="LOCAL-00010" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1616678638238</updated>
-+    </task>
-+    <task id="LOCAL-00011" summary="update">
-+      <created>1616678799144</created>
-+      <option name="number" value="00011" />
-+      <option name="presentableId" value="LOCAL-00011" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1616678799144</updated>
-+    </task>
-+    <task id="LOCAL-00012" summary="Merge remote-tracking branch 'origin/rayani00' into rayani00">
-+      <created>1616678877234</created>
-+      <option name="number" value="00012" />
-+      <option name="presentableId" value="LOCAL-00012" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1616678877234</updated>
-+    </task>
-+    <option name="localTasksCounter" value="13" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -239,7 +260,9 @@
-     <MESSAGE value="images" />
-     <MESSAGE value="Latex + PDF" />
-     <MESSAGE value="Latex + PDF + CommandExec" />
--    <option name="LAST_COMMIT_MESSAGE" value="Latex + PDF + CommandExec" />
-+    <MESSAGE value="update" />
-+    <MESSAGE value="Merge remote-tracking branch 'origin/rayani00' into rayani00" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Merge remote-tracking branch 'origin/rayani00' into rayani00" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-     <SUITE FILE_PATH="coverage/Automates$Pdf_PDFCreateExample.ic" NAME="Pdf$PDFCreateExample Coverage Results" MODIFIED="1616667822699" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,111 +0,0 @@
-Index: src/main/java/Images.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\nimport com.sun.xml.internal.ws.commons.xmlutil.Converter;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport javax.swing.*;\nimport java.lang.Object;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class Images {\n    /**\n     * @param jsonFile : Nom du fichier json a convertir en dot\n     * @param path     : le chemin dans lequel on veut créer le fichier dot\n     * @brief : cette fonction crée un fichier .dot à partir d'un fichier .json\n     */\n    public void jsonToDot(String jsonFile, String path) {\n        String header = \"digraph automate {\\n\" +\n                \"\\trankdir=LR;\\n\" +\n                \"\\tsize=\\\"8,5\\\";\\n\" +\n                \"    node  [shape = circle];\";\n        String footer = \"}\";\n        String attributsEtats = \" [shape = circle];\";\n        String attributsEtatInitial = \" [style = \\\"filled\\\",color =\\\"gray\\\"];\";\n        String attributsEtatsFinaux = \" [shape = \\\"doublecircle\\\"];\";\n        String transitionGv = \"\";\n        String src;\n        String dst;\n        String lbl;\n        String etatfinalChaine = \"\";\n        JSONParser jsonParser = new JSONParser();\n        try {\n\n            JsonDeal jsonDeal = new JsonDeal();\n            Automates automates = jsonDeal.json_to_automate(jsonFile);\n            String etatInitial = automates.getEtatDepart().getNom();\n            List<Etats> etatFinal = automates.getEtatsArrivee();\n            // Création du fichier .gv\n            BufferedWriter b = new BufferedWriter(new FileWriter(path));\n            System.out.println(\"Fichier cree avec succes\");\n            b.write(header);\n            // Generer la ligne pour les etats initials\n            b.write(\"\\r\\n\" + \"    \" + etatInitial + \" \" + attributsEtatInitial);\n            // Generer la ligne pour les etats finaux\n            for (int i = 0; i < etatFinal.size(); i++) {\n                b.write(\"\\r\\n\" + \"    \" + etatFinal.get(i).getNom().toString().trim() + \" \" + attributsEtatsFinaux);\n            }\n\n            // Ecrire les transitions dans le fichier .gv\n            for (int i = 0; i < automates.getEtats().size(); i++) {\n                Etats e = automates.getEtats().get(i);\n                src = e.getNom().toString().trim();\n                ArrayList ar = e.getTransitions();\n                for (int j = 0; j < ar.size(); j++) {\n                    ArrayList tr = (ArrayList) ar.get(j);\n                    dst = tr.get(0).toString().trim();\n                    lbl = tr.get(1).toString().trim();\n                    transitionGv = \"    \" + src + \" -> \" + dst + \" \" + \"[label= \\\"\" + lbl + \"\\\"];\";\n                    b.write(\"\\r\\n\" + transitionGv);\n                }\n            }\n\n            b.write(\"\\r\\n\" + footer);\n            b.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void latexCreate() {\n        String latexString = \"\\\\documentclass{minimal}\\n\" +\n                \"\\\\usepackage[autosize]{dot2texi}\\n\" +\n                \"\\\\usepackage[pdf]{graphviz}\\n\" +\n                \"\\\\usepackage{amsmath}\\n\" +\n                \"\\\\usepackage{graphicx}\\n\" +\n                \"\\\\usepackage{tikz}\\n\" +\n                \"\\\\usetikzlibrary{shapes,arrows}\\n\" +\n                \"\\n\" +\n                \"\\\\begin{document}\\n\" +\n                \"    \\\\vskip 5mm\\n\" +\n                \"    \\\\textbf{Composer sur feuille papier; numérisez votre copie (photos, scanner), puis déposez-la sur Teams, dans l'équipe du cours de Langages Formels, dans le devoir \\\"CC1\\\" avant 13h50; prévoyez 10 minutes pour le scan/dépôt!} \\\\\\\\\\n\" +\n                \"\\n\" +\n                \"    Essayez si possible de deposer un fichier PDF unique avec vos differentes pages, que vous pouvez obtenir avec une app du type CamScanner.\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"    \\\\textbf{Les rendus en retard (après 13h50) pourront être pénalisés.}\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"    \\\\emph{A composer seul. Les échanges avec toute autre personne sont interdits.}\\\\\\\\\\n\" +\n                \"\\n\" +\n                \"    On dispose de l'automate suivant\\n\" +\n                \"\\n\" +\n                \"    \\\\begin{enumerate}\\n\" +\n                \"        \\\\setcounter{enumi}{-1}\\n\" +\n                \"        \\\\begin{dot2tex}[neato,mathmode]\\n\" +\n                \"            %AutomateInitial\\n\" +\n                \"        \\\\end{dot2tex}\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 1 - Déterminisez l'automate.\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 2 - Normalisez l'automate.\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 3 - Indiquez si l'automate accepte les mots suivants..\\n\" +\n                \"        \\\\newline\\n\" +\n                \"    \\\\end{enumerate}\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"    \\\\textbf{SOLUTIONS : }\\n\" +\n                \"    \\\\begin{enumerate}\\n\" +\n                \"\\n\" +\n                \"        \\\\item 1- Automate déterministe :\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\begin{dot2tex}[neato,mathmode]\\n\" +\n                \"            %AutomateDeterministe\\n\" +\n                \"        \\\\end{dot2tex}\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 2 - Automate normalisé :\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\begin{dot2tex}[neato,mathmode]\\n\" +\n                \"            %AutomateNormalise\\n\" +\n                \"        \\\\end{dot2tex}\\n\" +\n                \"\\n\" +\n                \"    \\\\end{enumerate}\\n\" +\n                \"\\n\" +\n                \"\\\\end{document}\\n\" +\n                \"\\n\";\n        try {\n            BufferedWriter b = new BufferedWriter(new FileWriter(\"/home/rayani00/IdeaProjects/Automates/latex.tex\"));\n            System.out.println(\"Fichier cree avec succes\");\n            b.write(latexString);\n            b.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n\n    }\n\n\n}\n\n
-===================================================================
-diff --git a/src/main/java/Images.java b/src/main/java/Images.java
---- a/src/main/java/Images.java	
-+++ b/src/main/java/Images.java	
-@@ -71,6 +71,17 @@
-         }
-     }
- 
-+    public void automateToJsonFile(Automates automate) throws IOException {
-+        JsonDeal jsonDeal = new JsonDeal();
-+        JSONObject object = jsonDeal.automate_to_json(automate);
-+        String jsonFileContent = object.toJSONString();
-+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("/home/rayani00/IdeaProjects/Automates/automateJson.json"));
-+        System.out.println("Fichier 'automateJson.json' crée avec succes");
-+        bufferedWriter.write(jsonFileContent);
-+        bufferedWriter.close();
-+
-+    }
-+
-     public void latexCreate() {
-         String latexString = "\\documentclass{minimal}\n" +
-                 "\\usepackage[autosize]{dot2texi}\n" +
-Index: src/main/java/Latex.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import org.json.simple.JSONObject;\n\npublic class Latex {\n    public void subjectCreator(Automates automate){\n        JsonDeal jsonDeal = new JsonDeal();\n        JSONObject object = jsonDeal.automate_to_json(automate);\n\n    }\n}\n
-===================================================================
-diff --git a/src/main/java/Latex.java b/src/main/java/Latex.java
---- a/src/main/java/Latex.java	
-+++ b/src/main/java/Latex.java	
-@@ -1,9 +1,33 @@
-+import org.apache.commons.io.FileUtils;
-+import org.apache.commons.io.IOUtils;
- import org.json.simple.JSONObject;
- 
-+import java.io.File;
-+import java.io.FileReader;
-+import java.io.IOException;
-+import java.nio.charset.Charset;
-+import java.nio.charset.StandardCharsets;
-+import java.nio.file.Files;
-+import java.nio.file.Path;
-+import java.nio.file.Paths;
-+import java.util.Scanner;
-+
-+
- public class Latex {
--    public void subjectCreator(Automates automate){
--        JsonDeal jsonDeal = new JsonDeal();
--        JSONObject object = jsonDeal.automate_to_json(automate);
-+    public void subjectCreator(Automates automate) throws IOException {
-+        Images images = new Images();
-+        String automateInitial = "";
-+        String automateMinimise = "Bite";
-+        String automateDeterministe = "Bite";
-+        Path path = Paths.get("test.tex");
-+        Charset charset = StandardCharsets.UTF_8;
-+        String content = new String(Files.readAllBytes(path), charset);
-+        images.jsonToDot("test.json", "/home/rayani00/IdeaProjects/Automates/test.dot");
-+        Scanner sc = new Scanner(new File("test.dot"));
-+        automateInitial = IOUtils.toString(new FileReader("test.dot"));
-+        System.out.println(automateInitial);
-+        content = content.replaceAll("#AutomateInitial", automateInitial);
-+        Files.write(path, content.getBytes(charset));
- 
-     }
- }
-Index: test.dot
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>digraph test {rankdir=LR;\nsize=\"8,5\";\nnode [shape = circle];\n0 [style = \"filled\",color =\"gray\"];\n2 [shape = \"doublecircle\"];\n1 [shape = \"doublecircle\"];\n0 -> 0 [label= \"a\"];\n0 -> 1 [label= \"b\"];\n0 -> 1 [label= \"d\"];\n1 -> 1 [label= \"c\"];\n1 -> 3 [label= \"a\"];\n1 -> 3 [label= \"b\"];\n2 -> 2 [label= \"a\"];\n2 -> 3 [label= \"a\"];}\n
-===================================================================
-diff --git a/test.dot b/test.dot
---- a/test.dot	
-+++ b/test.dot	
-@@ -1,14 +1,16 @@
--digraph test {rankdir=LR;
--size="8,5";
--node [shape = circle];
--0 [style = "filled",color ="gray"];
--2 [shape = "doublecircle"];
--1 [shape = "doublecircle"];
--0 -> 0 [label= "a"];
--0 -> 1 [label= "b"];
--0 -> 1 [label= "d"];
--1 -> 1 [label= "c"];
--1 -> 3 [label= "a"];
--1 -> 3 [label= "b"];
--2 -> 2 [label= "a"];
--2 -> 3 [label= "a"];}
-+digraph automate {
-+	rankdir=LR;
-+	size="8,5";
-+    node  [shape = circle];
-+    0  [style = "filled",color ="gray"];
-+    2  [shape = "doublecircle"];
-+    1  [shape = "doublecircle"];
-+    0 -> 0 [label= "a"];
-+    0 -> 1 [label= "b"];
-+    0 -> 1 [label= "d"];
-+    1 -> 1 [label= "c"];
-+    1 -> 3 [label= "a"];
-+    1 -> 3 [label= "b"];
-+    2 -> 2 [label= "a"];
-+    2 -> 3 [label= "a"];
-+}
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,630 +0,0 @@
-Index: src/main/java/JsonDeal.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
---- a/src/main/java/JsonDeal.java	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
-+++ b/src/main/java/JsonDeal.java	(date 1615501227224)
-@@ -9,6 +9,7 @@
- import java.util.*;
- 
- public class JsonDeal {
-+     int i =0;
- 
- 
-     /*
-@@ -16,11 +17,6 @@
-     d'etats, le nombre de transitions, une liste d'alphabet
-      */
- 
--    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
--
--        return null;
--    }
--
-     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
-         Random random = new Random();
- 
-@@ -247,295 +243,22 @@
- 
- 
-     public static void main(String[] args) {
--//        JsonDeal jsonDeal= new JsonDeal();
--//        Automates a = jsonDeal.json_to_automate("test.json");
--//        jsonDeal.automate_to_json(a);
--
--        ArrayList transition = new ArrayList();
--
--        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
--
--        // creation q1
--        ArrayList transition1 = new ArrayList();
--        transition1.add("1");
--        transition1.add("a");
--        ArrayList transition2 = new ArrayList();
--        transition2.add("2");
--        transition2.add("a");
--        Etats q1 = new Etats();
--        q1.setNom("1");
--        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
--        q1_transitions = new ArrayList<ArrayList<String>>();
--        q1_transitions.add(transition1);
--        q1_transitions.add(transition2);
--        q1.setTransitions(q1_transitions);
-+        JsonDeal jsonDeal= new JsonDeal();
- 
--        // creation q2
--        ArrayList transition3 = new ArrayList();
--        transition3.add("3");
--        transition3.add("@");
--        Etats q2 = new Etats();
--        q2.setNom("2");
--        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
--        q2_transitions.add(transition3);
--        q2.setTransitions(q2_transitions);
- 
--        // creation q3
--        ArrayList transition4 = new ArrayList();
--        transition4.add("3");
--        transition4.add("a");
--        ArrayList transition5 = new ArrayList();
--        transition5.add("4");
--        transition5.add("a");
--        Etats q3 = new Etats();
--        q3.setNom("3");
--        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
--        q3_transitions.add(transition4);
--        q3_transitions.add(transition5);
--        q3.setTransitions(q3_transitions);
-+        Automates a = jsonDeal.json_to_automate("test.json");
- 
--        // creation q4
--        ArrayList transition6 = new ArrayList();
--        transition6.add("5");
--        transition6.add(".");
--        Etats q4 = new Etats();
--        q4.setNom("4");
--        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
--        q4_transitions.add(transition6);
--        q4.setTransitions(q4_transitions);
- 
--        // creation q5
--        ArrayList transition7 = new ArrayList();
--        transition7.add("5");
--        transition7.add("a");
--        ArrayList transition8 = new ArrayList();
--        transition8.add("6");
--        transition8.add("a");
--        Etats q5 = new Etats();
--        q5.setNom("5");
--        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
--        q5_transitions.add(transition7);
--        q5_transitions.add(transition8);
--        q5.setTransitions(q5_transitions);
-+        String s = "((a+(b.b))*.(b+(a.a))*)";
-+        String[] ss = {"a", "b", "c"};
- 
--        //q6
-+        Automates bb = a.thompson(s,ss);
- 
--        Etats q6 = new Etats();
--        q6.setNom("6");
--        q6.setTransitions(null);
-+        System.out.println(jsonDeal.automate_to_json(bb));
-+        Images i = new Images();
-+        i.jsonToDot("test.json", "hh2.dot");
-+        bb.synch3();
- 
--        ArrayList<Etats> arrivee = new ArrayList<Etats>();
--        arrivee.add(q6);
--        ArrayList<Etats> etats = new ArrayList<Etats>();
--        etats.add(q1);
--        etats.add(q2);
--        etats.add(q3);
--        etats.add(q4);
--        etats.add(q5);
--        etats.add(q6);
--        ArrayList<String> alphabet = new ArrayList<String>();
--        alphabet.add("a");
--        alphabet.add("@");
--        alphabet.add(".");
--        Automates a = new Automates(q1,arrivee,etats,alphabet);
--        a.determiniser();
--//        System.out.println(a.getAlphabet());
--////        System.out.println(a.getEtats());
--//        for(int i=0;i<a.getEtats().size();i++) {
--//            System.out.println(a.getEtats().get(i).getNom());
--//            System.out.println(a.getEtats().get(i).getTransitions());
--//        }
--//        System.out.println(a.getEtatDepart());
--//        System.out.println(a.getEtatsArrivee());
--//        System.out.println(a.getEtats().get(0).getTransitions());
--
--//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
--//        ArrayList<String> str = new ArrayList<String>();
--//        str.add("3");
--//        str.add("a");
--//        listOfLists.add(str);
--//        ArrayList<String> str2 = new ArrayList<String>();
--//        str2.add("1");
--//        str2.add("g");
--//        listOfLists.add(str2);
--//        System.out.println(listOfLists);
--
--
--        // determinaison
--//        System.out.println(a.getEtats().get());
--        // contient les transitions finales à inserer dans les grpEtats
--//        ArrayList grpTransitions = new ArrayList();
--//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
--//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
--//        // contient les etat à inserer dans l'automate final deteminisé
--//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
--//        Etats e = new Etats();
--//        e.setNom(a.getEtatDepart().getNom());
--//        grpEtats.add(e);
--//        // on parcourt les etats de a
--//        for(int i=0;i<a.getEtats().size();i++){
--//            // contient les transition de l'etat i
--//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
--//            int size = 0;
--//            if (transitions_etat == null)
--//                size = 0;
--//            else
--//                size = transitions_etat.size();
--//            // parcourt les transitions de l"etat i
--//            for(int j=0;j<size;j++){
--//                if (transitions_etat.get(j) != null) {
--//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
--//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
--//                    //System.out.println(tr.get(1));
--//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
--//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
--//                    // a partir de cette liste on creera les etats
--//                    boolean exist = false;
--//                    if(grpTransitionsTemp != null) {
--//                        // parcourt les transitions temporaires
--//                        for(int k=0;k<grpTransitionsTemp.size();k++){
--//                            String str = grpTransitionsTemp.get(k);
--//                            String alph_etat[] = str.split(":");
--////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
--//                            // ajouter un nouvel etat au groupe d'etat
--//                            if (tr.get(1).equals(alph_etat[0])){
--////                                System.out.println(alph_etat[1]);
--//                                // ici erreur :
--//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
--//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
--//                                // les deux prochaines lignes devraient etre correctes ???
--//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
--//
--//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
--//                                // le a va bel et bien vers 1,2,3,4,5,6
--//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
--//                                // determiner le depart des arcs
--//                                String temp =alph_etat[0]+":"+alph_etat[1];
--//                                grpTransitionsTemp.set(k,temp);
--////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
--//                                exist = true;
--//                            }
--//                        }
--//
--//                    }
--//                    // creation d'une transition pour un group d'etat
--//                    if (!exist){
--//                        String str = tr.get(1)+":"+tr.get(0);
--//                        grpTransitionsTemp.add(str);
--//                    }
--//                }
--//            }
--//            for(int g=0;g<grpEtats.size();g++)
--//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
--//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
--//            // ici generer grpTransitions
--//
--//            System.out.println("fin du parcours de l'etat "+(i+1));
--//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
--//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
--//            int s;
--//            if(grpTransitionsTemp!=null) {
--//                s = grpTransitionsTemp.size();
--//            }else {
--//                s = 0;
--//            }
--//                for (int x = 0; x < s; x++) {
--//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
--////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
--//                    if (grpEtats.contains(alph_etat[1])) {
--//
--//                    } else {
--//                        Etats et = new Etats();
--//                        et.setNom(alph_etat[1]);
--//                        // la partie suivante pourra etre ajoutée à une autre boucle
--//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
--////                        ArrayList<String> trns = new ArrayList<String>();
--////                        trns.add()
--////                        et.getTransitions().add();
--//                        grpEtats.add(et);
--//                    }
--//                }
--//                // ici former grpTransitions
--//            grpTransitions.add(String.valueOf(i));
--//            grpTransitions.add(grpTransitionsTemp);
--//            // ICI PPROBLEME
--//            // grpTransitionTemp est vide????
--//            System.out.println("voila "+grpTransitions);
--//            grpTransitionsTemp.clear();
--//
--//        }
--//            // parcours de grpEtat ( pour le depart )
--//            for(int j=0;j<grpEtats.size();j++){
--//                String etat[] = grpEtats.get(j).getNom().split(",");
--//                // on recupere les etats du grpEtat ( depart )
--//                for (int y=0;y<etat.length;y++){
--//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
--//                    for (int i=0;i<a.getEtats().size();i++) {
--//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
--//                            // ajouter les transitions de l'etat i de l'automate non deterministe
--//                            if(a.getEtats().get(i).getTransitions()!=null){
--//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
--//                                //grpetat pour les arrivées
--//                                for (int l = 0; l < grpEtats.size(); l++) {
--//                                    // etat1 contient les etats d'arrivée à tester
--//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
--//                                    for (int g = 0; g < etat1.length; g++) {
--//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
--//                                        if (ltr.get(0).equals(etat1[g])) {
--//                                            boolean trouve = false;
--//                                            // verfie si on a déja ajouté la transition
--//                                            if (grpEtats.get(j).getTransitions() != null) {
--//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
--//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
--//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
--//                                                        trouve = true;
--//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
--//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
--//                                                    }
--//                                                }
--//                                            }
--//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
--//                                            if (!trouve) {
--//                                                ArrayList<String> al = new ArrayList<String>();
--//                                                // cette ligne a un probleme
--//                                                al.add(grpEtats.get(l).getNom());
--//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
--//                                                if (grpEtats.get(j).getTransitions() != null) {
--//                                                    grpEtats.get(j).getTransitions().add(al);
--//                                                } else {
--//                                                    // à regler le cas ou les transitions sont vides
--////                                                grpEtats.get(j).getTransitions() = new ArrayList();
--//                                                    grpEtats.get(j).setTransitions(new ArrayList());
--//                                                    grpEtats.get(j).getTransitions().add(al);
--//
--//                                                }
--//
--//                                        }
--//                                        }
--//                                    }
--//                                }
--//                            }
--//                        }
--//                        }
--//                    }
--//                }
--//            }
--//
--//        System.out.println(grpTransitionsTemp);
--//            for (int i=0;i<grpEtats.size();i++){
--//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
--//            }
--//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
--
--//        List<List> lists = new ArrayList<List>();
--//        for (int i = 0; i < 4; i++) {
--//            List list = new ArrayList();
--//            list.add(i);
--//            list.add("a");
--//            lists.add(list);
--//            // Use the list further...
--//        }
--//        System.out.println(lists);
- 
- 
-     }
-Index: src/main/java/Automates.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            // contient les colonnes du tableau\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                // on pourrait declarer l ici\n                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash\n                // on pourrait meme remplacer la boucle suivante\n                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction\n                    // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        // pourquoi etats_preced alors qu'en bas on met un get(i)???\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR\n                config.add(0,hash.get(key).toString());\n//                config.add(1,hash.get(key));\n                config.add(1,key);\n                hashToList.add(config);\n                etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
---- a/src/main/java/Automates.java	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
-+++ b/src/main/java/Automates.java	(date 1615501227280)
-@@ -74,7 +74,7 @@
-     // ALGORITHMES
- 
-     public void determiniser(){
--        // contient les lignes du tableau de determinaisation ( on l'initialise avec l'etat de depart )
-+
-         Queue<List> file_etat_cree = new LinkedList<List>();
-         List debut = new ArrayList();
-         debut.add(this.getEtatDepart().getNom());
-@@ -87,21 +87,14 @@
-             Etats etat = new Etats();
-             // concatener les etats groupés : à définir
-             etat.setNom(etats_preced.toString());
--            // contient les colonnes du tableau
-             HashMap<String,List> hash = new HashMap<String,List>();
- 
-             for(int i =0;i<etats_preced.size();i++){
--                // on pourrait declarer l ici
--                // ICI on pourrait faire un parcours des successeurs de etats_preced pour les ajouter à hash
--                // on pourrait meme remplacer la boucle suivante
--                // sans oublier de remplacer les alphabet.get/size par les vriables adéquates
-                 for (int j=0;j<this.alphabet.size();j++){
--                    //verifier cette ligne la condition est inutile : on ajoute tous les etats sans distinction
--                    // on devrait plutot verifier si ils ont alphabet.get(j) comme successeur
-+                    //verifier cette ligne
-                     if (hash.containsKey(this.alphabet.get(j))){
-                         // l'idée est là
-                         List l = (List)hash.get(this.alphabet.get(j));
--                        // pourquoi etats_preced alors qu'en bas on met un get(i)???
-                         l.add(etats_preced);
-                         hash.put(this.alphabet.get(j),l);
-                     } else {
-@@ -114,17 +107,14 @@
-             }
-             System.out.println(hash);
-             // à revoir
--            // le fait que c'est à l'exterieur de la boucle peut poser des problemes de reinnitialisation
-             ArrayList hashToList = new ArrayList();
-             for(String key: hash.keySet()){
-                 file_etat_cree.add(hash.get(key));
-                 ArrayList config = new ArrayList();
--                // je pense qu'ici on devrait ajouter la key au lieu de get(key) PAS SÛR
-                 config.add(0,hash.get(key).toString());
--//                config.add(1,hash.get(key));
--                config.add(1,key);
--                hashToList.add(config);
--                etat.setTransitions(hashToList);
-+               config.add(1,hash.get(key));
-+               hashToList.add(config);
-+               etat.setTransitions(hashToList);
-             }
-         }
- 
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 00dc784203f4c403a02eca55b5ee18213be64f79)
-+++ b/.idea/workspace.xml	(date 1615501227340)
-@@ -4,13 +4,12 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
-+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -27,12 +26,25 @@
-   <component name="Git.Settings">
-     <option name="RECENT_BRANCH_BY_REPOSITORY">
-       <map>
--        <entry key="$PROJECT_DIR$" value="main" />
-+        <entry key="$PROJECT_DIR$" value="imadhou00" />
-       </map>
-     </option>
-     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-+    <option name="RESET_MODE" value="MIXED" />
-+    <option name="UPDATE_TYPE" value="REBASE" />
-+  </component>
-+  <component name="GitSEFilterConfiguration">
-+    <file-type-list>
-+      <filtered-out-file-type name="LOCAL_BRANCH" />
-+      <filtered-out-file-type name="REMOTE_BRANCH" />
-+      <filtered-out-file-type name="TAG" />
-+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
-+    </file-type-list>
-   </component>
-   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
-+  <component name="ProjectLevelVcsManager">
-+    <ConfirmationsSetting value="2" id="Add" />
-+  </component>
-   <component name="ProjectViewState">
-     <option name="hideEmptyMiddlePackages" value="true" />
-     <option name="showLibraryContents" value="true" />
-@@ -42,15 +54,22 @@
-     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-     <property name="WebServerToolWindowFactoryState" value="false" />
-     <property name="aspect.path.notification.shown" value="true" />
--    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
-     <property name="node.js.detected.package.eslint" value="true" />
-     <property name="node.js.detected.package.tslint" value="true" />
-     <property name="node.js.path.for.package.eslint" value="project" />
-     <property name="node.js.path.for.package.tslint" value="project" />
-     <property name="node.js.selected.package.eslint" value="(autodetect)" />
-     <property name="node.js.selected.package.tslint" value="(autodetect)" />
-+    <property name="nodejs_package_manager_path" value="npm" />
-   </component>
--  <component name="RunManager">
-+  <component name="RunManager" selected="Application.JsonDeal">
-+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="Images" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
-       <module name="Automates" />
-@@ -58,13 +77,16 @@
-         <option name="Make" enabled="true" />
-       </method>
-     </configuration>
--    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
--      <option name="arquillianRunConfiguration">
--        <value>
--          <option name="containerStateName" value="" />
--        </value>
--      </option>
--      <option name="TEST_OBJECT" value="class" />
-+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
-+      <module name="Automates" />
-       <method v="2">
-         <option name="Make" enabled="true" />
-       </method>
-@@ -72,6 +94,10 @@
-     <recent_temporary>
-       <list>
-         <item itemvalue="Application.JsonDeal" />
-+        <item itemvalue="Application.TraitementTransitions" />
-+        <item itemvalue="Application.JsonTpGv" />
-+        <item itemvalue="Application.Images" />
-+        <item itemvalue="Application.JsonDeal" />
-       </list>
-     </recent_temporary>
-   </component>
-@@ -84,7 +110,15 @@
-       <option name="presentableId" value="Default" />
-       <updated>1613827742264</updated>
-       <workItem from="1613827744292" duration="363000" />
--      <workItem from="1613828133950" duration="3761000" />
-+      <workItem from="1613828133950" duration="1228000" />
-+      <workItem from="1614112267934" duration="567000" />
-+      <workItem from="1614337229980" duration="26000" />
-+      <workItem from="1614340764665" duration="8758000" />
-+      <workItem from="1614724089267" duration="43000" />
-+      <workItem from="1614948823465" duration="12413000" />
-+      <workItem from="1615029847548" duration="3790000" />
-+      <workItem from="1615067606138" duration="15975000" />
-+      <workItem from="1615500735341" duration="394000" />
-     </task>
-     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
-       <created>1613828472218</created>
-@@ -93,14 +127,28 @@
-       <option name="project" value="LOCAL" />
-       <updated>1613828472218</updated>
-     </task>
--    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
--      <created>1613832695232</created>
-+    <task id="LOCAL-00002" summary="Tout est bien">
-+      <created>1614052026476</created>
-       <option name="number" value="00002" />
-       <option name="presentableId" value="LOCAL-00002" />
-       <option name="project" value="LOCAL" />
--      <updated>1613832695232</updated>
-+      <updated>1614052026476</updated>
-+    </task>
-+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
-+      <created>1614052212166</created>
-+      <option name="number" value="00003" />
-+      <option name="presentableId" value="LOCAL-00003" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614052212166</updated>
-+    </task>
-+    <task id="LOCAL-00004" summary="0.1">
-+      <created>1614171320903</created>
-+      <option name="number" value="00004" />
-+      <option name="presentableId" value="LOCAL-00004" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614171320903</updated>
-     </task>
--    <option name="localTasksCounter" value="3" />
-+    <option name="localTasksCounter" value="5" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -111,7 +159,34 @@
-       <map>
-         <entry key="MAIN">
-           <value>
--            <State />
-+            <State>
-+              <option name="FILTERS">
-+                <map>
-+                  <entry key="branch">
-+                    <value>
-+                      <list>
-+                        <option value="imadhou00" />
-+                      </list>
-+                    </value>
-+                  </entry>
-+                </map>
-+              </option>
-+            </State>
-+          </value>
-+        </entry>
-+      </map>
-+    </option>
-+    <option name="RECENT_FILTERS">
-+      <map>
-+        <entry key="Branch">
-+          <value>
-+            <list>
-+              <RecentGroup>
-+                <option name="FILTER_VALUES">
-+                  <option value="HEAD" />
-+                </option>
-+              </RecentGroup>
-+            </list>
-           </value>
-         </entry>
-       </map>
-@@ -120,7 +195,28 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <MESSAGE value="Ghilas commited les classes eni" />
--    <MESSAGE value="Ghilas commited a new version with new transitions" />
--    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
-+    <MESSAGE value="Tout est bien" />
-+    <MESSAGE value="Final push a propos de JSONDEAL" />
-+    <MESSAGE value="0.1" />
-+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
-+  </component>
-+  <component name="XDebuggerManager">
-+    <breakpoint-manager>
-+      <breakpoints>
-+        <breakpoint enabled="true" type="java-exception">
-+          <properties class="java.util.EmptyStackException" package="java.util" />
-+          <option name="timeStamp" value="11" />
-+        </breakpoint>
-+      </breakpoints>
-+      <default-breakpoints>
-+        <breakpoint enabled="true" type="java-exception" />
-+      </default-breakpoints>
-+    </breakpoint-manager>
-+    <watches-manager>
-+      <configuration name="Application">
-+        <watch expression="a" language="JAVA" />
-+      </configuration>
-+    </watches-manager>
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]/shelved.patch	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,234 +0,0 @@
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Final push a propos de JSONDEAL\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"imadhou\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"4\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/imadhou\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Final push a propos de JSONDEAL\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision a4d34ba5f627719bbf7f627e09bd69eae0e43e1c)
-+++ b/.idea/workspace.xml	(date 1614171240247)
-@@ -4,7 +4,12 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Final push a propos de JSONDEAL" />
-+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="post Final">
-+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
-+    </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -20,11 +25,19 @@
-   <component name="Git.Settings">
-     <option name="RECENT_BRANCH_BY_REPOSITORY">
-       <map>
--        <entry key="$PROJECT_DIR$" value="imadhou" />
-+        <entry key="$PROJECT_DIR$" value="main" />
-       </map>
-     </option>
-     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-   </component>
-+  <component name="GitSEFilterConfiguration">
-+    <file-type-list>
-+      <filtered-out-file-type name="LOCAL_BRANCH" />
-+      <filtered-out-file-type name="REMOTE_BRANCH" />
-+      <filtered-out-file-type name="TAG" />
-+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
-+    </file-type-list>
-+  </component>
-   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
-   <component name="ProjectLevelVcsManager">
-     <ConfirmationsSetting value="2" id="Add" />
-@@ -36,17 +49,25 @@
-   <component name="PropertiesComponent">
-     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-+    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-     <property name="WebServerToolWindowFactoryState" value="false" />
-     <property name="aspect.path.notification.shown" value="true" />
-+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
-     <property name="node.js.detected.package.eslint" value="true" />
-     <property name="node.js.detected.package.tslint" value="true" />
-     <property name="node.js.path.for.package.eslint" value="project" />
-     <property name="node.js.path.for.package.tslint" value="project" />
-     <property name="node.js.selected.package.eslint" value="(autodetect)" />
-     <property name="node.js.selected.package.tslint" value="(autodetect)" />
--    <property name="nodejs_package_manager_path" value="npm" />
-   </component>
--  <component name="RunManager">
-+  <component name="RunManager" selected="Application.JsonDeal">
-+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="Images" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
-       <module name="Automates" />
-@@ -54,9 +75,40 @@
-         <option name="Make" enabled="true" />
-       </method>
-     </configuration>
-+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
-+      <module name="Automates" />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-+    <configuration default="true" type="ArquillianTestNG" factoryName="" nameIsGenerated="true">
-+      <option name="arquillianRunConfiguration">
-+        <value>
-+          <option name="containerStateName" value="" />
-+        </value>
-+      </option>
-+      <option name="TEST_OBJECT" value="CLASS" />
-+      <properties />
-+      <listeners />
-+      <method v="2">
-+        <option name="Make" enabled="true" />
-+      </method>
-+    </configuration>
-     <recent_temporary>
-       <list>
-         <item itemvalue="Application.JsonDeal" />
-+        <item itemvalue="Application.JsonDeal" />
-+        <item itemvalue="Application.TraitementTransitions" />
-+        <item itemvalue="Application.Images" />
-+        <item itemvalue="Application.JsonTpGv" />
-       </list>
-     </recent_temporary>
-   </component>
-@@ -69,8 +121,15 @@
-       <option name="presentableId" value="Default" />
-       <updated>1613827742264</updated>
-       <workItem from="1613827744292" duration="363000" />
--      <workItem from="1613828133950" duration="1228000" />
--      <workItem from="1614112267934" duration="567000" />
-+      <workItem from="1613828133950" duration="3761000" />
-+      <workItem from="1613851861512" duration="2513000" />
-+      <workItem from="1613859205017" duration="308000" />
-+      <workItem from="1613904639054" duration="18286000" />
-+      <workItem from="1613927119693" duration="8799000" />
-+      <workItem from="1613944957850" duration="14866000" />
-+      <workItem from="1613998062337" duration="553000" />
-+      <workItem from="1613998990488" duration="10732000" />
-+      <workItem from="1614081376176" duration="462000" />
-     </task>
-     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
-       <created>1613828472218</created>
-@@ -79,21 +138,49 @@
-       <option name="project" value="LOCAL" />
-       <updated>1613828472218</updated>
-     </task>
--    <task id="LOCAL-00002" summary="Tout est bien">
--      <created>1614052026476</created>
-+    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
-+      <created>1613832695232</created>
-       <option name="number" value="00002" />
-       <option name="presentableId" value="LOCAL-00002" />
-       <option name="project" value="LOCAL" />
--      <updated>1614052026476</updated>
-+      <updated>1613832695232</updated>
-     </task>
--    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
--      <created>1614052212166</created>
-+    <task id="LOCAL-00003" summary="Added class Image to generate .gv file (not completed yet)">
-+      <created>1613917444200</created>
-       <option name="number" value="00003" />
-       <option name="presentableId" value="LOCAL-00003" />
-       <option name="project" value="LOCAL" />
--      <updated>1614052212166</updated>
-+      <updated>1613917444200</updated>
-+    </task>
-+    <task id="LOCAL-00004" summary="A faire : generation du fichier .gv, et regler le probléme de la derniére ligne manquante">
-+      <created>1613923573308</created>
-+      <option name="number" value="00004" />
-+      <option name="presentableId" value="LOCAL-00004" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1613923573308</updated>
-     </task>
--    <option name="localTasksCounter" value="4" />
-+    <task id="LOCAL-00005" summary="Classe Images fonctionelle &#10;generation du fichiier.gv : ok &#10;todo : &#10;- Definir les etats initials&#10;- Definir les etats finaux">
-+      <created>1613936066275</created>
-+      <option name="number" value="00005" />
-+      <option name="presentableId" value="LOCAL-00005" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1613936066275</updated>
-+    </task>
-+    <task id="LOCAL-00006" summary="Besoin de la classe Transitions pour pouvoir génere les transitions pour le fichier">
-+      <created>1613960772737</created>
-+      <option name="number" value="00006" />
-+      <option name="presentableId" value="LOCAL-00006" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1613960772790</updated>
-+    </task>
-+    <task id="LOCAL-00007" summary="post Final">
-+      <created>1614169928519</created>
-+      <option name="number" value="00007" />
-+      <option name="presentableId" value="LOCAL-00007" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1614169928519</updated>
-+    </task>
-+    <option name="localTasksCounter" value="8" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -104,19 +191,7 @@
-       <map>
-         <entry key="MAIN">
-           <value>
--            <State>
--              <option name="FILTERS">
--                <map>
--                  <entry key="branch">
--                    <value>
--                      <list>
--                        <option value="origin/imadhou" />
--                      </list>
--                    </value>
--                  </entry>
--                </map>
--              </option>
--            </State>
-+            <State />
-           </value>
-         </entry>
-       </map>
-@@ -125,8 +200,19 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <MESSAGE value="Ghilas commited les classes eni" />
--    <MESSAGE value="Tout est bien" />
--    <MESSAGE value="Final push a propos de JSONDEAL" />
--    <option name="LAST_COMMIT_MESSAGE" value="Final push a propos de JSONDEAL" />
-+    <MESSAGE value="Ghilas commited a new version with new transitions" />
-+    <MESSAGE value="Added class Image to generate .gv file (not completed yet)" />
-+    <MESSAGE value="A faire : generation du fichier .gv, et regler le probléme de la derniére ligne manquante" />
-+    <MESSAGE value="Classe Images fonctionelle &#10;generation du fichiier.gv : ok &#10;todo : &#10;- Definir les etats initials&#10;- Definir les etats finaux" />
-+    <MESSAGE value="Besoin de la classe Transitions pour pouvoir génere les transitions pour le fichier" />
-+    <MESSAGE value="post Final" />
-+    <option name="LAST_COMMIT_MESSAGE" value="post Final" />
-+  </component>
-+  <component name="XDebuggerManager">
-+    <watches-manager>
-+      <configuration name="Application">
-+        <watch expression="a" language="JAVA" />
-+      </configuration>
-+    </watches-manager>
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25__Default_Changelist_.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ /dev/null	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
@@ -1,54 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]" date="1616678755904" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 25/03/2021 14:25 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/Automates.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Automates.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Etats.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/Automates.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/JsonDeal.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/JsonDeal.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/JsonDeal.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/JsonDeal.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/Automates.class" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/JsonDeal.class" />
-    <option name="AFTER_PATH" value="target/classes/JsonDeal.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/JsonDeal.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"finale\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateDeterministe.dot\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateDeterministe.dot\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateDeterministe.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateDeterministe.json\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateDeterministe.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateDeterministe.png\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateInitial.dot\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateInitial.dot\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateInitial.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateInitial.json\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateInitial.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateInitial.png\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateMinimal.dot\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateMinimal.dot\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateMinimal.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateMinimal.json\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateMinimal.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateMinimal.png\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateSynchro.dot\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateSynchro.dot\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateSynchro.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateSynchro.json\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/automateSynchro.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/automateSynchro.png\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Images.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Images.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Automates.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Automates.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Images.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Images.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.dot\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.dot\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.json\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"ba552f8fb4c6f113d4eb6abc0f462224f8bcac5d\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"Images\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Images\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"JsonTpGv\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonTpGv\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"TraitementTransitions\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TraitementTransitions\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.JsonTpGv\" />\n      <item itemvalue=\"Application.TraitementTransitions\" />\n      <item itemvalue=\"Application.JsonDeal\" />\n      <item itemvalue=\"Application.Images\" />\n      <item itemvalue=\"Application.Main\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"Application.JsonDeal\" />\n        <item itemvalue=\"Application.TraitementTransitions\" />\n        <item itemvalue=\"Application.JsonTpGv\" />\n        <item itemvalue=\"Application.Images\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"1228000\" />\n      <workItem from=\"1614112267934\" duration=\"567000\" />\n      <workItem from=\"1614337229980\" duration=\"26000\" />\n      <workItem from=\"1614340764665\" duration=\"8758000\" />\n      <workItem from=\"1614724089267\" duration=\"43000\" />\n      <workItem from=\"1614948823465\" duration=\"12413000\" />\n      <workItem from=\"1615029847548\" duration=\"3790000\" />\n      <workItem from=\"1615067606138\" duration=\"15975000\" />\n      <workItem from=\"1615680586016\" duration=\"5811000\" />\n      <workItem from=\"1615850445118\" duration=\"5099000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Tout est bien\">\n      <created>1614052026476</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052026476</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Final push a propos de JSONDEAL\">\n      <created>1614052212166</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614052212166</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"0.1\">\n      <created>1614171320903</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614171320903</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Ajout de l'algorithme de synchronisation\">\n      <created>1615849727905</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615849727905</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"finale\">\n      <created>1617545267721</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1617545267721</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"7\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"imadhou00\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"HEAD\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Tout est bien\" />\n    <MESSAGE value=\"Final push a propos de JSONDEAL\" />\n    <MESSAGE value=\"0.1\" />\n    <MESSAGE value=\"Ajout de l'algorithme de synchronisation\" />\n    <MESSAGE value=\"finale\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"finale\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.EmptyStackException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"11\" />\n        </breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Application\">\n        <watch expression=\"a\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ b/.idea/workspace.xml	(date 1617569566129)
@@ -5,13 +5,53 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="finale">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_08_03_2021_23_47__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Automates.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/Etats.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14__Default_Changelist_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43_[Default_Changelist]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_43__Default_Changelist_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_14_08__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/Automates.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_03_2021_23_12__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/Automates.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_12_03_2021_01_50__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_02_2021_13_53__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34_[Default_Changelist]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_03_2021_12_34__Default_Changelist_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/Images.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44_[Default_Changelist]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_09_44__Default_Changelist_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_25__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_03_2021_14_40__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/Automates.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_03_2021_23_18__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_02_2021_13_54__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/JsonDeal.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_03_2021_14_26__Default_Changelist_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateDeterministe.dot" beforeDir="false" afterPath="$PROJECT_DIR$/automateDeterministe.dot" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateDeterministe.json" beforeDir="false" afterPath="$PROJECT_DIR$/automateDeterministe.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/automateDeterministe.png" beforeDir="false" afterPath="$PROJECT_DIR$/automateDeterministe.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateInitial.dot" beforeDir="false" afterPath="$PROJECT_DIR$/automateInitial.dot" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateInitial.json" beforeDir="false" afterPath="$PROJECT_DIR$/automateInitial.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/automateInitial.png" beforeDir="false" afterPath="$PROJECT_DIR$/automateInitial.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateMinimal.dot" beforeDir="false" afterPath="$PROJECT_DIR$/automateMinimal.dot" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateMinimal.json" beforeDir="false" afterPath="$PROJECT_DIR$/automateMinimal.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateMinimal.png" beforeDir="false" afterPath="$PROJECT_DIR$/automateMinimal.png" afterDir="false" />
@@ -19,11 +59,8 @@
       <change beforePath="$PROJECT_DIR$/automateSynchro.json" beforeDir="false" afterPath="$PROJECT_DIR$/automateSynchro.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/automateSynchro.png" beforeDir="false" afterPath="$PROJECT_DIR$/automateSynchro.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Images.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Images.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/Images.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Images.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/test.dot" beforeDir="false" afterPath="$PROJECT_DIR$/test.dot" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/test.json" beforeDir="false" afterPath="$PROJECT_DIR$/test.json" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -107,17 +144,6 @@
     <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
       <module name="Automates" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
-      <option name="arquillianRunConfiguration">
-        <value>
-          <option name="containerStateName" value="" />
-        </value>
-      </option>
-      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -158,6 +184,8 @@
       <workItem from="1615067606138" duration="15975000" />
       <workItem from="1615680586016" duration="5811000" />
       <workItem from="1615850445118" duration="5099000" />
+      <workItem from="1617566792904" duration="2600000" />
+      <workItem from="1617569412227" duration="120000" />
     </task>
     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
       <created>1613828472218</created>
@@ -273,4 +301,7 @@
       </configuration>
     </watches-manager>
   </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/Automates$Pdf_PDFCreateExample.ic" NAME="Pdf$PDFCreateExample Coverage Results" MODIFIED="1616667822699" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
+  </component>
 </project>
\ No newline at end of file
Index: automateSynchro.dot
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>digraph automate {\n\trankdir=LR;\n\tsize=\"8,5\";\n    node  [shape = circle];\n    \"0\"  [style = \"filled\",color =\"gray\"];\n    \"[0]\"  [shape = \"doublecircle\"];\n    \"[3]\"  [shape = \"doublecircle\"];\n    \"[4]\"  [shape = \"doublecircle\"];\n    \"[6]\"  [shape = \"doublecircle\"];\n    \"[7]\"  [shape = \"doublecircle\"];\n    \"[7]\" -> \"[5]\" [label= \"a\"];\n    \"[7]\" -> \"[7]\" [label= \"b\"];\n    \"[5]\" -> \"[6]\" [label= \"a\"];\n    \"[5]\" -> \"[5]\" [label= \"b\"];\n    \"[6]\" -> \"[5]\" [label= \"a\"];\n    \"[6]\" -> \"[7]\" [label= \"b\"];\n    \"[3]\" -> \"[5]\" [label= \"a\"];\n    \"[3]\" -> \"[4]\" [label= \"b\"];\n    \"[4]\" -> \"[5]\" [label= \"a\"];\n    \"[4]\" -> \"[4]\" [label= \"b\"];\n    \"[1]\" -> \"[2]\" [label= \"a\"];\n    \"[1]\" -> \"[1]\" [label= \"b\"];\n    \"[2]\" -> \"[3]\" [label= \"a\"];\n    \"[2]\" -> \"[2]\" [label= \"b\"];\n    \"[0]\" -> \"[2]\" [label= \"a\"];\n    \"[0]\" -> \"[1]\" [label= \"b\"];\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/automateSynchro.dot b/automateSynchro.dot
--- a/automateSynchro.dot	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ b/automateSynchro.dot	(date 1617569566193)
@@ -2,7 +2,7 @@
 	rankdir=LR;
 	size="8,5";
     node  [shape = circle];
-    "0"  [style = "filled",color ="gray"];
+    "[0]"  [style = "filled",color ="gray"];
     "[0]"  [shape = "doublecircle"];
     "[3]"  [shape = "doublecircle"];
     "[4]"  [shape = "doublecircle"];
Index: automateSynchro.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n{\"Alphabet\":[\"a\",\"b\"],\"Init\":\"0\",\"Fin\":[\"[0]\",\"[3]\",\"[4]\",\"[6]\",\"[7]\"],\"Etats\":[\"[0]\",\"[2]\",\"[1]\",\"[3]\",\"[5]\",\"[4]\",\"[6]\",\"[7]\"],\"Transitions\":[[\"[0]\",[[\"[2]\",\"a\"],[\"[1]\",\"b\"]]],[\"[2]\",[[\"[3]\",\"a\"],[\"[2]\",\"b\"]]],[\"[1]\",[[\"[2]\",\"a\"],[\"[1]\",\"b\"]]],[\"[3]\",[[\"[5]\",\"a\"],[\"[4]\",\"b\"]]],[\"[5]\",[[\"[6]\",\"a\"],[\"[5]\",\"b\"]]],[\"[4]\",[[\"[5]\",\"a\"],[\"[4]\",\"b\"]]],[\"[6]\",[[\"[5]\",\"a\"],[\"[7]\",\"b\"]]],[\"[7]\",[[\"[5]\",\"a\"],[\"[7]\",\"b\"]]]]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/automateSynchro.json b/automateSynchro.json
--- a/automateSynchro.json	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ b/automateSynchro.json	(date 1617569566233)
@@ -1,2 +1,2 @@
 
-{"Alphabet":["a","b"],"Init":"0","Fin":["[0]","[3]","[4]","[6]","[7]"],"Etats":["[0]","[2]","[1]","[3]","[5]","[4]","[6]","[7]"],"Transitions":[["[0]",[["[2]","a"],["[1]","b"]]],["[2]",[["[3]","a"],["[2]","b"]]],["[1]",[["[2]","a"],["[1]","b"]]],["[3]",[["[5]","a"],["[4]","b"]]],["[5]",[["[6]","a"],["[5]","b"]]],["[4]",[["[5]","a"],["[4]","b"]]],["[6]",[["[5]","a"],["[7]","b"]]],["[7]",[["[5]","a"],["[7]","b"]]]]}
\ No newline at end of file
+{"Alphabet":["a","b"],"Init":"[0]","Fin":["[0]","[3]","[4]","[6]","[7]"],"Etats":["[0]","[2]","[1]","[3]","[5]","[4]","[6]","[7]"],"Transitions":[["[0]",[["[2]","a"],["[1]","b"]]],["[2]",[["[3]","a"],["[2]","b"]]],["[1]",[["[2]","a"],["[1]","b"]]],["[3]",[["[5]","a"],["[4]","b"]]],["[5]",[["[6]","a"],["[5]","b"]]],["[4]",[["[5]","a"],["[4]","b"]]],["[6]",[["[5]","a"],["[7]","b"]]],["[7]",[["[5]","a"],["[7]","b"]]]]}
\ No newline at end of file
Index: automateMinimal.dot
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>digraph automate {\n\trankdir=LR;\n\tsize=\"8,5\";\n    node  [shape = circle];\n    \"[[1]]\"  [style = \"filled\",color =\"gray\"];\n    \"[[0]]\"  [shape = \"doublecircle\"];\n    \"[[3], [4], [6], [7]]\"  [shape = \"doublecircle\"];\n    \"[[2], [5]]\" -> \"[[3], [4], [6], [7]]\" [label= \"a\"];\n    \"[[2], [5]]\" -> \"[[2], [5]]\" [label= \"b\"];\n    \"[[3], [4], [6], [7]]\" -> \"[[2], [5]]\" [label= \"a\"];\n    \"[[3], [4], [6], [7]]\" -> \"[[3], [4], [6], [7]]\" [label= \"b\"];\n    \"[[0]]\" -> \"[[2], [5]]\" [label= \"a\"];\n    \"[[0]]\" -> \"[[1]]\" [label= \"b\"];\n    \"[[1]]\" -> \"[[2], [5]]\" [label= \"a\"];\n    \"[[1]]\" -> \"[[1]]\" [label= \"b\"];\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/automateMinimal.dot b/automateMinimal.dot
--- a/automateMinimal.dot	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ b/automateMinimal.dot	(date 1617569566277)
@@ -3,14 +3,11 @@
 	size="8,5";
     node  [shape = circle];
     "[[1]]"  [style = "filled",color ="gray"];
-    "[[0]]"  [shape = "doublecircle"];
     "[[3], [4], [6], [7]]"  [shape = "doublecircle"];
     "[[2], [5]]" -> "[[3], [4], [6], [7]]" [label= "a"];
     "[[2], [5]]" -> "[[2], [5]]" [label= "b"];
     "[[3], [4], [6], [7]]" -> "[[2], [5]]" [label= "a"];
     "[[3], [4], [6], [7]]" -> "[[3], [4], [6], [7]]" [label= "b"];
-    "[[0]]" -> "[[2], [5]]" [label= "a"];
-    "[[0]]" -> "[[1]]" [label= "b"];
     "[[1]]" -> "[[2], [5]]" [label= "a"];
     "[[1]]" -> "[[1]]" [label= "b"];
 }
\ No newline at end of file
Index: automateMinimal.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n{\"Alphabet\":[\"a\",\"b\",\"eps\"],\"Init\":\"[[1]]\",\"Fin\":[\"[[0]]\",\"[[3], [4], [6], [7]]\"],\"Etats\":[\"[[0]]\",\"[[2], [5]]\",\"[[3], [4], [6], [7]]\",\"[[1]]\"],\"Transitions\":[[\"[[0]]\",[[\"[[2], [5]]\",\"a\"],[\"[[1]]\",\"b\"]]],[\"[[2], [5]]\",[[\"[[3], [4], [6], [7]]\",\"a\"],[\"[[2], [5]]\",\"b\"]]],[\"[[3], [4], [6], [7]]\",[[\"[[2], [5]]\",\"a\"],[\"[[3], [4], [6], [7]]\",\"b\"]]],[\"[[1]]\",[[\"[[2], [5]]\",\"a\"],[\"[[1]]\",\"b\"]]]]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/automateMinimal.json b/automateMinimal.json
--- a/automateMinimal.json	(revision e49263010073513fbe2b9fc4c6a78929efb6e883)
+++ b/automateMinimal.json	(date 1617569566325)
@@ -1,2 +1,2 @@
 
-{"Alphabet":["a","b","eps"],"Init":"[[1]]","Fin":["[[0]]","[[3], [4], [6], [7]]"],"Etats":["[[0]]","[[2], [5]]","[[3], [4], [6], [7]]","[[1]]"],"Transitions":[["[[0]]",[["[[2], [5]]","a"],["[[1]]","b"]]],["[[2], [5]]",[["[[3], [4], [6], [7]]","a"],["[[2], [5]]","b"]]],["[[3], [4], [6], [7]]",[["[[2], [5]]","a"],["[[3], [4], [6], [7]]","b"]]],["[[1]]",[["[[2], [5]]","a"],["[[1]]","b"]]]]}
\ No newline at end of file
+{"Alphabet":["a","b","eps"],"Init":"[[1]]","Fin":["[[3], [4], [6], [7]]"],"Etats":["[[2], [5]]","[[3], [4], [6], [7]]","[[1]]"],"Transitions":[["[[2], [5]]",[["[[3], [4], [6], [7]]","a"],["[[2], [5]]","b"]]],["[[3], [4], [6], [7]]",[["[[2], [5]]","a"],["[[3], [4], [6], [7]]","b"]]],["[[1]]",[["[[2], [5]]","a"],["[[1]]","b"]]]]}
\ No newline at end of file
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_03_2021_11_14_[Default_Changelist]1/shelved.patch
deleted file mode 100644
