Index: src/main/java/Images.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.sun.xml.internal.ws.commons.xmlutil.Converter;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport javax.swing.*;\nimport java.lang.Object;\nimport java.io.*;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class Images {\n    /**\n     * @param jsonFile : Nom du fichier json a convertir en dot\n     * @param path     : le chemin dans lequel on veut créer le fichier dot\n     * @brief : cette fonction crée un fichier .dot à partir d'un fichier .json\n     */\n    public void jsonToDot(String jsonFile, String path) {\n        String header = \"digraph automate {\\n\" +\n                \"\\trankdir=LR;\\n\" +\n                \"\\tsize=\\\"8,5\\\";\\n\" +\n                \"    node  [shape = circle];\";\n        String footer = \"}\";\n        String attributsEtats = \" [shape = circle];\";\n        String attributsEtatInitial = \" [style = \\\"filled\\\",color =\\\"gray\\\"];\";\n        String attributsEtatsFinaux = \" [shape = \\\"doublecircle\\\"];\";\n        String transitionGv = \"\";\n        String src;\n        String dst;\n        String lbl;\n        String etatfinalChaine = \"\";\n        JSONParser jsonParser = new JSONParser();\n        try {\n\n            JsonDeal jsonDeal = new JsonDeal();\n            Automates automates = jsonDeal.json_to_automate(jsonFile);\n            String etatInitial = automates.getEtatDepart().getNom();\n            List<Etats> etatFinal = automates.getEtatsArrivee();\n            // Création du fichier .gv\n            BufferedWriter b = new BufferedWriter(new FileWriter(path));\n            System.out.println(\"Fichier \" + path + \" crée avec succes.\");\n            b.write(header);\n            // Generer la ligne pour les etats initials\n            b.write(\"\\r\\n\" + \"    \" + this.entreGuillemets(etatInitial) + \" \" + attributsEtatInitial);\n            // Generer la ligne pour les etats finaux\n            for (int i = 0; i < etatFinal.size(); i++) {\n                b.write(\"\\r\\n\" + \"    \" + this.entreGuillemets(etatFinal.get(i).getNom().toString().trim()) + \" \" + attributsEtatsFinaux);\n            }\n\n            // Ecrire les transitions dans le fichier .gv\n            for (int i = 0; i < automates.getEtats().size(); i++) {\n                Etats e = automates.getEtats().get(i);\n                src = e.getNom().toString().trim();\n                ArrayList ar = e.getTransitions();\n                for (int j = 0; j < ar.size(); j++) {\n                    ArrayList tr = (ArrayList) ar.get(j);\n                    dst = tr.get(0).toString().trim();\n                    lbl = tr.get(1).toString().trim();\n                    transitionGv = \"    \" + this.entreGuillemets(src) + \" -> \" + this.entreGuillemets(dst) + \" \" + \"[label= \\\"\" + lbl + \"\\\"];\";\n                    b.write(\"\\r\\n\" + transitionGv);\n                }\n            }\n\n            b.write(\"\\r\\n\" + footer);\n            b.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @param mot : Le mot auquel on doit mettre des guillemets\n     * @brief : Fonction qui met des guillemets autour d'un mot\n     */\n    public String entreGuillemets(String mot) {\n        return (\"\\\"\" + mot + \"\\\"\");\n    }\n\n    /**\n     * @param automates : L'automate à partir duquel on crée le sujet de l'etudiant\n     * @brief : Fonction qui crée un fichier TeX à partir d'un automate donné\n     */\n    public void latexCreate(Automates automates) throws IOException {\n        Images images = new Images();\n        JsonDeal jsonDeal = new JsonDeal();\n        CommandExec commandExec = new CommandExec();\n\n\n        // Create the JSONObject for the initial automate\n        JSONObject object = jsonDeal.automate_to_json(automates);\n        // Create the .json for initial automate\n        jsonDeal.jsonToJsonFile(object, \"automateInitial\");\n        // Create initial Automate .dot file\n        images.jsonToDot(\"automateInitial.json\", \"automateInitial.dot\");\n        // Create initial automate .png\n        commandExec.generateImageCommand(\"automateInitial\");\n\n\n        // Create the JSONObject for the sychro automate\n        System.out.println(\"synch\");\n        object = jsonDeal.automate_to_json(automates.synch3());\n        System.out.println(object);\n        // Create the .json for synchro automate\n        jsonDeal.jsonToJsonFile(object, \"automateSynchro\");\n        // Create synchro Automate .dot file\n        images.jsonToDot(\"automateSynchro.json\", \"automateSynchro.dot\");\n        // Create synchro automate .png\n        commandExec.generateImageCommand(\"automateSynchro\");\n\n        // Create the JSONObject for the determinist automate\n        object = jsonDeal.automate_to_json(automates.determiniser());\n        // Create the .json for determinist automate\n        jsonDeal.jsonToJsonFile(object, \"automateDeterministe\");\n        System.out.println(object);\n        // Create determinist Automate .dot file\n        images.jsonToDot(\"automateDeterministe.json\", \"automateDeterministe.dot\");\n        // Create determinist automate .png\n        commandExec.generateImageCommand(\"automateDeterministe\");\n\n\n\n\n        // Create the JSONObject for the minimal automate\n        object = jsonDeal.automate_to_json(automates.minimiser());\n        System.out.println(\"mi\");\n        System.out.println(object);\n        // Create the .json for minimal automate\n        jsonDeal.jsonToJsonFile(object, \"automateMinimal\");\n        // Create minimal Automate .dot file\n        images.jsonToDot(\"automateMinimal.json\", \"automateMinimal.dot\");\n        // Create minimal automate .png\n        commandExec.generateImageCommand(\"automateMinimal\");\n\n\n\n        // Replace the picture into the TeX file\n        Path path = Paths.get(\"test.tex\");\n        Charset charset = StandardCharsets.UTF_8;\n\n        String content = new String(Files.readAllBytes(path), charset);\n        content = content.replaceAll(\"#AUTOMATEINITIAL\", \"automateInitial.png\");\n        content = content.replaceAll(\"#AUTOMATEDETERMINISTE\", \"automateDeterministe.png\");\n        content = content.replaceAll(\"#AUTOMATEMINIMISE\", \"automateMinimal.png\");\n        content = content.replaceAll(\"#AUTOMATESYNCHRO\", \"automateSynchro.png\");\n        try {\n            Files.write(path, content.getBytes(charset));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Images.java b/src/main/java/Images.java
--- a/src/main/java/Images.java	
+++ b/src/main/java/Images.java	
@@ -75,6 +75,7 @@
         }
     }
 
+
     /**
      * @param mot : Le mot auquel on doit mettre des guillemets
      * @brief : Fonction qui met des guillemets autour d'un mot
@@ -83,6 +84,7 @@
         return ("\"" + mot + "\"");
     }
 
+
     /**
      * @param automates : L'automate à partir duquel on crée le sujet de l'etudiant
      * @brief : Fonction qui crée un fichier TeX à partir d'un automate donné
@@ -92,7 +94,6 @@
         JsonDeal jsonDeal = new JsonDeal();
         CommandExec commandExec = new CommandExec();
 
-
         // Create the JSONObject for the initial automate
         JSONObject object = jsonDeal.automate_to_json(automates);
         // Create the .json for initial automate
@@ -124,9 +125,6 @@
         // Create determinist automate .png
         commandExec.generateImageCommand("automateDeterministe");
 
-
-
-
         // Create the JSONObject for the minimal automate
         object = jsonDeal.automate_to_json(automates.minimiser());
         System.out.println("mi");
@@ -138,8 +136,6 @@
         // Create minimal automate .png
         commandExec.generateImageCommand("automateMinimal");
 
-
-
         // Replace the picture into the TeX file
         Path path = Paths.get("test.tex");
         Charset charset = StandardCharsets.UTF_8;
Index: Automates.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Automates.iml b/Automates.iml
deleted file mode 100644
--- a/Automates.iml	
+++ /dev/null	
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="java-json" level="project" />
-    <orderEntry type="library" name="Maven: com.googlecode.json-simple:json-simple:1.1" level="project" />
-    <orderEntry type="library" name="Maven: com.itextpdf:itextpdf:5.5.10" level="project" />
-    <orderEntry type="library" name="Maven: org.apache.pdfbox:pdfbox:2.0.4" level="project" />
-    <orderEntry type="library" name="Maven: org.apache.pdfbox:fontbox:2.0.4" level="project" />
-    <orderEntry type="library" name="Maven: commons-logging:commons-logging:1.2" level="project" />
-    <orderEntry type="library" name="Maven: org.bouncycastle:bcprov-jdk15on:1.56" level="project" />
-  </component>
-</module>
\ No newline at end of file
