Index: src/main/java/Automates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Automates {\n    Stack<String> automates = new Stack();\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee;\n    private List<Etats> etats;\n    private List<String> alphabet;\n\n    public Automates() {\n    }\n\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return this.etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return this.etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return this.etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return this.alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    public void toMatrice() {\n    }\n\n    public void determiniser() {\n    }\n\n\n\n    boolean presentIn(char mot, String[] alphabet) {\n        boolean not_preset = true;\n\n        for(int i = 0; i < alphabet.length; ++i) {\n            if (alphabet[i].equals(String.valueOf(mot))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public Automates thompson(String expression, String[] alpha) {\n        Stack<Automates> pileA = new Stack();\n        Stack<Character> pileM = new Stack();\n        int etati = 0;\n\n\n        for(int i = 0; i < expression.length(); ++i) {\n            Automates ap;\n            ArrayList apEtats;\n\n            /* cas ou c est un charactere de l alphabet */\n            if (!this.presentIn(expression.charAt(i), alpha)) {\n                ap = new Automates();\n                Etats etd = new Etats();\n                etd.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etf = new Etats();\n                etf.setNom(String.valueOf(etati));\n                ++etati;\n                ArrayList<String> config = new ArrayList();\n                config.add(etf.getNom());\n                config.add(String.valueOf(expression.charAt(i)));\n                ArrayList trs = new ArrayList();\n                ArrayList trs1 = new ArrayList();\n                etf.setTransitions(trs);\n                trs1.add(config);\n                etd.setTransitions(trs1);\n                List<Etats> etfs = new ArrayList();\n                etfs.add(etf);\n                List<String> al = this.alphabet;\n                apEtats = new ArrayList();\n                apEtats.add(etd);\n                apEtats.add(etf);\n                ap.setAlphabet(al);\n                ap.setEtats(apEtats);\n                ap.setEtatsArrivee(etfs);\n                ap.setEtatDepart(etd);\n                pileA.push(ap);\n            }\n\n            if (expression.charAt(i) == '(') {\n                System.out.println(\"(\");\n            }\n\n            if (expression.charAt(i) == '.') {\n                pileM.push('.');\n                System.out.println(\".\");\n            }\n\n            if (expression.charAt(i) == '+') {\n                pileM.push('+');\n                System.out.println(\"+\");\n            }\n\n            ArrayList config1;\n            ArrayList config2;\n            ArrayList trF;\n            String ed1;\n            if (expression.charAt(i) == '*') {\n                System.out.println(\"*\");\n                ap = (Automates)pileA.pop();\n                Automates a = new Automates();\n                new ArrayList();\n                List<Etats> etats = ap.getEtats();\n                String ed = ap.getEtatDepart().getNom();\n                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();\n                Etats etatD = new Etats();\n                etatD.setNom(String.valueOf(etati));\n                ++etati;\n                Etats etatF = new Etats();\n                etatF.setNom(String.valueOf(etati));\n                ArrayList etfss = new ArrayList();\n                etatF.setTransitions(etfss);\n                ++etati;\n                apEtats = new ArrayList();\n                apEtats.add(etatF);\n                ArrayList trD = new ArrayList();\n                config1 = new ArrayList();\n                config1.add(etatF.getNom());\n                config1.add(\"eps\");\n                trD.add(config1);\n                config2 = new ArrayList();\n                config2.add(ed);\n                config2.add(\"eps\");\n                trD.add(config2);\n                etatD.setTransitions(trD);\n\n                for(int j = 0; j < etats.size(); ++j) {\n                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(etatF.getNom());\n                        config3.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(config3);\n                        trF = new ArrayList();\n                        trF.add(ed);\n                        trF.add(\"eps\");\n                        ((Etats)etats.get(j)).getTransitions().add(trF);\n                    }\n                }\n\n                etats.add(etatD);\n                etats.add(etatF);\n                a.setEtatsArrivee(apEtats);\n                a.setEtats(etats);\n                a.setEtatDepart(etatD);\n                a.setAlphabet(ap.getAlphabet());\n                pileA.push(a);\n            }\n\n            if (expression.charAt(i) == ')') {\n                System.out.println(\")\");\n                ap = new Automates();\n                char exp = (Character)pileM.pop();\n                Automates ap2 = (Automates)pileA.pop();\n                Automates ap1 = (Automates)pileA.pop();\n                ed1 = ap1.getEtatDepart().getNom();\n                String ed2 = ap2.getEtatDepart().getNom();\n                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();\n                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();\n                ap.setAlphabet(ap2.getAlphabet());\n                apEtats = new ArrayList();\n\n                int j;\n                for(j = 0; j < ap1.getEtats().size(); ++j) {\n                    apEtats.add(ap1.getEtats().get(j));\n                }\n\n                for(j = 0; j < ap2.getEtats().size(); ++j) {\n                    apEtats.add(ap2.getEtats().get(j));\n                }\n\n                ap.setEtats(apEtats);\n                switch(exp) {\n                    case '+':\n                        Etats etatsD = new Etats();\n                        etatsD.setNom(String.valueOf(etati));\n                        ++etati;\n                        config1 = new ArrayList();\n                        config1.add(String.valueOf(ed1));\n                        config1.add(\"eps\");\n                        config2 = new ArrayList();\n                        config2.add(String.valueOf(ed2));\n                        config2.add(\"eps\");\n                        ArrayList trD = new ArrayList();\n                        trD.add(config1);\n                        trD.add(config2);\n                        etatsD.setTransitions(trD);\n                        ap.getEtats().add(etatsD);\n                        Etats etatsF = new Etats();\n                        etatsF.setNom(String.valueOf(etati));\n                        ++etati;\n                        trF = new ArrayList();\n                        etatsF.setTransitions(trF);\n                        ap.getEtats().add(etatsF);\n                        ArrayList<String> config3 = new ArrayList();\n                        config3.add(String.valueOf(etatsF.getNom()));\n                        config3.add(\"eps\");\n                        ArrayList<String> config4 = new ArrayList();\n                        config4.add(String.valueOf(etatsF.getNom()));\n                        config4.add(\"eps\");\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);\n                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);\n                        List<Etats> efs = new ArrayList();\n                        efs.add(etatsF);\n                        ap.setEtatDepart(etatsD);\n                        ap.setEtatsArrivee(efs);\n                        pileA.push(ap);\n                        break;\n                    case '.':\n                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());\n                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());\n                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());\n                        ap.getEtats().remove(indiceD2);\n                        ap.setEtatDepart(ap1.getEtatDepart());\n                        ap.setEtatsArrivee(ap2.getEtatsArrivee());\n                        pileA.push(ap);\n                }\n            }\n        }\n\n        return (Automates)pileA.pop();\n    }\n\n\n\n    public int get_etat(Automates automates, String nom) {\n        for(int i = 0; i < automates.getEtats().size(); ++i) {\n            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n\n\n\n    public void synch3(){\n\n        List<Etats> etats = this.getEtats();\n\n        /* etape1 : calcule des eps-transitivitées */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat0 = etats.get(i);\n            for (int j = 0; j < etat0.getTransitions().size(); j++){\n                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);\n                if (config0.get(1) == \"eps\"){\n                    int et = this.get_etat(this, config0.get(0).toString());\n\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){\n                            this.getEtatsArrivee().add(etat0);\n                        }\n                    }\n                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){\n                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);\n                        if (config1.get(1) == \"eps\"){\n                            etat0.getTransitions().add(config1);\n                        }\n                    }\n                }\n            }\n        }\n\n        /* etape 2 calcule des transitivités sans epsilons */\n        for (int i = 0; i < etats.size(); i++){\n            Etats etat_courant = etats.get(i);\n\n            for (int j = 0; j < etat_courant.getTransitions().size(); j++){\n                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);\n                if (config.get(1) == \"eps\"){\n                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));\n                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){\n                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){\n                            this.getEtatsArrivee().add(etat_courant);\n                        }\n                    }\n\n                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){\n                        ArrayList trans = etat_inter.getTransitions();\n                        for (int s = 0; s < trans.size(); s++){\n                            ArrayList config1 = (ArrayList) trans.get(s);\n                            if (config1.get(1) != \"eps\"){\n                                etat_courant.getTransitions().add(config1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n        /* etape 3 : suppression des eps-transitions */\n        for ( int i = 0 ; i < this.getEtats().size(); i++){\n            ArrayList trs = new ArrayList();\n            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){\n                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);\n                if(a.get(1) != \"eps\"){\n                    if ( ! trs.contains(a)){\n                        trs.add(a);\n                    }\n                }\n            }\n            this.getEtats().get(i).setTransitions(trs);\n        }\n\n        /* etape 4: suppression des etats non accessibles et des transitions double */\n        ArrayList<String> etats_acce = new ArrayList<String>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            String nom = this.getEtats().get(i).getNom();\n            for (int j = 0; j < this.getEtats().size(); j++){\n                ArrayList transitions = this.getEtats().get(j).getTransitions();\n                for ( int k = 0; k < transitions.size(); k++){\n                    ArrayList conf = (ArrayList) transitions.get(k);\n                    if (conf.get(0) == nom){\n                        etats_acce.add(nom);\n                    }\n                }\n            }\n            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){\n                etats_acce.add(this.getEtats().get(i).getNom());\n            }\n        }\n\n\n        /* definition des nouveaux etats */\n        ArrayList<Etats> etts = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtats().size(); i++){\n            if (etats_acce.contains(this.getEtats().get(i).getNom())){\n                etts.add(this.getEtats().get(i));\n            }\n        }\n        this.setEtats(etts);\n\n        /* definition des nouveaux etats finaux */\n        ArrayList<Etats> arr = new ArrayList<Etats>();\n        for (int i = 0; i < this.getEtatsArrivee().size(); i++){\n            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){\n                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));\n                if (!arr.contains(ett)){\n                    arr.add(ett);\n                }\n            }\n        }\n        this.setEtatsArrivee(arr);\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
--- a/src/main/java/Automates.java	
+++ b/src/main/java/Automates.java	
@@ -8,7 +8,6 @@
 import java.util.Stack;
 
 public class Automates {
-    Stack<String> automates = new Stack();
     private Etats etatDepart;
     private List<Etats> etatsArrivee;
     private List<Etats> etats;
