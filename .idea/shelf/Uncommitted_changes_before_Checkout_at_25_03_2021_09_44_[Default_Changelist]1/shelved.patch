Index: src/main/java/Images.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport com.sun.xml.internal.ws.commons.xmlutil.Converter;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport javax.swing.*;\nimport java.lang.Object;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class Images {\n    /**\n     * @param jsonFile : Nom du fichier json a convertir en dot\n     * @param path     : le chemin dans lequel on veut créer le fichier dot\n     * @brief : cette fonction crée un fichier .dot à partir d'un fichier .json\n     */\n    public void jsonToDot(String jsonFile, String path) {\n        String header = \"digraph automate {\\n\" +\n                \"\\trankdir=LR;\\n\" +\n                \"\\tsize=\\\"8,5\\\";\\n\" +\n                \"    node  [shape = circle];\";\n        String footer = \"}\";\n        String attributsEtats = \" [shape = circle];\";\n        String attributsEtatInitial = \" [style = \\\"filled\\\",color =\\\"gray\\\"];\";\n        String attributsEtatsFinaux = \" [shape = \\\"doublecircle\\\"];\";\n        String transitionGv = \"\";\n        String src;\n        String dst;\n        String lbl;\n        String etatfinalChaine = \"\";\n        JSONParser jsonParser = new JSONParser();\n        try {\n\n            JsonDeal jsonDeal = new JsonDeal();\n            Automates automates = jsonDeal.json_to_automate(jsonFile);\n            String etatInitial = automates.getEtatDepart().getNom();\n            List<Etats> etatFinal = automates.getEtatsArrivee();\n            // Création du fichier .gv\n            BufferedWriter b = new BufferedWriter(new FileWriter(path));\n            System.out.println(\"Fichier cree avec succes\");\n            b.write(header);\n            // Generer la ligne pour les etats initials\n            b.write(\"\\r\\n\" + \"    \" + etatInitial + \" \" + attributsEtatInitial);\n            // Generer la ligne pour les etats finaux\n            for (int i = 0; i < etatFinal.size(); i++) {\n                b.write(\"\\r\\n\" + \"    \" + etatFinal.get(i).getNom().toString().trim() + \" \" + attributsEtatsFinaux);\n            }\n\n            // Ecrire les transitions dans le fichier .gv\n            for (int i = 0; i < automates.getEtats().size(); i++) {\n                Etats e = automates.getEtats().get(i);\n                src = e.getNom().toString().trim();\n                ArrayList ar = e.getTransitions();\n                for (int j = 0; j < ar.size(); j++) {\n                    ArrayList tr = (ArrayList) ar.get(j);\n                    dst = tr.get(0).toString().trim();\n                    lbl = tr.get(1).toString().trim();\n                    transitionGv = \"    \" + src + \" -> \" + dst + \" \" + \"[label= \\\"\" + lbl + \"\\\"];\";\n                    b.write(\"\\r\\n\" + transitionGv);\n                }\n            }\n\n            b.write(\"\\r\\n\" + footer);\n            b.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void latexCreate() {\n        String latexString = \"\\\\documentclass{minimal}\\n\" +\n                \"\\\\usepackage[autosize]{dot2texi}\\n\" +\n                \"\\\\usepackage[pdf]{graphviz}\\n\" +\n                \"\\\\usepackage{amsmath}\\n\" +\n                \"\\\\usepackage{graphicx}\\n\" +\n                \"\\\\usepackage{tikz}\\n\" +\n                \"\\\\usetikzlibrary{shapes,arrows}\\n\" +\n                \"\\n\" +\n                \"\\\\begin{document}\\n\" +\n                \"    \\\\vskip 5mm\\n\" +\n                \"    \\\\textbf{Composer sur feuille papier; numérisez votre copie (photos, scanner), puis déposez-la sur Teams, dans l'équipe du cours de Langages Formels, dans le devoir \\\"CC1\\\" avant 13h50; prévoyez 10 minutes pour le scan/dépôt!} \\\\\\\\\\n\" +\n                \"\\n\" +\n                \"    Essayez si possible de deposer un fichier PDF unique avec vos differentes pages, que vous pouvez obtenir avec une app du type CamScanner.\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"    \\\\textbf{Les rendus en retard (après 13h50) pourront être pénalisés.}\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"    \\\\emph{A composer seul. Les échanges avec toute autre personne sont interdits.}\\\\\\\\\\n\" +\n                \"\\n\" +\n                \"    On dispose de l'automate suivant\\n\" +\n                \"\\n\" +\n                \"    \\\\begin{enumerate}\\n\" +\n                \"        \\\\setcounter{enumi}{-1}\\n\" +\n                \"        \\\\begin{dot2tex}[neato,mathmode]\\n\" +\n                \"            %AutomateInitial\\n\" +\n                \"        \\\\end{dot2tex}\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 1 - Déterminisez l'automate.\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 2 - Normalisez l'automate.\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 3 - Indiquez si l'automate accepte les mots suivants..\\n\" +\n                \"        \\\\newline\\n\" +\n                \"    \\\\end{enumerate}\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"\\n\" +\n                \"    \\\\textbf{SOLUTIONS : }\\n\" +\n                \"    \\\\begin{enumerate}\\n\" +\n                \"\\n\" +\n                \"        \\\\item 1- Automate déterministe :\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\begin{dot2tex}[neato,mathmode]\\n\" +\n                \"            %AutomateDeterministe\\n\" +\n                \"        \\\\end{dot2tex}\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\item 2 - Automate normalisé :\\n\" +\n                \"        \\\\newline\\n\" +\n                \"        \\\\begin{dot2tex}[neato,mathmode]\\n\" +\n                \"            %AutomateNormalise\\n\" +\n                \"        \\\\end{dot2tex}\\n\" +\n                \"\\n\" +\n                \"    \\\\end{enumerate}\\n\" +\n                \"\\n\" +\n                \"\\\\end{document}\\n\" +\n                \"\\n\";\n        try {\n            BufferedWriter b = new BufferedWriter(new FileWriter(\"/home/rayani00/IdeaProjects/Automates/latex.tex\"));\n            System.out.println(\"Fichier cree avec succes\");\n            b.write(latexString);\n            b.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n\n    }\n\n\n}\n\n
===================================================================
diff --git a/src/main/java/Images.java b/src/main/java/Images.java
--- a/src/main/java/Images.java	
+++ b/src/main/java/Images.java	
@@ -71,6 +71,17 @@
         }
     }
 
+    public void automateToJsonFile(Automates automate) throws IOException {
+        JsonDeal jsonDeal = new JsonDeal();
+        JSONObject object = jsonDeal.automate_to_json(automate);
+        String jsonFileContent = object.toJSONString();
+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("/home/rayani00/IdeaProjects/Automates/automateJson.json"));
+        System.out.println("Fichier 'automateJson.json' crée avec succes");
+        bufferedWriter.write(jsonFileContent);
+        bufferedWriter.close();
+
+    }
+
     public void latexCreate() {
         String latexString = "\\documentclass{minimal}\n" +
                 "\\usepackage[autosize]{dot2texi}\n" +
Index: src/main/java/Latex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.json.simple.JSONObject;\n\npublic class Latex {\n    public void subjectCreator(Automates automate){\n        JsonDeal jsonDeal = new JsonDeal();\n        JSONObject object = jsonDeal.automate_to_json(automate);\n\n    }\n}\n
===================================================================
diff --git a/src/main/java/Latex.java b/src/main/java/Latex.java
--- a/src/main/java/Latex.java	
+++ b/src/main/java/Latex.java	
@@ -1,9 +1,33 @@
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
 import org.json.simple.JSONObject;
 
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Scanner;
+
+
 public class Latex {
-    public void subjectCreator(Automates automate){
-        JsonDeal jsonDeal = new JsonDeal();
-        JSONObject object = jsonDeal.automate_to_json(automate);
+    public void subjectCreator(Automates automate) throws IOException {
+        Images images = new Images();
+        String automateInitial = "";
+        String automateMinimise = "Bite";
+        String automateDeterministe = "Bite";
+        Path path = Paths.get("test.tex");
+        Charset charset = StandardCharsets.UTF_8;
+        String content = new String(Files.readAllBytes(path), charset);
+        images.jsonToDot("test.json", "/home/rayani00/IdeaProjects/Automates/test.dot");
+        Scanner sc = new Scanner(new File("test.dot"));
+        automateInitial = IOUtils.toString(new FileReader("test.dot"));
+        System.out.println(automateInitial);
+        content = content.replaceAll("#AutomateInitial", automateInitial);
+        Files.write(path, content.getBytes(charset));
 
     }
 }
Index: test.dot
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>digraph test {rankdir=LR;\nsize=\"8,5\";\nnode [shape = circle];\n0 [style = \"filled\",color =\"gray\"];\n2 [shape = \"doublecircle\"];\n1 [shape = \"doublecircle\"];\n0 -> 0 [label= \"a\"];\n0 -> 1 [label= \"b\"];\n0 -> 1 [label= \"d\"];\n1 -> 1 [label= \"c\"];\n1 -> 3 [label= \"a\"];\n1 -> 3 [label= \"b\"];\n2 -> 2 [label= \"a\"];\n2 -> 3 [label= \"a\"];}\n
===================================================================
diff --git a/test.dot b/test.dot
--- a/test.dot	
+++ b/test.dot	
@@ -1,14 +1,16 @@
-digraph test {rankdir=LR;
-size="8,5";
-node [shape = circle];
-0 [style = "filled",color ="gray"];
-2 [shape = "doublecircle"];
-1 [shape = "doublecircle"];
-0 -> 0 [label= "a"];
-0 -> 1 [label= "b"];
-0 -> 1 [label= "d"];
-1 -> 1 [label= "c"];
-1 -> 3 [label= "a"];
-1 -> 3 [label= "b"];
-2 -> 2 [label= "a"];
-2 -> 3 [label= "a"];}
+digraph automate {
+	rankdir=LR;
+	size="8,5";
+    node  [shape = circle];
+    0  [style = "filled",color ="gray"];
+    2  [shape = "doublecircle"];
+    1  [shape = "doublecircle"];
+    0 -> 0 [label= "a"];
+    0 -> 1 [label= "b"];
+    0 -> 1 [label= "d"];
+    1 -> 1 [label= "c"];
+    1 -> 3 [label= "a"];
+    1 -> 3 [label= "b"];
+    2 -> 2 [label= "a"];
+    2 -> 3 [label= "a"];
+}
\ No newline at end of file
