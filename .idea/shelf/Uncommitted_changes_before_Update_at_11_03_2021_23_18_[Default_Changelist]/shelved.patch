Index: src/main/java/JsonDeal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class JsonDeal {\n\n\n    /*\n    Generation d'un automate aleatoirement les parametres sont le nombres\n    d'etats, le nombre de transitions, une liste d'alphabet\n     */\n\n    public static Etats creerEtatGrp(String destinations,String depart,String lettre){\n\n        return null;\n    }\n\n    public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {\n        Random random = new Random();\n\n        /*\n        Obtenir une liste contenant nb_etats etats numerotés de 0 jusque a nb_etats-1 [0,1,2] si n = 3\n         */\n        ArrayList<String> etats = new ArrayList<String>();\n        for (int i = 0; i < nb_etats; i++) {\n            etats.add(String.valueOf(i));\n        }\n\n\n        /*\n        generation aleatoire de transition, une transition est un triplet etat_depart, mot lu, etat_arrive\n        on cree une map qui va avoir comme kle des indices d'etats et comme valeur les differentes\n        configuration que cet etat peut suivre {1: [[0, a], [1,b]],\n                                                2: [[2,a],[2,b]]\n                                                }\n         */\n        HashMap<String, ArrayList<ArrayList<String>>> transitions = new HashMap<String, ArrayList<ArrayList<String>>>();\n        for (int j = 0; j < nb_transition; j++) {\n            /*\n            le treplet etat_depart, mot, etat_arrive est genere à chaque eteration de la boucle,\n            le mot et l'etat_arrive forment une configuration represente par \"transition\" [0, a]\n             */\n            String depart = String.valueOf(random.nextInt(nb_etats));\n            String destination = String.valueOf(random.nextInt(nb_etats));\n            String mot = alphabet.get(random.nextInt(alphabet.size()));\n            ArrayList<String> transition = new ArrayList<String>();\n            transition.add(0, destination);\n            transition.add(1, mot);\n\n            /*\n            on assure que chaque etat de depart ne va pas se repeter en utilisant une map qui va\n            contenir l etat_depart comme cle, une liste de transition (liste ) comme valeur\n                                    1:[[0,a], [0,b]]\n             */\n            if (transitions.containsKey(depart)) {\n                ArrayList<ArrayList<String>> arrayList = transitions.get(depart);\n                arrayList.add(transition);\n                transitions.put(depart, arrayList);\n            } else {\n                ArrayList<ArrayList<String>> config = new ArrayList<ArrayList<String>>();\n                config.add(transition);\n                transitions.put(depart, config);\n            }\n        }\n\n        /*\n        on cree la liste d'etats que va contenir notre automate\n        on enitialise pour chque item de la map un objet de la classe Etats\n        et on l'ajoute a la liste etatsListe\n         */\n        List<Etats> etatsList = new ArrayList<Etats>();\n        for (Map.Entry<String, ArrayList<ArrayList<String>>> entry: transitions.entrySet()){\n            Etats etats1 = new Etats();\n            etats1.setNom(entry.getKey());\n            etats1.setTransitions(entry.getValue());\n            etatsList.add(etats1);\n        }\n\n        /*\n        notre automate est pret a etre instancie et a se balader dans la memoire\n        par contre il reste de definir l'etat initiale et l'ensemble d'etats fineaux\n         a*/\n        Automates automates = new Automates();\n        automates.setEtats(etatsList);\n        automates.setAlphabet(alphabet);\n\n        int n = automates.getEtats().size();\n        /*\n        l'etat initiale est tire aleatoirement parmi les etats qu'on a\n         */\n        automates.setEtatDepart(automates.getEtats().get(random.nextInt(n)));\n\n        /*\n        la cardinalite de l'ensemble d'etats fineaux est tire au hasard et donc un nombre = card\n        d'etats fineaux est selectionne\n         */\n        int m = random.nextInt(n);\n        if (m == 0){\n            m += 1;\n        }\n        ArrayList<Etats> finale = new ArrayList<Etats>();\n        for (int i = 0; i < m; i++){\n            finale.add(automates.getEtats().get(i));\n        }\n        automates.setEtatsArrivee(finale);\n\n        return automates;\n\n    }\n\n\n\n    /* partir depuis une representation json vers des objets java ensuite vers notre objet automate */\n    public Automates json_to_automate(String path){\n        Automates automates = new Automates();\n\n        JSONParser jsonParser = new JSONParser();\n\n        try {\n            /* lecture du fichier json */\n            JSONObject ob = (JSONObject) jsonParser.parse(new FileReader(path));\n\n            /* on recupere la representation de l'automate depuis le fichier json */\n            ArrayList alpha = (ArrayList) ob.get(\"Alphabet\");\n            JSONArray etats = (JSONArray) ob.get(\"Etats\");\n            String init = ob.get(\"Init\").toString();\n            JSONArray fin = (JSONArray) ob.get(\"Fin\");\n            JSONArray trans = (JSONArray) ob.get(\"Transitions\");\n\n            /*on cree une map qui va contenir pour chaque etat ses transitions */\n            HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();\n\n            /* les differentes listes utilisees par notre automate */\n            ArrayList<String> alphabet = new ArrayList<String>();\n            ArrayList<Etats> etatsArrayList = new ArrayList<Etats>();\n            ArrayList<Etats> fineaux = new ArrayList<Etats>();\n            Etats etat_depart = new Etats();\n\n            for (int i = 0; i < alpha.size(); i++){\n                alphabet.add(alpha.get(i).toString());\n            }\n\n            ArrayList aut_trans = new ArrayList();\n\n            for (int i = 0; i < trans.size(); i++){\n                ArrayList transi = (ArrayList) trans.get(i);\n\n                String depart = transi.get(0).toString();\n                ArrayList config = (ArrayList) transi.get(1);\n\n                /* building a list of configurations */\n                ArrayList aut_config = new ArrayList();\n                for (int j = 0; j < config.size(); j++){\n\n                    ArrayList<String> aut_conf = new ArrayList<String>();\n                    /* getting the basic configuration [0, a] from json format to arraylist aut_conf */\n                    ArrayList conf = (ArrayList) config.get(j);\n                    String arrive = conf.get(0).toString();\n                    String mot = conf.get(1).toString();\n\n                    aut_conf.add(arrive);\n                    aut_conf.add(mot);\n                    aut_config.add(aut_conf);\n\n                }\n                hashMap.put(depart, aut_config);\n            }\n\n            for (Map.Entry<String, ArrayList> entry: hashMap.entrySet()){\n                Etats etats1 = new Etats();\n                etats1.setNom(entry.getKey());\n                etats1.setTransitions(entry.getValue());\n\n                etatsArrayList.add(etats1);\n            }\n            /*depart*/\n            etat_depart.setNom(init);\n            etat_depart.setTransitions(hashMap.get(init));\n\n            /*finaux*/\n            ArrayList<Etats> finos = new ArrayList<Etats>();\n            for (int i = 0; i < fin.size(); i++){\n                Etats finale = new Etats();\n                finale.setNom(fin.get(i).toString());\n                finale.setTransitions(hashMap.get(fin.get(i).toString()));\n                finos.add(finale);\n            }\n            automates.setAlphabet(alphabet);\n            automates.setEtats(etatsArrayList);\n            automates.setEtatDepart(etat_depart);\n            automates.setEtatsArrivee(finos);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n        return automates;\n    }\n\n\n    public JSONObject automate_to_json(Automates automates){\n\n\n\n        ArrayList transitions = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            ArrayList etat = new ArrayList();\n            Etats etats = automates.getEtats().get(i);\n            etat.add(etats.getNom());\n            etat.add(etats.getTransitions());\n            transitions.add(etat);\n        }\n        List<String> alphabet = automates.getAlphabet();\n        String init = automates.getEtatDepart().getNom();\n\n        ArrayList etats = new ArrayList();\n        for (int i = 0; i < automates.getEtats().size(); i++){\n            etats.add(automates.getEtats().get(i).getNom());\n        }\n\n        ArrayList finaux = new ArrayList();\n        for (int i = 0; i < automates.getEtatsArrivee().size(); i++){\n            finaux.add(automates.getEtatsArrivee().get(i).getNom());\n        }\n        HashMap hashMap = new HashMap();\n        hashMap.put(\"Alphabet\", alphabet);\n        hashMap.put(\"Etats\", etats);\n        hashMap.put(\"Init\", init);\n        hashMap.put(\"Fin\", finaux);\n        hashMap.put(\"Transitions\", transitions);\n        JSONObject object = new JSONObject();\n        object.putAll(hashMap);\n\n\n\n        return object;\n    }\n\n\n\n    public static void main(String[] args) {\n//        JsonDeal jsonDeal= new JsonDeal();\n//        Automates a = jsonDeal.json_to_automate(\"test.json\");\n//        jsonDeal.automate_to_json(a);\n\n        ArrayList transition = new ArrayList();\n\n        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();\n\n        // creation q1\n        ArrayList transition1 = new ArrayList();\n        transition1.add(\"1\");\n        transition1.add(\"a\");\n        ArrayList transition2 = new ArrayList();\n        transition2.add(\"2\");\n        transition2.add(\"a\");\n        Etats q1 = new Etats();\n        q1.setNom(\"1\");\n        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();\n        q1_transitions = new ArrayList<ArrayList<String>>();\n        q1_transitions.add(transition1);\n        q1_transitions.add(transition2);\n        q1.setTransitions(q1_transitions);\n\n        // creation q2\n        ArrayList transition3 = new ArrayList();\n        transition3.add(\"3\");\n        transition3.add(\"@\");\n        Etats q2 = new Etats();\n        q2.setNom(\"2\");\n        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();\n        q2_transitions.add(transition3);\n        q2.setTransitions(q2_transitions);\n\n        // creation q3\n        ArrayList transition4 = new ArrayList();\n        transition4.add(\"3\");\n        transition4.add(\"a\");\n        ArrayList transition5 = new ArrayList();\n        transition5.add(\"4\");\n        transition5.add(\"a\");\n        Etats q3 = new Etats();\n        q3.setNom(\"3\");\n        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();\n        q3_transitions.add(transition4);\n        q3_transitions.add(transition5);\n        q3.setTransitions(q3_transitions);\n\n        // creation q4\n        ArrayList transition6 = new ArrayList();\n        transition6.add(\"5\");\n        transition6.add(\".\");\n        Etats q4 = new Etats();\n        q4.setNom(\"4\");\n        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();\n        q4_transitions.add(transition6);\n        q4.setTransitions(q4_transitions);\n\n        // creation q5\n        ArrayList transition7 = new ArrayList();\n        transition7.add(\"5\");\n        transition7.add(\"a\");\n        ArrayList transition8 = new ArrayList();\n        transition8.add(\"6\");\n        transition8.add(\"a\");\n        Etats q5 = new Etats();\n        q5.setNom(\"5\");\n        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();\n        q5_transitions.add(transition7);\n        q5_transitions.add(transition8);\n        q5.setTransitions(q5_transitions);\n\n        //q6\n\n        Etats q6 = new Etats();\n        q6.setNom(\"6\");\n        q6.setTransitions(null);\n\n        ArrayList<Etats> arrivee = new ArrayList<Etats>();\n        arrivee.add(q6);\n        ArrayList<Etats> etats = new ArrayList<Etats>();\n        etats.add(q1);\n        etats.add(q2);\n        etats.add(q3);\n        etats.add(q4);\n        etats.add(q5);\n        etats.add(q6);\n        ArrayList<String> alphabet = new ArrayList<String>();\n        alphabet.add(\"a\");\n        alphabet.add(\"@\");\n        alphabet.add(\".\");\n        Automates a = new Automates(q1,arrivee,etats,alphabet);\n        a.determiniser();\n//        System.out.println(a.getAlphabet());\n////        System.out.println(a.getEtats());\n//        for(int i=0;i<a.getEtats().size();i++) {\n//            System.out.println(a.getEtats().get(i).getNom());\n//            System.out.println(a.getEtats().get(i).getTransitions());\n//        }\n//        System.out.println(a.getEtatDepart());\n//        System.out.println(a.getEtatsArrivee());\n//        System.out.println(a.getEtats().get(0).getTransitions());\n\n//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();\n//        ArrayList<String> str = new ArrayList<String>();\n//        str.add(\"3\");\n//        str.add(\"a\");\n//        listOfLists.add(str);\n//        ArrayList<String> str2 = new ArrayList<String>();\n//        str2.add(\"1\");\n//        str2.add(\"g\");\n//        listOfLists.add(str2);\n//        System.out.println(listOfLists);\n\n\n        // determinaison\n//        System.out.println(a.getEtats().get());\n        // contient les transitions finales à inserer dans les grpEtats\n//        ArrayList grpTransitions = new ArrayList();\n//        // sert a creer les transitions groupées mais de maniere condensée : [\"a:1,2,4\",\"b:2,3\"]\n//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();\n//        // contient les etat à inserer dans l'automate final deteminisé\n//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();\n//        Etats e = new Etats();\n//        e.setNom(a.getEtatDepart().getNom());\n//        grpEtats.add(e);\n//        // on parcourt les etats de a\n//        for(int i=0;i<a.getEtats().size();i++){\n//            // contient les transition de l'etat i\n//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();\n//            int size = 0;\n//            if (transitions_etat == null)\n//                size = 0;\n//            else\n//                size = transitions_etat.size();\n//            // parcourt les transitions de l\"etat i\n//            for(int j=0;j<size;j++){\n//                if (transitions_etat.get(j) != null) {\n//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements\n//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);\n//                    //System.out.println(tr.get(1));\n//                    // creer un nouvel etat composé pour chaque transition partant de etat num i\n//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet\n//                    // a partir de cette liste on creera les etats\n//                    boolean exist = false;\n//                    if(grpTransitionsTemp != null) {\n//                        // parcourt les transitions temporaires\n//                        for(int k=0;k<grpTransitionsTemp.size();k++){\n//                            String str = grpTransitionsTemp.get(k);\n//                            String alph_etat[] = str.split(\":\");\n////                            System.out.println(\"ceci est \"+alph_etat[0]+\"/\"+alph_etat[1]+\"///\"+alph_etat.length);\n//                            // ajouter un nouvel etat au groupe d'etat\n//                            if (tr.get(1).equals(alph_etat[0])){\n////                                System.out.println(alph_etat[1]);\n//                                // ici erreur :\n//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string\n//                                alph_etat[1] = alph_etat[1]+\",\"+tr.get(0);\n//                                // les deux prochaines lignes devraient etre correctes ???\n//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses\n//\n//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions\n//                                // le a va bel et bien vers 1,2,3,4,5,6\n//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait\n//                                // determiner le depart des arcs\n//                                String temp =alph_etat[0]+\":\"+alph_etat[1];\n//                                grpTransitionsTemp.set(k,temp);\n////                                System.out.println(alph_etat[0]+\" \"+alph_etat[1]+\" \"+k+\"\\n\\n\");\n//                                exist = true;\n//                            }\n//                        }\n//\n//                    }\n//                    // creation d'une transition pour un group d'etat\n//                    if (!exist){\n//                        String str = tr.get(1)+\":\"+tr.get(0);\n//                        grpTransitionsTemp.add(str);\n//                    }\n//                }\n//            }\n//            for(int g=0;g<grpEtats.size();g++)\n//            System.out.println(\"grpetats :\"+grpEtats.get(g).getNom());\n//            System.out.println(\"grpTransitionsTemp :\"+grpTransitionsTemp);\n//            // ici generer grpTransitions\n//\n//            System.out.println(\"fin du parcours de l'etat \"+(i+1));\n//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp\n//            // ici on utilisera grpetat pour stocker les etats groupés déja créés\n//            int s;\n//            if(grpTransitionsTemp!=null) {\n//                s = grpTransitionsTemp.size();\n//            }else {\n//                s = 0;\n//            }\n//                for (int x = 0; x < s; x++) {\n//                    String alph_etat[] = grpTransitionsTemp.get(x).split(\":\");\n////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);\n//                    if (grpEtats.contains(alph_etat[1])) {\n//\n//                    } else {\n//                        Etats et = new Etats();\n//                        et.setNom(alph_etat[1]);\n//                        // la partie suivante pourra etre ajoutée à une autre boucle\n//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions\n////                        ArrayList<String> trns = new ArrayList<String>();\n////                        trns.add()\n////                        et.getTransitions().add();\n//                        grpEtats.add(et);\n//                    }\n//                }\n//                // ici former grpTransitions\n//            grpTransitions.add(String.valueOf(i));\n//            grpTransitions.add(grpTransitionsTemp);\n//            // ICI PPROBLEME\n//            // grpTransitionTemp est vide????\n//            System.out.println(\"voila \"+grpTransitions);\n//            grpTransitionsTemp.clear();\n//\n//        }\n//            // parcours de grpEtat ( pour le depart )\n//            for(int j=0;j<grpEtats.size();j++){\n//                String etat[] = grpEtats.get(j).getNom().split(\",\");\n//                // on recupere les etats du grpEtat ( depart )\n//                for (int y=0;y<etat.length;y++){\n//                    // parcours des etats de l'automate ( pour determiner l'arrivée )\n//                    for (int i=0;i<a.getEtats().size();i++) {\n//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {\n//                            // ajouter les transitions de l'etat i de l'automate non deterministe\n//                            if(a.getEtats().get(i).getTransitions()!=null){\n//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {\n//                                //grpetat pour les arrivées\n//                                for (int l = 0; l < grpEtats.size(); l++) {\n//                                    // etat1 contient les etats d'arrivée à tester\n//                                    String etat1[] = grpEtats.get(l).getNom().split(\",\");\n//                                    for (int g = 0; g < etat1.length; g++) {\n//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);\n//                                        if (ltr.get(0).equals(etat1[g])) {\n//                                            boolean trouve = false;\n//                                            // verfie si on a déja ajouté la transition\n//                                            if (grpEtats.get(j).getTransitions() != null) {\n//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {\n//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));\n//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {\n//                                                        trouve = true;\n//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)\n//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours\n//                                                    }\n//                                                }\n//                                            }\n//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute\n//                                            if (!trouve) {\n//                                                ArrayList<String> al = new ArrayList<String>();\n//                                                // cette ligne a un probleme\n//                                                al.add(grpEtats.get(l).getNom());\n//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));\n//                                                if (grpEtats.get(j).getTransitions() != null) {\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//                                                } else {\n//                                                    // à regler le cas ou les transitions sont vides\n////                                                grpEtats.get(j).getTransitions() = new ArrayList();\n//                                                    grpEtats.get(j).setTransitions(new ArrayList());\n//                                                    grpEtats.get(j).getTransitions().add(al);\n//\n//                                                }\n//\n//                                        }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                        }\n//                    }\n//                }\n//            }\n//\n//        System.out.println(grpTransitionsTemp);\n//            for (int i=0;i<grpEtats.size();i++){\n//                System.out.println(grpEtats.get(i).getNom()+\"  \"+grpEtats.get(i).getTransitions());\n//            }\n//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));\n\n//        List<List> lists = new ArrayList<List>();\n//        for (int i = 0; i < 4; i++) {\n//            List list = new ArrayList();\n//            list.add(i);\n//            list.add(\"a\");\n//            lists.add(list);\n//            // Use the list further...\n//        }\n//        System.out.println(lists);\n\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/JsonDeal.java b/src/main/java/JsonDeal.java
--- a/src/main/java/JsonDeal.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
+++ b/src/main/java/JsonDeal.java	(date 1615500832973)
@@ -9,6 +9,7 @@
 import java.util.*;
 
 public class JsonDeal {
+     int i =0;
 
 
     /*
@@ -16,11 +17,6 @@
     d'etats, le nombre de transitions, une liste d'alphabet
      */
 
-    public static Etats creerEtatGrp(String destinations,String depart,String lettre){
-
-        return null;
-    }
-
     public Automates random_aut(int nb_etats, int nb_transition, List<String> alphabet) {
         Random random = new Random();
 
@@ -247,295 +243,22 @@
 
 
     public static void main(String[] args) {
-//        JsonDeal jsonDeal= new JsonDeal();
-//        Automates a = jsonDeal.json_to_automate("test.json");
-//        jsonDeal.automate_to_json(a);
-
-        ArrayList transition = new ArrayList();
-
-        ArrayList<ArrayList<String>> transitions = new ArrayList<ArrayList<String>>();
-
-        // creation q1
-        ArrayList transition1 = new ArrayList();
-        transition1.add("1");
-        transition1.add("a");
-        ArrayList transition2 = new ArrayList();
-        transition2.add("2");
-        transition2.add("a");
-        Etats q1 = new Etats();
-        q1.setNom("1");
-        ArrayList<ArrayList<String>> q1_transitions = q1.getTransitions();
-        q1_transitions = new ArrayList<ArrayList<String>>();
-        q1_transitions.add(transition1);
-        q1_transitions.add(transition2);
-        q1.setTransitions(q1_transitions);
+        JsonDeal jsonDeal= new JsonDeal();
 
-        // creation q2
-        ArrayList transition3 = new ArrayList();
-        transition3.add("3");
-        transition3.add("@");
-        Etats q2 = new Etats();
-        q2.setNom("2");
-        ArrayList<ArrayList<String>> q2_transitions = new ArrayList<ArrayList<String>>();
-        q2_transitions.add(transition3);
-        q2.setTransitions(q2_transitions);
 
-        // creation q3
-        ArrayList transition4 = new ArrayList();
-        transition4.add("3");
-        transition4.add("a");
-        ArrayList transition5 = new ArrayList();
-        transition5.add("4");
-        transition5.add("a");
-        Etats q3 = new Etats();
-        q3.setNom("3");
-        ArrayList<ArrayList<String>> q3_transitions = new ArrayList<ArrayList<String>>();
-        q3_transitions.add(transition4);
-        q3_transitions.add(transition5);
-        q3.setTransitions(q3_transitions);
+        Automates a = jsonDeal.json_to_automate("test.json");
 
-        // creation q4
-        ArrayList transition6 = new ArrayList();
-        transition6.add("5");
-        transition6.add(".");
-        Etats q4 = new Etats();
-        q4.setNom("4");
-        ArrayList<ArrayList<String>> q4_transitions = new ArrayList<ArrayList<String>>();
-        q4_transitions.add(transition6);
-        q4.setTransitions(q4_transitions);
 
-        // creation q5
-        ArrayList transition7 = new ArrayList();
-        transition7.add("5");
-        transition7.add("a");
-        ArrayList transition8 = new ArrayList();
-        transition8.add("6");
-        transition8.add("a");
-        Etats q5 = new Etats();
-        q5.setNom("5");
-        ArrayList<ArrayList<String>> q5_transitions = new ArrayList<ArrayList<String>>();
-        q5_transitions.add(transition7);
-        q5_transitions.add(transition8);
-        q5.setTransitions(q5_transitions);
+        String s = "((a+(b.b))*.(b+(a.a))*)";
+        String[] ss = {"a", "b", "c"};
 
-        //q6
+        Automates bb = a.thompson(s,ss);
 
-        Etats q6 = new Etats();
-        q6.setNom("6");
-        q6.setTransitions(null);
+        System.out.println(jsonDeal.automate_to_json(bb));
+        Images i = new Images();
+        i.jsonToDot("test.json", "hh2.dot");
+        bb.synch3();
 
-        ArrayList<Etats> arrivee = new ArrayList<Etats>();
-        arrivee.add(q6);
-        ArrayList<Etats> etats = new ArrayList<Etats>();
-        etats.add(q1);
-        etats.add(q2);
-        etats.add(q3);
-        etats.add(q4);
-        etats.add(q5);
-        etats.add(q6);
-        ArrayList<String> alphabet = new ArrayList<String>();
-        alphabet.add("a");
-        alphabet.add("@");
-        alphabet.add(".");
-        Automates a = new Automates(q1,arrivee,etats,alphabet);
-        a.determiniser();
-//        System.out.println(a.getAlphabet());
-////        System.out.println(a.getEtats());
-//        for(int i=0;i<a.getEtats().size();i++) {
-//            System.out.println(a.getEtats().get(i).getNom());
-//            System.out.println(a.getEtats().get(i).getTransitions());
-//        }
-//        System.out.println(a.getEtatDepart());
-//        System.out.println(a.getEtatsArrivee());
-//        System.out.println(a.getEtats().get(0).getTransitions());
-
-//        ArrayList<ArrayList<String>> listOfLists = new ArrayList<ArrayList<String>>();
-//        ArrayList<String> str = new ArrayList<String>();
-//        str.add("3");
-//        str.add("a");
-//        listOfLists.add(str);
-//        ArrayList<String> str2 = new ArrayList<String>();
-//        str2.add("1");
-//        str2.add("g");
-//        listOfLists.add(str2);
-//        System.out.println(listOfLists);
-
-
-        // determinaison
-//        System.out.println(a.getEtats().get());
-        // contient les transitions finales à inserer dans les grpEtats
-//        ArrayList grpTransitions = new ArrayList();
-//        // sert a creer les transitions groupées mais de maniere condensée : ["a:1,2,4","b:2,3"]
-//        ArrayList<String> grpTransitionsTemp = new ArrayList<String>();
-//        // contient les etat à inserer dans l'automate final deteminisé
-//        ArrayList<Etats> grpEtats = new ArrayList<Etats>();
-//        Etats e = new Etats();
-//        e.setNom(a.getEtatDepart().getNom());
-//        grpEtats.add(e);
-//        // on parcourt les etats de a
-//        for(int i=0;i<a.getEtats().size();i++){
-//            // contient les transition de l'etat i
-//            ArrayList transitions_etat = a.getEtats().get(i).getTransitions();
-//            int size = 0;
-//            if (transitions_etat == null)
-//                size = 0;
-//            else
-//                size = transitions_etat.size();
-//            // parcourt les transitions de l"etat i
-//            for(int j=0;j<size;j++){
-//                if (transitions_etat.get(j) != null) {
-//                    // contient la transition j de l'etat i : ce sera toujours un tableau de 2 elements
-//                    ArrayList<String> tr = (ArrayList<String>)transitions_etat.get(j);
-//                    //System.out.println(tr.get(1));
-//                    // creer un nouvel etat composé pour chaque transition partant de etat num i
-//                    // creer un liste d'etat destination pour chaque lettre de l'alphabet
-//                    // a partir de cette liste on creera les etats
-//                    boolean exist = false;
-//                    if(grpTransitionsTemp != null) {
-//                        // parcourt les transitions temporaires
-//                        for(int k=0;k<grpTransitionsTemp.size();k++){
-//                            String str = grpTransitionsTemp.get(k);
-//                            String alph_etat[] = str.split(":");
-////                            System.out.println("ceci est "+alph_etat[0]+"/"+alph_etat[1]+"///"+alph_etat.length);
-//                            // ajouter un nouvel etat au groupe d'etat
-//                            if (tr.get(1).equals(alph_etat[0])){
-////                                System.out.println(alph_etat[1]);
-//                                // ici erreur :
-//                                // le alph_etat[1] ne recupere qu'un seul element ??? qui pourtant est censé etre un string
-//                                alph_etat[1] = alph_etat[1]+","+tr.get(0);
-//                                // les deux prochaines lignes devraient etre correctes ???
-//                                // le probleme vient probablement du fait que les boucles ou les structures sont foireuses
-//
-//                                ////// le code est correct : le probleme : je ne precise pas le depart des transitions
-//                                // le a va bel et bien vers 1,2,3,4,5,6
-//                                // il faudrait penser à modifier les structures  intermediraire du groupage d'en haut comme ça on pourrait
-//                                // determiner le depart des arcs
-//                                String temp =alph_etat[0]+":"+alph_etat[1];
-//                                grpTransitionsTemp.set(k,temp);
-////                                System.out.println(alph_etat[0]+" "+alph_etat[1]+" "+k+"\n\n");
-//                                exist = true;
-//                            }
-//                        }
-//
-//                    }
-//                    // creation d'une transition pour un group d'etat
-//                    if (!exist){
-//                        String str = tr.get(1)+":"+tr.get(0);
-//                        grpTransitionsTemp.add(str);
-//                    }
-//                }
-//            }
-//            for(int g=0;g<grpEtats.size();g++)
-//            System.out.println("grpetats :"+grpEtats.get(g).getNom());
-//            System.out.println("grpTransitionsTemp :"+grpTransitionsTemp);
-//            // ici generer grpTransitions
-//
-//            System.out.println("fin du parcours de l'etat "+(i+1));
-//            // ici on pourrais creer les etats groupés puis vider grpTransitionsTemp
-//            // ici on utilisera grpetat pour stocker les etats groupés déja créés
-//            int s;
-//            if(grpTransitionsTemp!=null) {
-//                s = grpTransitionsTemp.size();
-//            }else {
-//                s = 0;
-//            }
-//                for (int x = 0; x < s; x++) {
-//                    String alph_etat[] = grpTransitionsTemp.get(x).split(":");
-////                Etats etat = creerEtatGrp(alph_etat[1], String.valueOf(i), alph_etat[0]);
-//                    if (grpEtats.contains(alph_etat[1])) {
-//
-//                    } else {
-//                        Etats et = new Etats();
-//                        et.setNom(alph_etat[1]);
-//                        // la partie suivante pourra etre ajoutée à une autre boucle
-//                        // ou on pourrait vider grpTransitionstemp et refaire la meme boucle,sauf qu'en remplissant on ajouterait progressivement les transitions
-////                        ArrayList<String> trns = new ArrayList<String>();
-////                        trns.add()
-////                        et.getTransitions().add();
-//                        grpEtats.add(et);
-//                    }
-//                }
-//                // ici former grpTransitions
-//            grpTransitions.add(String.valueOf(i));
-//            grpTransitions.add(grpTransitionsTemp);
-//            // ICI PPROBLEME
-//            // grpTransitionTemp est vide????
-//            System.out.println("voila "+grpTransitions);
-//            grpTransitionsTemp.clear();
-//
-//        }
-//            // parcours de grpEtat ( pour le depart )
-//            for(int j=0;j<grpEtats.size();j++){
-//                String etat[] = grpEtats.get(j).getNom().split(",");
-//                // on recupere les etats du grpEtat ( depart )
-//                for (int y=0;y<etat.length;y++){
-//                    // parcours des etats de l'automate ( pour determiner l'arrivée )
-//                    for (int i=0;i<a.getEtats().size();i++) {
-//                        if (etat[y].equals(a.getEtats().get(i).getNom())) {
-//                            // ajouter les transitions de l'etat i de l'automate non deterministe
-//                            if(a.getEtats().get(i).getTransitions()!=null){
-//                            for (int m = 0; m < a.getEtats().get(i).getTransitions().size(); m++) {
-//                                //grpetat pour les arrivées
-//                                for (int l = 0; l < grpEtats.size(); l++) {
-//                                    // etat1 contient les etats d'arrivée à tester
-//                                    String etat1[] = grpEtats.get(l).getNom().split(",");
-//                                    for (int g = 0; g < etat1.length; g++) {
-//                                        ArrayList ltr = (ArrayList) a.getEtats().get(i).getTransitions().get(m);
-//                                        if (ltr.get(0).equals(etat1[g])) {
-//                                            boolean trouve = false;
-//                                            // verfie si on a déja ajouté la transition
-//                                            if (grpEtats.get(j).getTransitions() != null) {
-//                                                for (int n = 0; n < grpEtats.get(j).getTransitions().size(); n++) {
-//                                                    ArrayList q = (ArrayList) (grpEtats.get(j).getTransitions().get(n));
-//                                                    if (q.get(1).equals((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1))) {
-//                                                        trouve = true;
-//                                                        // ce qu'on pourrait faire c'est ajouter ici  a.getEtats().get(i).getTransitions().get(m)).get(0)
-//                                                        // à une liste qui formerait l'etat ou envoie l'etat groupé en cours
-//                                                    }
-//                                                }
-//                                            }
-//                                            // s'il n'existte pas envore de transition avec cette lettre la on ajoute
-//                                            if (!trouve) {
-//                                                ArrayList<String> al = new ArrayList<String>();
-//                                                // cette ligne a un probleme
-//                                                al.add(grpEtats.get(l).getNom());
-//                                                al.add((String) ((ArrayList<?>) a.getEtats().get(i).getTransitions().get(m)).get(1));
-//                                                if (grpEtats.get(j).getTransitions() != null) {
-//                                                    grpEtats.get(j).getTransitions().add(al);
-//                                                } else {
-//                                                    // à regler le cas ou les transitions sont vides
-////                                                grpEtats.get(j).getTransitions() = new ArrayList();
-//                                                    grpEtats.get(j).setTransitions(new ArrayList());
-//                                                    grpEtats.get(j).getTransitions().add(al);
-//
-//                                                }
-//
-//                                        }
-//                                        }
-//                                    }
-//                                }
-//                            }
-//                        }
-//                        }
-//                    }
-//                }
-//            }
-//
-//        System.out.println(grpTransitionsTemp);
-//            for (int i=0;i<grpEtats.size();i++){
-//                System.out.println(grpEtats.get(i).getNom()+"  "+grpEtats.get(i).getTransitions());
-//            }
-//        System.out.println(((ArrayList<?>) a.getEtats().get(0).getTransitions().get(0)).get(1));
-
-//        List<List> lists = new ArrayList<List>();
-//        for (int i = 0; i < 4; i++) {
-//            List list = new ArrayList();
-//            list.add(i);
-//            list.add("a");
-//            lists.add(list);
-//            // Use the list further...
-//        }
-//        System.out.println(lists);
 
 
     }
Index: src/main/java/Automates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Automates {\n\n    private Etats etatDepart;\n    private List<Etats> etatsArrivee,etats;\n    private List<String> alphabet;\n\n    public Automates(){\n\n    }\n    public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {\n        this.etatDepart = etatDepart;\n        this.etatsArrivee = etatsArrivee;\n        this.etats = etats;\n        this.alphabet = alphabet;\n    }\n\n    public Etats getEtatDepart() {\n        return etatDepart;\n    }\n\n    public void setEtatDepart(Etats etatDepart) {\n        this.etatDepart = etatDepart;\n    }\n\n    public List<Etats> getEtatsArrivee() {\n        return etatsArrivee;\n    }\n\n    public void setEtatsArrivee(List<Etats> etatsArrivee) {\n        this.etatsArrivee = etatsArrivee;\n    }\n\n    public List<Etats> getEtats() {\n        return etats;\n    }\n\n    public void setEtats(List<Etats> etats) {\n        this.etats = etats;\n    }\n\n    public List<String> getAlphabet() {\n        return alphabet;\n    }\n\n    public void setAlphabet(List<String> alphabet) {\n        this.alphabet = alphabet;\n    }\n\n    // ALGORITHMES UTILES\n\n\n    public void toMatrice(){\n        //  TO DO\n    }\n\n    public String concatener(List etatsG){\n        if(etats == null) return \"\";\n        else {\n            String str = \"\";\n            for(int a=0;a<etatsG.size();a++){\n                if ( a == 0 ){\n                    str = (String) etatsG.get(a);\n                }else {\n                    str = str + \",\" + (String) etatsG.get(a);\n                }\n            }\n            return str;\n        }\n    }\n\n    // ALGORITHMES\n\n    public void determiniser(){\n\n        Queue<List> file_etat_cree = new LinkedList<List>();\n        List debut = new ArrayList();\n        debut.add(this.getEtatDepart().getNom());\n        file_etat_cree.add(debut);\n\n        while (file_etat_cree.size()!=0){\n            List etats_preced = file_etat_cree.poll();\n//            file_etat_cree.remove(etats_preced);\n//            System.out.println(file_etat_cree);\n            Etats etat = new Etats();\n            // concatener les etats groupés : à définir\n            etat.setNom(etats_preced.toString());\n            HashMap<String,List> hash = new HashMap<String,List>();\n\n            for(int i =0;i<etats_preced.size();i++){\n                for (int j=0;j<this.alphabet.size();j++){\n                    //verifier cette ligne\n                    if (hash.containsKey(this.alphabet.get(j))){\n                        // l'idée est là\n                        List l = (List)hash.get(this.alphabet.get(j));\n                        l.add(etats_preced);\n                        hash.put(this.alphabet.get(j),l);\n                    } else {\n                        //ici ce sera le nom de l'etat i qui nous sera utile\n                        List l = new ArrayList();\n                        l.add(etats_preced.get(i));\n                        hash.put(this.alphabet.get(j),l);\n                    }\n                }\n            }\n            System.out.println(hash);\n            // à revoir\n            ArrayList hashToList = new ArrayList();\n            for(String key: hash.keySet()){\n                file_etat_cree.add(hash.get(key));\n                ArrayList config = new ArrayList();\n                config.add(0,hash.get(key).toString());\n               config.add(1,hash.get(key));\n               hashToList.add(config);\n               etat.setTransitions(hashToList);\n            }\n        }\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Automates.java b/src/main/java/Automates.java
--- a/src/main/java/Automates.java	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
+++ b/src/main/java/Automates.java	(date 1615500833025)
@@ -1,15 +1,22 @@
-import java.util.*;
-import java.util.concurrent.ArrayBlockingQueue;
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by FernFlower decompiler)
+//
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Stack;
 
 public class Automates {
-
+    Stack<String> automates = new Stack();
     private Etats etatDepart;
-    private List<Etats> etatsArrivee,etats;
+    private List<Etats> etatsArrivee;
+    private List<Etats> etats;
     private List<String> alphabet;
 
-    public Automates(){
-
+    public Automates() {
     }
+
     public Automates(Etats etatDepart, List<Etats> etatsArrivee, List<Etats> etats, List<String> alphabet) {
         this.etatDepart = etatDepart;
         this.etatsArrivee = etatsArrivee;
@@ -18,7 +25,7 @@
     }
 
     public Etats getEtatDepart() {
-        return etatDepart;
+        return this.etatDepart;
     }
 
     public void setEtatDepart(Etats etatDepart) {
@@ -26,7 +33,7 @@
     }
 
     public List<Etats> getEtatsArrivee() {
-        return etatsArrivee;
+        return this.etatsArrivee;
     }
 
     public void setEtatsArrivee(List<Etats> etatsArrivee) {
@@ -34,7 +41,7 @@
     }
 
     public List<Etats> getEtats() {
-        return etats;
+        return this.etats;
     }
 
     public void setEtats(List<Etats> etats) {
@@ -42,82 +49,339 @@
     }
 
     public List<String> getAlphabet() {
-        return alphabet;
+        return this.alphabet;
     }
 
     public void setAlphabet(List<String> alphabet) {
         this.alphabet = alphabet;
     }
 
-    // ALGORITHMES UTILES
-
-
-    public void toMatrice(){
-        //  TO DO
+    public void toMatrice() {
     }
-
-    public String concatener(List etatsG){
-        if(etats == null) return "";
-        else {
-            String str = "";
-            for(int a=0;a<etatsG.size();a++){
-                if ( a == 0 ){
-                    str = (String) etatsG.get(a);
-                }else {
-                    str = str + "," + (String) etatsG.get(a);
-                }
-            }
-            return str;
-        }
-    }
-
-    // ALGORITHMES
 
-    public void determiniser(){
+    public void determiniser() {
+    }
+
+
+
+    boolean presentIn(char mot, String[] alphabet) {
+        boolean not_preset = true;
+
+        for(int i = 0; i < alphabet.length; ++i) {
+            if (alphabet[i].equals(String.valueOf(mot))) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    public Automates thompson(String expression, String[] alpha) {
+        Stack<Automates> pileA = new Stack();
+        Stack<Character> pileM = new Stack();
+        int etati = 0;
+
+
+        for(int i = 0; i < expression.length(); ++i) {
+            Automates ap;
+            ArrayList apEtats;
+
+            /* cas ou c est un charactere de l alphabet */
+            if (!this.presentIn(expression.charAt(i), alpha)) {
+                ap = new Automates();
+                Etats etd = new Etats();
+                etd.setNom(String.valueOf(etati));
+                ++etati;
+                Etats etf = new Etats();
+                etf.setNom(String.valueOf(etati));
+                ++etati;
+                ArrayList<String> config = new ArrayList();
+                config.add(etf.getNom());
+                config.add(String.valueOf(expression.charAt(i)));
+                ArrayList trs = new ArrayList();
+                ArrayList trs1 = new ArrayList();
+                etf.setTransitions(trs);
+                trs1.add(config);
+                etd.setTransitions(trs1);
+                List<Etats> etfs = new ArrayList();
+                etfs.add(etf);
+                List<String> al = this.alphabet;
+                apEtats = new ArrayList();
+                apEtats.add(etd);
+                apEtats.add(etf);
+                ap.setAlphabet(al);
+                ap.setEtats(apEtats);
+                ap.setEtatsArrivee(etfs);
+                ap.setEtatDepart(etd);
+                pileA.push(ap);
+            }
+
+            if (expression.charAt(i) == '(') {
+                System.out.println("(");
+            }
+
+            if (expression.charAt(i) == '.') {
+                pileM.push('.');
+                System.out.println(".");
+            }
+
+            if (expression.charAt(i) == '+') {
+                pileM.push('+');
+                System.out.println("+");
+            }
+
+            ArrayList config1;
+            ArrayList config2;
+            ArrayList trF;
+            String ed1;
+            if (expression.charAt(i) == '*') {
+                System.out.println("*");
+                ap = (Automates)pileA.pop();
+                Automates a = new Automates();
+                new ArrayList();
+                List<Etats> etats = ap.getEtats();
+                String ed = ap.getEtatDepart().getNom();
+                ed1 = ((Etats)ap.getEtatsArrivee().get(0)).getNom();
+                Etats etatD = new Etats();
+                etatD.setNom(String.valueOf(etati));
+                ++etati;
+                Etats etatF = new Etats();
+                etatF.setNom(String.valueOf(etati));
+                ArrayList etfss = new ArrayList();
+                etatF.setTransitions(etfss);
+                ++etati;
+                apEtats = new ArrayList();
+                apEtats.add(etatF);
+                ArrayList trD = new ArrayList();
+                config1 = new ArrayList();
+                config1.add(etatF.getNom());
+                config1.add("eps");
+                trD.add(config1);
+                config2 = new ArrayList();
+                config2.add(ed);
+                config2.add("eps");
+                trD.add(config2);
+                etatD.setTransitions(trD);
+
+                for(int j = 0; j < etats.size(); ++j) {
+                    if (((Etats)etats.get(j)).getNom().equals(ed1)) {
+                        ArrayList<String> config3 = new ArrayList();
+                        config3.add(etatF.getNom());
+                        config3.add("eps");
+                        ((Etats)etats.get(j)).getTransitions().add(config3);
+                        trF = new ArrayList();
+                        trF.add(ed);
+                        trF.add("eps");
+                        ((Etats)etats.get(j)).getTransitions().add(trF);
+                    }
+                }
+
+                etats.add(etatD);
+                etats.add(etatF);
+                a.setEtatsArrivee(apEtats);
+                a.setEtats(etats);
+                a.setEtatDepart(etatD);
+                a.setAlphabet(ap.getAlphabet());
+                pileA.push(a);
+            }
+
+            if (expression.charAt(i) == ')') {
+                System.out.println(")");
+                ap = new Automates();
+                char exp = (Character)pileM.pop();
+                Automates ap2 = (Automates)pileA.pop();
+                Automates ap1 = (Automates)pileA.pop();
+                ed1 = ap1.getEtatDepart().getNom();
+                String ed2 = ap2.getEtatDepart().getNom();
+                String ef1 = ((Etats)ap1.getEtatsArrivee().get(0)).getNom();
+                String ef2 = ((Etats)ap2.getEtatsArrivee().get(0)).getNom();
+                ap.setAlphabet(ap2.getAlphabet());
+                apEtats = new ArrayList();
+
+                int j;
+                for(j = 0; j < ap1.getEtats().size(); ++j) {
+                    apEtats.add(ap1.getEtats().get(j));
+                }
+
+                for(j = 0; j < ap2.getEtats().size(); ++j) {
+                    apEtats.add(ap2.getEtats().get(j));
+                }
+
+                ap.setEtats(apEtats);
+                switch(exp) {
+                    case '+':
+                        Etats etatsD = new Etats();
+                        etatsD.setNom(String.valueOf(etati));
+                        ++etati;
+                        config1 = new ArrayList();
+                        config1.add(String.valueOf(ed1));
+                        config1.add("eps");
+                        config2 = new ArrayList();
+                        config2.add(String.valueOf(ed2));
+                        config2.add("eps");
+                        ArrayList trD = new ArrayList();
+                        trD.add(config1);
+                        trD.add(config2);
+                        etatsD.setTransitions(trD);
+                        ap.getEtats().add(etatsD);
+                        Etats etatsF = new Etats();
+                        etatsF.setNom(String.valueOf(etati));
+                        ++etati;
+                        trF = new ArrayList();
+                        etatsF.setTransitions(trF);
+                        ap.getEtats().add(etatsF);
+                        ArrayList<String> config3 = new ArrayList();
+                        config3.add(String.valueOf(etatsF.getNom()));
+                        config3.add("eps");
+                        ArrayList<String> config4 = new ArrayList();
+                        config4.add(String.valueOf(etatsF.getNom()));
+                        config4.add("eps");
+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef1))).getTransitions().add(config3);
+                        ((Etats)ap.getEtats().get(this.get_etat(ap, ef2))).getTransitions().add(config4);
+                        List<Etats> efs = new ArrayList();
+                        efs.add(etatsF);
+                        ap.setEtatDepart(etatsD);
+                        ap.setEtatsArrivee(efs);
+                        pileA.push(ap);
+                        break;
+                    case '.':
+                        int indiceF1 = ap.get_etat(ap, ((Etats)ap1.getEtatsArrivee().get(0)).getNom());
+                        int indiceD2 = ap.get_etat(ap, ap2.getEtatDepart().getNom());
+                        ((Etats)ap.getEtats().get(indiceF1)).getTransitions().addAll(ap2.getEtatDepart().getTransitions());
+                        ap.getEtats().remove(indiceD2);
+                        ap.setEtatDepart(ap1.getEtatDepart());
+                        ap.setEtatsArrivee(ap2.getEtatsArrivee());
+                        pileA.push(ap);
+                }
+            }
+        }
+
+        return (Automates)pileA.pop();
+    }
+
+
+
+    public int get_etat(Automates automates, String nom) {
+        for(int i = 0; i < automates.getEtats().size(); ++i) {
+            if (((Etats)automates.getEtats().get(i)).getNom().equals(nom)) {
+                return i;
+            }
+        }
+
+        return -1;
+    }
+
+
+
+
+    public void synch3(){
+
+        List<Etats> etats = this.getEtats();
+
+        /* etape1 : calcule des eps-transitivitées */
+        for (int i = 0; i < etats.size(); i++){
+            Etats etat0 = etats.get(i);
+            for (int j = 0; j < etat0.getTransitions().size(); j++){
+                ArrayList config0 = (ArrayList) etat0.getTransitions().get(j);
+                if (config0.get(1) == "eps"){
+                    int et = this.get_etat(this, config0.get(0).toString());
+
+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(et).getNom()){
+                            this.getEtatsArrivee().add(etat0);
+                        }
+                    }
+                    for (int k = 0; k < etats.get(et).getTransitions().size(); k++){
+                        ArrayList config1 = (ArrayList) etats.get(et).getTransitions().get(k);
+                        if (config1.get(1) == "eps"){
+                            etat0.getTransitions().add(config1);
+                        }
+                    }
+                }
+            }
+        }
+
+        /* etape 2 calcule des transitivités sans epsilons */
+        for (int i = 0; i < etats.size(); i++){
+            Etats etat_courant = etats.get(i);
+
+            for (int j = 0; j < etat_courant.getTransitions().size(); j++){
+                ArrayList config = (ArrayList) etat_courant.getTransitions().get(j);
+                if (config.get(1) == "eps"){
+                    Etats etat_inter = etats.get(this.get_etat(this, config.get(0).toString()));
+                    for (int s = 0; s < this.getEtatsArrivee().size(); s++){
+                        if (this.getEtatsArrivee().get(s).getNom() == this.getEtats().get(this.get_etat(this, String.valueOf(config.get(0)))).getNom()){
+                            this.getEtatsArrivee().add(etat_courant);
+                        }
+                    }
+
+                    for (int k = 0; k < etat_inter.getTransitions().size(); k++){
+                        ArrayList trans = etat_inter.getTransitions();
+                        for (int s = 0; s < trans.size(); s++){
+                            ArrayList config1 = (ArrayList) trans.get(s);
+                            if (config1.get(1) != "eps"){
+                                etat_courant.getTransitions().add(config1);
+                            }
+                        }
+                    }
+                }
+            }
+        }
 
-        Queue<List> file_etat_cree = new LinkedList<List>();
-        List debut = new ArrayList();
-        debut.add(this.getEtatDepart().getNom());
-        file_etat_cree.add(debut);
 
-        while (file_etat_cree.size()!=0){
-            List etats_preced = file_etat_cree.poll();
-//            file_etat_cree.remove(etats_preced);
-//            System.out.println(file_etat_cree);
-            Etats etat = new Etats();
-            // concatener les etats groupés : à définir
-            etat.setNom(etats_preced.toString());
-            HashMap<String,List> hash = new HashMap<String,List>();
+        /* etape 3 : suppression des eps-transitions */
+        for ( int i = 0 ; i < this.getEtats().size(); i++){
+            ArrayList trs = new ArrayList();
+            for ( int j = 0; j < this.getEtats().get(i).getTransitions().size(); j++){
+                ArrayList a = (ArrayList) this.getEtats().get(i).getTransitions().get(j);
+                if(a.get(1) != "eps"){
+                    if ( ! trs.contains(a)){
+                        trs.add(a);
+                    }
+                }
+            }
+            this.getEtats().get(i).setTransitions(trs);
+        }
 
-            for(int i =0;i<etats_preced.size();i++){
-                for (int j=0;j<this.alphabet.size();j++){
-                    //verifier cette ligne
-                    if (hash.containsKey(this.alphabet.get(j))){
-                        // l'idée est là
-                        List l = (List)hash.get(this.alphabet.get(j));
-                        l.add(etats_preced);
-                        hash.put(this.alphabet.get(j),l);
-                    } else {
-                        //ici ce sera le nom de l'etat i qui nous sera utile
-                        List l = new ArrayList();
-                        l.add(etats_preced.get(i));
-                        hash.put(this.alphabet.get(j),l);
+        /* etape 4: suppression des etats non accessibles et des transitions double */
+        ArrayList<String> etats_acce = new ArrayList<String>();
+        for (int i = 0; i < this.getEtats().size(); i++){
+            String nom = this.getEtats().get(i).getNom();
+            for (int j = 0; j < this.getEtats().size(); j++){
+                ArrayList transitions = this.getEtats().get(j).getTransitions();
+                for ( int k = 0; k < transitions.size(); k++){
+                    ArrayList conf = (ArrayList) transitions.get(k);
+                    if (conf.get(0) == nom){
+                        etats_acce.add(nom);
                     }
                 }
             }
-            System.out.println(hash);
-            // à revoir
-            ArrayList hashToList = new ArrayList();
-            for(String key: hash.keySet()){
-                file_etat_cree.add(hash.get(key));
-                ArrayList config = new ArrayList();
-                config.add(0,hash.get(key).toString());
-               config.add(1,hash.get(key));
-               hashToList.add(config);
-               etat.setTransitions(hashToList);
+            if (this.getEtats().get(i).getNom() == this.getEtatDepart().getNom()){
+                etats_acce.add(this.getEtats().get(i).getNom());
             }
         }
+
+
+        /* definition des nouveaux etats */
+        ArrayList<Etats> etts = new ArrayList<Etats>();
+        for (int i = 0; i < this.getEtats().size(); i++){
+            if (etats_acce.contains(this.getEtats().get(i).getNom())){
+                etts.add(this.getEtats().get(i));
+            }
+        }
+        this.setEtats(etts);
 
-    }
+        /* definition des nouveaux etats finaux */
+        ArrayList<Etats> arr = new ArrayList<Etats>();
+        for (int i = 0; i < this.getEtatsArrivee().size(); i++){
+            if (etats_acce.contains(this.getEtatsArrivee().get(i).getNom())){
+                Etats ett = this.getEtats().get(this.get_etat(this, this.getEtatsArrivee().get(i).getNom()));
+                if (!arr.contains(ett)){
+                    arr.add(ett);
+                }
+            }
+        }
+        this.setEtatsArrivee(arr);
 
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"Ghilas commited a new version with new transitions\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/AbstractEtats.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Automates.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Automates.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Etats.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Etats.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/EtatsCompose.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/JsonDeal.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1okPiOZid0behB92LRDtPAyTX5z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../automates\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"JsonDeal\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"JsonDeal\" />\n      <module name=\"Automates\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\n      <option name=\"arquillianRunConfiguration\">\n        <value>\n          <option name=\"containerStateName\" value=\"\" />\n        </value>\n      </option>\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JsonDeal\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2605dd7d-5e46-4b3b-93d8-2ea0427b4df5\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613827742264</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613827742264</updated>\n      <workItem from=\"1613827744292\" duration=\"363000\" />\n      <workItem from=\"1613828133950\" duration=\"3761000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Ghilas commited les classes eni\">\n      <created>1613828472218</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613828472218</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ghilas commited a new version with new transitions\">\n      <created>1613832695232</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613832695232</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Ghilas commited les classes eni\" />\n    <MESSAGE value=\"Ghilas commited a new version with new transitions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ghilas commited a new version with new transitions\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ef333c1d60c9ba781486432d2bf0e0560be76f22)
+++ b/.idea/workspace.xml	(date 1615501129147)
@@ -4,13 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ghilas commited a new version with new transitions">
+    <list default="true" id="2605dd7d-5e46-4b3b-93d8-2ea0427b4df5" name="Default Changelist" comment="Ajout de l'algorithme de synchronisation">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/AbstractEtats.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Automates.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Automates.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Etats.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Etats.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/EtatsCompose.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/JsonDeal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/JsonDeal.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/Automates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Automates.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/JsonDeal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/JsonDeal.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -27,12 +26,25 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="imadhou00" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="RESET_MODE" value="MIXED" />
+    <option name="UPDATE_TYPE" value="REBASE" />
+  </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
   </component>
   <component name="ProjectId" id="1okPiOZid0behB92LRDtPAyTX5z" />
+  <component name="ProjectLevelVcsManager">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -42,15 +54,22 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="aspect.path.notification.shown" value="true" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/../automates" />
     <property name="node.js.detected.package.eslint" value="true" />
     <property name="node.js.detected.package.tslint" value="true" />
     <property name="node.js.path.for.package.eslint" value="project" />
     <property name="node.js.path.for.package.tslint" value="project" />
     <property name="node.js.selected.package.eslint" value="(autodetect)" />
     <property name="node.js.selected.package.tslint" value="(autodetect)" />
+    <property name="nodejs_package_manager_path" value="npm" />
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Application.JsonDeal">
+    <configuration name="Images" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="Images" />
+      <module name="Automates" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="JsonDeal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="JsonDeal" />
       <module name="Automates" />
@@ -58,13 +77,16 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
-      <option name="arquillianRunConfiguration">
-        <value>
-          <option name="containerStateName" value="" />
-        </value>
-      </option>
-      <option name="TEST_OBJECT" value="class" />
+    <configuration name="JsonTpGv" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="JsonTpGv" />
+      <module name="Automates" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="TraitementTransitions" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="TraitementTransitions" />
+      <module name="Automates" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -72,6 +94,10 @@
     <recent_temporary>
       <list>
         <item itemvalue="Application.JsonDeal" />
+        <item itemvalue="Application.TraitementTransitions" />
+        <item itemvalue="Application.JsonTpGv" />
+        <item itemvalue="Application.Images" />
+        <item itemvalue="Application.JsonDeal" />
       </list>
     </recent_temporary>
   </component>
@@ -84,7 +110,15 @@
       <option name="presentableId" value="Default" />
       <updated>1613827742264</updated>
       <workItem from="1613827744292" duration="363000" />
-      <workItem from="1613828133950" duration="3761000" />
+      <workItem from="1613828133950" duration="1228000" />
+      <workItem from="1614112267934" duration="567000" />
+      <workItem from="1614337229980" duration="26000" />
+      <workItem from="1614340764665" duration="8758000" />
+      <workItem from="1614724089267" duration="43000" />
+      <workItem from="1614948823465" duration="12413000" />
+      <workItem from="1615029847548" duration="3790000" />
+      <workItem from="1615067606138" duration="15975000" />
+      <workItem from="1615500735341" duration="394000" />
     </task>
     <task id="LOCAL-00001" summary="Ghilas commited les classes eni">
       <created>1613828472218</created>
@@ -93,14 +127,28 @@
       <option name="project" value="LOCAL" />
       <updated>1613828472218</updated>
     </task>
-    <task id="LOCAL-00002" summary="Ghilas commited a new version with new transitions">
-      <created>1613832695232</created>
+    <task id="LOCAL-00002" summary="Tout est bien">
+      <created>1614052026476</created>
       <option name="number" value="00002" />
       <option name="presentableId" value="LOCAL-00002" />
       <option name="project" value="LOCAL" />
-      <updated>1613832695232</updated>
+      <updated>1614052026476</updated>
+    </task>
+    <task id="LOCAL-00003" summary="Final push a propos de JSONDEAL">
+      <created>1614052212166</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1614052212166</updated>
+    </task>
+    <task id="LOCAL-00004" summary="0.1">
+      <created>1614171320903</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1614171320903</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -111,7 +159,34 @@
       <map>
         <entry key="MAIN">
           <value>
-            <State />
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="imadhou00" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+    <option name="RECENT_FILTERS">
+      <map>
+        <entry key="Branch">
+          <value>
+            <list>
+              <RecentGroup>
+                <option name="FILTER_VALUES">
+                  <option value="HEAD" />
+                </option>
+              </RecentGroup>
+            </list>
           </value>
         </entry>
       </map>
@@ -120,7 +195,28 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Ghilas commited les classes eni" />
-    <MESSAGE value="Ghilas commited a new version with new transitions" />
-    <option name="LAST_COMMIT_MESSAGE" value="Ghilas commited a new version with new transitions" />
+    <MESSAGE value="Tout est bien" />
+    <MESSAGE value="Final push a propos de JSONDEAL" />
+    <MESSAGE value="0.1" />
+    <MESSAGE value="Ajout de l'algorithme de synchronisation" />
+    <option name="LAST_COMMIT_MESSAGE" value="Ajout de l'algorithme de synchronisation" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <breakpoint enabled="true" type="java-exception">
+          <properties class="java.util.EmptyStackException" package="java.util" />
+          <option name="timeStamp" value="11" />
+        </breakpoint>
+      </breakpoints>
+      <default-breakpoints>
+        <breakpoint enabled="true" type="java-exception" />
+      </default-breakpoints>
+    </breakpoint-manager>
+    <watches-manager>
+      <configuration name="Application">
+        <watch expression="a" language="JAVA" />
+      </configuration>
+    </watches-manager>
   </component>
 </project>
\ No newline at end of file
