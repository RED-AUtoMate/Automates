public Automate minimisation(){
		if(this.estDeterministe()) return Moore.minimisation(this);
		else return Moore.minimisation(this.determinise());
	}
	
	/**
	 * Cree l'automate de l'arbre representant une expression rationnelle
	 * @param arbre arbre d'une expression rationnelle
	 */
	private void fromArbre(Arbre arbre){
		initiaux.clear();
		this.clear();
		
		int idCompteur = 0;
		HashMap<Feuille, Etat> map = new HashMap<Feuille, Etat>();
		Map<Feuille, Set<Feuille>> succ = arbre.succ();
		Stack<Feuille> pile = new Stack<Feuille>();
		
		Etat etatInit = new Etat(true, arbre.contientMotVide, idCompteur++);
		Feuille feuilleInit = new Feuille(Arbre.MOT_VIDE);
		this.ajouteEtatSeul(etatInit);
		succ.put(feuilleInit, arbre.premiers);
		map.put(feuilleInit, etatInit);
		pile.push(feuilleInit);
		
		while(!pile.isEmpty()){
			Feuille feuilleCourante = pile.pop();
			if(succ.get(feuilleCourante) != null){
				for(Feuille feuilleSucc : succ.get(feuilleCourante)){
					Etat etatCourant = map.get(feuilleSucc);
					if(etatCourant == null){
						etatCourant = new Etat(false, arbre.derniers.contains(feuilleSucc), idCompteur++);
						this.ajouteEtatSeul(etatCourant);
						map.put(feuilleSucc, etatCourant);
						pile.push(feuilleSucc);
					}
					map.get(feuilleCourante).ajouteTransition(feuilleSucc.symbole, etatCourant);
				}
			}
		}
	}
	